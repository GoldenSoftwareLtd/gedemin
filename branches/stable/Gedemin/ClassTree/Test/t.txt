unit dlgCompanyAccount_unit;

interface

type
  TdlgCompanyAccount = class(TForm)

  public
    Label1: TLabel;
    edBank: TEdit;
    btnFindCompany: TButton;
    btnNewCompany: TButton;
    btnPropertyCompany: TButton;
    Label2: TLabel;
    edBankName: TEdit;
    Label3: TLabel;
    edCode: TEdit;
    Label4: TLabel;
    edMFO: TEdit;
    Label5: TLabel;
    edAccount: TEdit;
    Label9: TLabel;
    Label6: TLabel;
    edAccountType: TEdit;
    btnOK: TButton;
    btnCancel: TButton;
    Image5: TImage;
    Label7: TLabel;
    Bevel2: TBevel;
    mAddress: TMemo;
    eCorrAccount: TLabel;
    edCorrAccount: TEdit;
    Label10: TLabel;
    Label8: TLabel;
    edPayername: TEdit;
    qryCompanyCode: TIBQuery;
    qryFindCompany: TIBQuery;
    Bevel1: TBevel;
    ActionList1: TActionList;
    aSearch: TAction;
    aProperty: TAction;
    cbDisabled: TCheckBox;
    cbMainAccount: TCheckBox;
    cbCurrency: TComboBox;
    qryCurr: TIBQuery;
    P: Integer;
    BankKey: Integer;

    procedure btnOKClick(Sender: TObject);
    procedure edBankExit(Sender: TObject);
    procedure btnNewCompanyClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure aSearchUpdate(Sender: TObject);
    procedure aPropertyExecute(Sender: TObject);
    procedure aSearchExecute(Sender: TObject);
    procedure aPropertyUpdate(Sender: TObject);
    procedure FindBank;
  end;

implementation

end.

unit dlgCompany_unit;

interface

type
(* Названия полей соответсвует названиям полей в БД*)
  TBank = class(TObject)

  public
    id: Integer;
    MainAccount: Integer;
    bankkey: Integer;
    currkey: Integer;
    bankname: String;
    payername: String;
    code: String;
    mfo: String;
    address: String;
    account: String;
    accounttype: String;
    corraccount: String;
    disabled: Integer;
    New: Boolean;
  end;

  TdlgCompany = class(TForm)
  private
    procedure PresetForm;
    procedure SelectedBanks(K: Integer);
    function CheckEmail(const Email: String): Boolean;

  public
    dsCompany: TDataSource;
    qryCompany: TIBQuery;
    ibuCompany: TIBUpdateSQL;
    qryCopyCompany: TIBQuery;
    dsContact: TDataSource;
    qryContact: TIBQuery;
    qryNewContact: TIBQuery;
    ibuContact: TIBUpdateSQL;
    qryCopyContact: TIBQuery;
    opdContact: TOpenPictureDialog;
    Scanner: TScanner;
    btnOK: TButton;
    btnCancel: TButton;
    dsCompanyCode: TDataSource;
    qryCompanyCode: TIBQuery;
    ibuCompanyCode: TIBUpdateSQL;
    qryCopyCompanyCode: TIBQuery;
    pcContact: TPageControl;
    tsGeneral: TTabSheet;
    Image6: TImage;
    Label40: TLabel;
    Bevel6: TBevel;
    Label41: TLabel;
    Label42: TLabel;
    Label43: TLabel;
    Label44: TLabel;
    Label45: TLabel;
    Label46: TLabel;
    Label47: TLabel;
    Label48: TLabel;
    Label49: TLabel;
    Label50: TLabel;
    Label51: TLabel;
    Label53: TLabel;
    dbtTaxtID: TDBText;
    dbtWFax: TDBText;
    dbtWPhone: TDBText;
    dbtCompanyName: TDBText;
    dbtOffice: TDBText;
    dbtOKPO: TDBText;
    dbtPhone: TDBText;
    dbtEmail: TDBText;
    dbtName: TDBText;
    dbtURL: TDBText;
    dbtMobile: TDBText;
    dbtAddress: TDBText;
    tsName: TTabSheet;
    Bevel1: TBevel;
    Label1: TLabel;
    Label8: TLabel;
    Label6: TLabel;
    Label9: TLabel;
    Label66: TLabel;
    Label67: TLabel;
    dbeName: TDBEdit;
    dbeFullName: TDBEdit;
    dbmAddress: TDBMemo;
    dbePhone: TDBEdit;
    dbeFax: TDBEdit;
    TabSheet2: TTabSheet;
    Label2: TLabel;
    Bevel2: TBevel;
    Label17: TLabel;
    btnGoHome: TButton;
    dbedWWW: TDBEdit;
    TabSheet3: TTabSheet;
    Label3: TLabel;
    Image3: TImage;
    Bevel3: TBevel;
    Label21: TLabel;
    Label28: TLabel;
    dbeOKPO: TDBEdit;
    TabSheet1: TTabSheet;
    Label54: TLabel;
    Label55: TLabel;
    Label56: TLabel;
    Image7: TImage;
    Bevel7: TBevel;
    btnScanVis1: TButton;
    btnClearVis1: TButton;
    dbiVisitCard: TDBImage;
    btnLoad: TButton;
    Label4: TLabel;
    dbcbCompanyType: TDBComboBox;
    Label12: TLabel;
    dbmNote: TDBMemo;
    Image2: TImage;
    Image5: TImage;
    Label5: TLabel;
    dbeTaxid: TDBEdit;
    Label18: TLabel;
    dbeOKNH: TDBEdit;
    Label19: TLabel;
    dbeSOATO: TDBEdit;
    Label20: TLabel;
    dbeSOOU: TDBEdit;
    Label22: TLabel;
    dbeLegalNummer: TDBEdit;
    edHeadCompany: TEdit;
    btnFindCompany: TButton;
    lvBanks: TListView;
    btnNewBank: TButton;
    btnEditBank: TButton;
    btnDeleteBank: TButton;
    qryHeadCompany: TIBQuery;
    qryAddCode: TIBQuery;
    qrySelBank: TIBQuery;
    Label11: TLabel;
    edEmail: TEdit;
    btnAdd: TButton;
    btnDelete: TButton;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label7: TLabel;
    Label10: TLabel;
    dbeCity: TDBEdit;
    dbeRegion: TDBEdit;
    dbeZIP: TDBEdit;
    dbeCountry: TDBEdit;
    dbePbox: TDBEdit;
    dbeDistrict: TDBEdit;
    boAccess: TboAccess;
    tsAttribute: TTabSheet;
    boInputAttribute: TboInputAttribute;
    Label64: TLabel;
    Bevel10: TBevel;
    Image10: TImage;
    qryGetSecurity: TIBQuery;
    btnNew: TButton;
    alNew: TActionList;
    actNew: TAction;
    actDeleteEmail: TAction;
    lvEmail: TListView;
    actSearch: TAction;
    actEditBank: TAction;
    actDeleteBank: TAction;
    actScaner: TAction;
    actClear: TAction;
    qryDeleteBank: TIBQuery;
    qryNewBankAccount: TIBQuery;
    ilBank: TImageList;
    btnAccess: TButton;
    qryEditCode: TIBQuery;
    Parent: Integer;
    TestActive: Boolean;
    TestAppendBank: Boolean;
    KeyList: TStringList;
    Commit: Boolean;

    procedure btnOKClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure btnAddClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnDefaultClick(Sender: TObject);
    procedure btnScanVis1Click(Sender: TObject);
    procedure btnLoadClick(Sender: TObject);
    procedure edEmailKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnNewBankClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure edHeadCompanyExit(Sender: TObject);
    procedure btnGoHomeClick(Sender: TObject);
    procedure actNewExecute(Sender: TObject);
    procedure actDeleteEmailExecute(Sender: TObject);
    procedure actDeleteEmailUpdate(Sender: TObject);
    procedure lvBanksEnter(Sender: TObject);
    procedure lvBanksExit(Sender: TObject);
    procedure actSearchExecute(Sender: TObject);
    procedure actSearchUpdate(Sender: TObject);
    procedure actEditBankExecute(Sender: TObject);
    procedure actDeleteBankExecute(Sender: TObject);
    procedure actEditBankUpdate(Sender: TObject);
    procedure actScanerExecute(Sender: TObject);
    procedure actScanerUpdate(Sender: TObject);
    procedure actClearExecute(Sender: TObject);
    procedure actClearUpdate(Sender: TObject);
    procedure btnAccessClick(Sender: TObject);
    procedure AppendContact;
    procedure FindCompany;
    procedure MakeBankList;
    function AddCompany(const AParent: Integer):Integer;
    function EditCompany(const Key: Integer): Boolean;
    function CopyCompany(const Key, Parent: Integer): Integer;
    procedure ShowMainBank(id: Integer);
  end;

implementation

end.

unit dlgCompanzAccount_unit;

interface

type
  TForm1 = class(TForm)
  end;

implementation

end.

unit dlgCOM_unit;

interface

type
  TForm1 = class(TForm)
  end;

implementation

end.

unit dlgContactGroup_unit;

interface

type
  TdlgContactGroup = class(TForm)

  public
    pcGroup: TPageControl;
    tsGroup: TTabSheet;
    tsProperty: TTabSheet;
    dsGroup: TDataSource;
    qryGroup: TIBQuery;
    ibuGroup: TIBUpdateSQL;
    qryNewID: TIBQuery;
    btnOk: TButton;
    btnCancel: TButton;
    Label1: TLabel;
    dbeName: TDBEdit;
    lvContacts: TListView;
    btnSelect: TButton;
    btnNewContact: TButton;
    btnDelete: TButton;
    btnProperty: TButton;
    Label3: TLabel;
    Image3: TImage;
    Bevel3: TBevel;
    Label22: TLabel;
    Label23: TLabel;
    Label24: TLabel;
    Label25: TLabel;
    Label27: TLabel;
    Label28: TLabel;
    Label29: TLabel;
    DBMemo3: TDBMemo;
    DBEdit15: TDBEdit;
    DBEdit16: TDBEdit;
    DBEdit18: TDBEdit;
    dbedWWW: TDBEdit;
    btnGo: TButton;
    DBEdit20: TDBEdit;
    DBEdit21: TDBEdit;
    DBEdit24: TDBEdit;
    Label2: TLabel;
    Label4: TLabel;
    DBMemo1: TDBMemo;
    Bevel1: TBevel;
    Image1: TImage;
    Label5: TLabel;
    PopupMenu1: TPopupMenu;
    N1: TMenuItem;
    qryDeleteList: TIBQuery;
    qryAddList: TIBQuery;
    qryContactList: TIBQuery;
    bntNewCompany: TButton;
    boAccess: TboAccess;
    qryGetSecurity: TIBQuery;
    btnNew: TButton;
    alNew: TActionList;
    aNew: TAction;
    btnAccess: TButton;
    Commit: Boolean;
    Parent: Integer;
    TextActive: Boolean;
    TestContactGroup: Boolean;
    KeyList: TStringList;

    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure btnSelectClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnNewContactClick(Sender: TObject);
    procedure btnPropertyClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure bntNewCompanyClick(Sender: TObject);
    procedure btnGoClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure aNewExecute(Sender: TObject);
    procedure btnAccessClick(Sender: TObject);
    procedure AppendGroup;
    function AddGroup(const AParent: Integer): Integer;
    function EditGroup(Key: Integer): Boolean;
    function TestAdd(id: Integer): Boolean;
    procedure MakeList;
  end;

implementation

end.

unit dlgContactList_unit;

interface

type
  TdlgContactList = class(TForm)
  end;

implementation

end.

unit dlgContact_unit;

interface

type
  TdlgContact = class(TForm)
  private
    procedure PresetForm;
    function CheckEmail(const Email: String): Boolean;

  public
    btnOK: TButton;
    btnCancel: TButton;
    pcContact: TPageControl;
    tsName: TTabSheet;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;
    TabSheet4: TTabSheet;
    TabSheet5: TTabSheet;
    Bevel1: TBevel;
    Image1: TImage;
    Label1: TLabel;
    Label2: TLabel;
    Image2: TImage;
    Bevel2: TBevel;
    Label3: TLabel;
    Image3: TImage;
    Bevel3: TBevel;
    Label4: TLabel;
    Image4: TImage;
    Bevel4: TBevel;
    Label5: TLabel;
    Image5: TImage;
    Bevel5: TBevel;
    Label6: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label7: TLabel;
    edEmail: TEdit;
    btnAdd: TButton;
    btnDelete: TButton;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    Label18: TLabel;
    Label19: TLabel;
    Label20: TLabel;
    btnGoHome: TButton;
    Label21: TLabel;
    Label22: TLabel;
    Label23: TLabel;
    Label24: TLabel;
    Label25: TLabel;
    Label26: TLabel;
    dbeFirstName: TDBEdit;
    dbeMiddleName: TDBEdit;
    dbeSurname: TDBEdit;
    dbeNickName: TDBEdit;
    dbmHAddress: TDBMemo;
    dbHCity: TDBEdit;
    dbHRegion: TDBEdit;
    dbHZIP: TDBEdit;
    dbHCountry: TDBEdit;
    dbHWWW: TDBEdit;
    dbHPhone: TDBEdit;
    dbHFax: TDBEdit;
    DBEdit13: TDBEdit;
    dbCompanyname: TDBEdit;
    dbmWAddress: TDBMemo;
    dbWCity: TDBEdit;
    dbWRegion: TDBEdit;
    dbWZIP: TDBEdit;
    dbWCountry: TDBEdit;
    Label27: TLabel;
    dbWWW: TDBEdit;
    btnGoWork: TButton;
    Label28: TLabel;
    Label29: TLabel;
    Label30: TLabel;
    Label31: TLabel;
    Label32: TLabel;
    Label33: TLabel;
    Label34: TLabel;
    dbRank: TDBEdit;
    dbWDepartment: TDBEdit;
    dbWOffice: TDBEdit;
    dbWPhone: TDBEdit;
    dbWFax: TDBEdit;
    dbWPager: TDBEdit;
    dbIPPhone: TDBEdit;
    Label35: TLabel;
    Label36: TLabel;
    dbCouple: TDBEdit;
    btnAddChild: TButton;
    btnDeleteChild: TButton;
    dbmComentary: TDBMemo;
    Label39: TLabel;
    dsContact: TDataSource;
    qryContact: TIBQuery;
    qryNewContact: TIBQuery;
    ibuContact: TIBUpdateSQL;
    tsGeneral: TTabSheet;
    Image6: TImage;
    Label40: TLabel;
    Bevel6: TBevel;
    dbcbName: TDBComboBox;
    Label41: TLabel;
    Label42: TLabel;
    Label43: TLabel;
    Label44: TLabel;
    Label45: TLabel;
    Label46: TLabel;
    Label47: TLabel;
    Label48: TLabel;
    Label49: TLabel;
    Label50: TLabel;
    Label51: TLabel;
    Label52: TLabel;
    Label53: TLabel;
    qryCopyContact: TIBQuery;
    dbtRank: TDBText;
    dbtWFax: TDBText;
    dbtWPhone: TDBText;
    dbtCompanyName: TDBText;
    dbtOffice: TDBText;
    dbtDepartment: TDBText;
    dbtPhone: TDBText;
    dbtEmail: TDBText;
    dbtName: TDBText;
    dbtHWWW: TDBText;
    dbtMobile: TDBText;
    dbtWPager: TDBText;
    dbtWWW: TDBText;
    TabSheet1: TTabSheet;
    btnScanVis1: TButton;
    btnClearVis1: TButton;
    dbiVisitCard: TDBImage;
    Label54: TLabel;
    Label55: TLabel;
    TabSheet6: TTabSheet;
    TabSheet7: TTabSheet;
    Label56: TLabel;
    Image7: TImage;
    Bevel7: TBevel;
    Image8: TImage;
    Label57: TLabel;
    Bevel8: TBevel;
    Label58: TLabel;
    dbiVisitCard2: TDBImage;
    btnScanVis2: TButton;
    btnClearVis2: TButton;
    Label59: TLabel;
    Image9: TImage;
    Label60: TLabel;
    Bevel9: TBevel;
    Label61: TLabel;
    dbiPhoto: TDBImage;
    btnScanPhoto: TButton;
    btnClearPhoto: TButton;
    Label62: TLabel;
    Scanner: TScanner;
    AclContact: TActionList;
    actScanVis1: TAction;
    actScanVis2: TAction;
    actScanPhoto: TAction;
    actClearVis1: TAction;
    actClearVis2: TAction;
    actClearPhoto: TAction;
    Button1: TButton;
    actLoadVis1: TAction;
    actLoadVis2: TAction;
    actLoadPhoto: TAction;
    Button2: TButton;
    Button3: TButton;
    opdContact: TOpenPictureDialog;
    qryPeople: TIBQuery;
    ibuPeople: TIBUpdateSQL;
    dsPeople: TDataSource;
    qryCopyPeople: TIBQuery;
    actGoWWWHome: TAction;
    actGoWWWwork: TAction;
    btnFind: TButton;
    qryCompany: TIBQuery;
    actFindCompany: TAction;
    edFindCompany: TEdit;
    Label63: TLabel;
    btnNewFirm: TButton;
    actNewFirm: TAction;
    btnEditFirm: TButton;
    actEditFirm: TAction;
    boAccess: TboAccess;
    tsAttribute: TTabSheet;
    Label64: TLabel;
    Bevel10: TBevel;
    Image10: TImage;
    boInputAttribute: TboInputAttribute;
    qryGetSecurity: TIBQuery;
    btnNew: TButton;
    alNew: TActionList;
    actNew: TAction;
    lvEmail: TListView;
    actDeleteEmail: TAction;
    lvChildren: TListView;
    actDeleteChildren: TAction;
    Label37: TLabel;
    cbSex: TComboBox;
    Label38: TLabel;
    xdbeBIRTHDAY: TxDateDBEdit;
    btnAccess: TButton;
    Parent: Integer;
    BitmapIndex: Integer;
    TestActive: Boolean;
    KeyList: TStringlist;
    Commit: Boolean;

    procedure btnAddClick(Sender: TObject);
    procedure edEmailKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnDeleteClick(Sender: TObject);
    procedure edTempEmailExit(Sender: TObject);
    procedure btnDefaultClick(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure dbeFirstNameKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure dbeFirstNameKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnAddChildClick(Sender: TObject);
    procedure edTempChildExit(Sender: TObject);
    procedure btnGoHomeClick(Sender: TObject);
    procedure ScannerImageAcquired(Sender: TObject; hDib: HBITMAP);
    procedure actScanVis1Execute(Sender: TObject);
    procedure actScanVis2Execute(Sender: TObject);
    procedure actScanPhotoExecute(Sender: TObject);
    procedure actClearVis1Execute(Sender: TObject);
    procedure actClearVis2Execute(Sender: TObject);
    procedure actClearPhotoExecute(Sender: TObject);
    procedure actScanVis1Update(Sender: TObject);
    procedure actClearVis1Update(Sender: TObject);
    procedure actClearVis2Update(Sender: TObject);
    procedure actClearPhotoUpdate(Sender: TObject);
    procedure actScanVis2Update(Sender: TObject);
    procedure actScanPhotoUpdate(Sender: TObject);
    procedure actLoadVis1Execute(Sender: TObject);
    procedure actLoadVis2Execute(Sender: TObject);
    procedure actLoadPhotoExecute(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure actGoWWWHomeExecute(Sender: TObject);
    procedure actGoWWWworkExecute(Sender: TObject);
    procedure actGoWWWHomeUpdate(Sender: TObject);
    procedure actGoWWWworkUpdate(Sender: TObject);
    procedure actFindCompanyExecute(Sender: TObject);
    procedure actNewFirmExecute(Sender: TObject);
    procedure actFindCompanyUpdate(Sender: TObject);
    procedure actEditFirmExecute(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure actNewExecute(Sender: TObject);
    procedure edTempEmailKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure actDeleteEmailExecute(Sender: TObject);
    procedure actDeleteEmailUpdate(Sender: TObject);
    procedure actDeleteChildrenExecute(Sender: TObject);
    procedure actDeleteChildrenUpdate(Sender: TObject);
    procedure lvEmailEnter(Sender: TObject);
    procedure lvEmailExit(Sender: TObject);
    procedure actEditFirmUpdate(Sender: TObject);
    procedure edFindCompanyChange(Sender: TObject);
    procedure btnAccessClick(Sender: TObject);
    procedure AppendContact;
    procedure FindCompany;
    function AddContact(const AParent: Integer):Integer;
    function EditContact(const Key: Integer): Boolean;
    function CopyContact(const Key, Parent: Integer): Integer;
    procedure RefreshFirmData(const Key: integer);
  end;

implementation

end.

unit dlgFind_unit;

interface

type
  TdlgFind = class(TForm)

  public
    Panel1: TPanel;
    Label1: TLabel;
    edName: TEdit;
    Label2: TLabel;
    edAddress: TEdit;
    Label3: TLabel;
    edEmail: TEdit;
    Label4: TLabel;
    edPhone: TEdit;
    Button1: TButton;
    btnClear: TButton;
    Button3: TButton;
    btnSelect: TButton;
    Panel2: TPanel;
    Image1: TImage;
    btnProperty: TButton;
    btnDelete: TButton;
    ListView1: TListView;
    lvFindContact: TListView;
    qryFind: TIBQuery;
    PopupMenu1: TPopupMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    ActionList1: TActionList;
    aDelete: TAction;
    aProperty: TAction;
    Panel4: TPanel;
    lItemsCount: TLabel;
    aFind: TAction;
    aClear: TAction;
    actShoose: TAction;
    Commit: Boolean;
    Select: Boolean;
    Customer: Boolean;

    procedure btnClearClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnSelectClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure aDeleteExecute(Sender: TObject);
    procedure aPropertyExecute(Sender: TObject);
    procedure aFindExecute(Sender: TObject);
    procedure aFindUpdate(Sender: TObject);
    procedure aClearExecute(Sender: TObject);
    procedure aPropertyUpdate(Sender: TObject);
    procedure aDeleteUpdate(Sender: TObject);
    procedure actShooseExecute(Sender: TObject);
    procedure actShooseUpdate(Sender: TObject);
    procedure Find(Name: String);
  end;

implementation

end.

unit dlgFolder_unit;

interface

type
  TdlgFolder = class(TForm)

  public
    Label1: TLabel;
    Image1: TImage;
    dbeName: TDBEdit;
    btnOk: TButton;
    btnCancel: TButton;
    dsFolder: TDataSource;
    qryFolder: TIBQuery;
    qryNewID: TIBQuery;
    Bevel1: TBevel;
    boAccess: TboAccess;
    updFolder: TIBUpdateSQL;
    qryGetSecurity: TIBQuery;
    btnNew: TButton;
    alNew: TActionList;
    aNew: TAction;
    cbMainFolder: TDBCheckBox;
    btnAccess: TButton;
    Parent: Integer;
    KeyList: TStringList;

    procedure btnOkClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure aNewExecute(Sender: TObject);
    procedure btnAccessClick(Sender: TObject);
    procedure AppendFolder;
    function AddFolder(AParent: Integer): Integer;
    function EditFolder(Key: Integer): Boolean;
  end;

implementation

end.

unit dlgSelectContact_unit;

interface

type
  TdlgSelectContact = class(TForm)

  public
    cbFolder: TComboBox;
    btnFind: TButton;
    lvViewContact: TListView;
    lvContact: TListView;
    btnChoose: TButton;
    Button3: TButton;
    Button4: TButton;
    btnNewContact: TButton;
    Bevel1: TBevel;
    btnProperty: TButton;
    qryFolder: TIBQuery;
    qryContactView: TIBQuery;
    PopupMenu1: TPopupMenu;
    miDelete: TMenuItem;
    btnNewCompany: TButton;
    AL: array of Integer;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure cbFolderChange(Sender: TObject);
    procedure btnChooseClick(Sender: TObject);
    procedure btnPropertyClick(Sender: TObject);
    procedure btnNewContactClick(Sender: TObject);
    procedure miDeleteClick(Sender: TObject);
    procedure btnFindClick(Sender: TObject);
    procedure btnNewCompanyClick(Sender: TObject);
    procedure ShowContactList;
  end;

implementation

end.

unit dmContact_unit;

interface

type
  TdmContact = class(TDataModule)

  public
    boAccess: TboAccess;
    ilSmall: TImageList;
    ibsqlDeleteContact: TIBSQL;
    ilLarge: TImageList;

    procedure DataModuleCreate(Sender: TObject);
    procedure GetAccess;
    function DeleteContact(KeyList: TStringList): Boolean;
  end;

implementation

end.

unit examle1_unit;

interface

type
  TForm1 = class(TForm)

  public
    Panel1: TPanel;
    btnOK: TButton;
    btnCancel: TButton;
    Panel2: TPanel;
    Panel3: TPanel;
    Panel4: TPanel;
    ScrollBox1: TScrollBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Bevel3: TBevel;
    Bevel1: TBevel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    ComboBox1: TComboBox;
    ComboBox2: TComboBox;
    ComboBox3: TComboBox;
    ComboBox4: TComboBox;
    ComboBox5: TComboBox;
    ComboBox6: TComboBox;
    ComboBox7: TComboBox;
    ComboBox8: TComboBox;
    ComboBox9: TComboBox;
    ComboBox10: TComboBox;
    DBGrid1: TDBGrid;
    Label16: TLabel;
    Edit1: TEdit;
    Label17: TLabel;
    Edit2: TEdit;
  end;

implementation

end.

unit examle2_unit;

interface

type
  TForm2 = class(TForm)

  public
    ScrollBox1: TScrollBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Bevel3: TBevel;
    Bevel1: TBevel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    ComboBox1: TComboBox;
    ComboBox2: TComboBox;
    ComboBox3: TComboBox;
    ComboBox4: TComboBox;
    ComboBox5: TComboBox;
    ComboBox6: TComboBox;
    ComboBox7: TComboBox;
    ComboBox8: TComboBox;
    ComboBox9: TComboBox;
    ComboBox10: TComboBox;
    Label16: TLabel;
    Edit1: TEdit;
    Label17: TLabel;
    Edit2: TEdit;
    Label18: TLabel;
    Edit3: TEdit;
    Label19: TLabel;
    Edit4: TEdit;
    Label20: TLabel;
    Edit5: TEdit;
  end;

implementation

end.

unit gd_ab_frmmain;

interface

type
  TfrmAddressbookMain = class(TCreateableForm)
  private
    Node: TTreeNode;
    CopyID: Integer;
    CopyImage: Integer;

  public
    qryContactView: TIBQuery;
    ilToolBar: TImageList;
    Panel1: TPanel;
    Splitter1: TSplitter;
    pmAdd: TPopupMenu;
    pmView: TPopupMenu;
    tvGroup: TTreeView;
    qryGroup: TIBQuery;
    N1: TMenuItem;
    N3: TMenuItem;
    N2: TMenuItem;
    N4: TMenuItem;
    ActionList1: TActionList;
    actNewContact: TAction;
    actNewGroup: TAction;
    actNewFolder: TAction;
    actNewSubFolder: TAction;
    pmTree: TPopupMenu;
    N5: TMenuItem;
    N6: TMenuItem;
    N7: TMenuItem;
    N8: TMenuItem;
    N9: TMenuItem;
    N10: TMenuItem;
    actProperty: TAction;
    pmiLarge: TMenuItem;
    pmiSmall: TMenuItem;
    pmiList: TMenuItem;
    pmiGrid: TMenuItem;
    Panel2: TPanel;
    actFind: TAction;
    qryAddGroupContact: TIBQuery;
    ilSelected: TImageList;
    actRefresh: TAction;
    aRefresh1: TMenuItem;
    N11: TMenuItem;
    N12: TMenuItem;
    N13: TMenuItem;
    N14: TMenuItem;
    N15: TMenuItem;
    N16: TMenuItem;
    actDelete: TAction;
    actCopy: TAction;
    actPast: TAction;
    N17: TMenuItem;
    N18: TMenuItem;
    ilHotImages: TImageList;
    qryDeleteList: TIBQuery;
    lvContact: TListView;
    MainMenu: TMainMenu;
    N19: TMenuItem;
    N20: TMenuItem;
    N21: TMenuItem;
    N22: TMenuItem;
    Panel3: TPanel;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    tbDelete: TToolButton;
    ToolButton4: TToolButton;
    ToolButton6: TToolButton;
    Panel4: TPanel;
    lItemsCount: TLabel;
    N23: TMenuItem;
    N25: TMenuItem;
    N26: TMenuItem;
    N27: TMenuItem;
    N28: TMenuItem;
    N24: TMenuItem;
    N29: TMenuItem;
    N30: TMenuItem;
    N31: TMenuItem;
    N32: TMenuItem;
    N36: TMenuItem;
    N37: TMenuItem;
    N38: TMenuItem;
    miLarge: TMenuItem;
    miSmall: TMenuItem;
    miList: TMenuItem;
    miGrid: TMenuItem;
    actNewCompany: TAction;
    N33: TMenuItem;
    N34: TMenuItem;
    N35: TMenuItem;
    ToolButton5: TToolButton;
    actNext: TAction;
    ToolButton9: TToolButton;
    tbRefresh: TToolButton;
    actAccess: TAction;
    qryCompany: TIBQuery;
    ibuCompany: TIBUpdateSQL;
    qryNewContact: TIBQuery;
    N40: TMenuItem;
    qrySetAccess: TIBQuery;
    boAccess: TboAccess;
    pmListView: TPopupMenu;
    MenuItem1: TMenuItem;
    MenuItem2: TMenuItem;
    MenuItem3: TMenuItem;
    MenuItem4: TMenuItem;
    MenuItem7: TMenuItem;
    MenuItem8: TMenuItem;
    MenuItem9: TMenuItem;
    MenuItem10: TMenuItem;
    MenuItem11: TMenuItem;
    MenuItem12: TMenuItem;
    MenuItem13: TMenuItem;
    MenuItem14: TMenuItem;
    MenuItem15: TMenuItem;
    MenuItem16: TMenuItem;
    MenuItem17: TMenuItem;
    ToolButton3: TToolButton;
    pmFIlter: TPopupMenu;
    actDeleteFilter: TAction;
    boDialogFilter: TboDialogFilter;
    boQueryFilter: TboQueryFilter;
    boSavedFilter: TboSavedFilter;
    N39: TMenuItem;
    N41: TMenuItem;
    lbFilter: TLabel;
    N42: TMenuItem;
    N43: TMenuItem;
    N44: TMenuItem;
    N45: TMenuItem;
    N46: TMenuItem;
    N47: TMenuItem;
    actLarge: TAction;
    actSmall: TAction;
    actList: TAction;
    actGrid: TAction;
    N48: TMenuItem;
    N49: TMenuItem;
    N50: TMenuItem;
    N51: TMenuItem;
    N52: TMenuItem;
    N53: TMenuItem;
    IBTransaction: TIBTransaction;
    gsFormDataSaver: TgsFormDataSaver;
    class function CreateAndAssign(AnOwner: TComponent): TForm;

    procedure FormCreate(Sender: TObject);
    procedure actNewSubFolderExecute(Sender: TObject);
    procedure actNewFolderExecute(Sender: TObject);
    procedure actPropertyExecute(Sender: TObject);
    procedure tvGroupChange(Sender: TObject; Node: TTreeNode);
    procedure actFindExecute(Sender: TObject);
    procedure actNewGroupExecute(Sender: TObject);
    procedure actNewContactExecute(Sender: TObject);
    procedure actRefreshExecute(Sender: TObject);
    procedure actDeleteExecute(Sender: TObject);
    procedure actCopyExecute(Sender: TObject);
    procedure pmTreePopup(Sender: TObject);
    procedure actPastExecute(Sender: TObject);
    procedure N32Click(Sender: TObject);
    procedure actNewCompanyExecute(Sender: TObject);
    procedure actNextExecute(Sender: TObject);
    procedure actNextUpdate(Sender: TObject);
    procedure tbRefreshClick(Sender: TObject);
    procedure N36Click(Sender: TObject);
    procedure miAddFilterClick(Sender: TObject);
    procedure actAccessExecute(Sender: TObject);
    procedure miAddNewFilterClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure N41Click(Sender: TObject);
    procedure actDeleteUpdate(Sender: TObject);
    procedure actPropertyUpdate(Sender: TObject);
    procedure actNewSubFolderUpdate(Sender: TObject);
    procedure actPastUpdate(Sender: TObject);
    procedure actCopyUpdate(Sender: TObject);
    procedure actNewContactUpdate(Sender: TObject);
    procedure actNewCompanyUpdate(Sender: TObject);
    procedure actNewGroupUpdate(Sender: TObject);
    procedure actNewFolderUpdate(Sender: TObject);
    procedure actAccessUpdate(Sender: TObject);
    procedure actLargeExecute(Sender: TObject);
    procedure actSmallExecute(Sender: TObject);
    procedure actListExecute(Sender: TObject);
    procedure actGridExecute(Sender: TObject);
    procedure boSavedFilterFiltred(Sender: TObject; Change: Boolean);
    procedure boSavedFilterChange(Sender: TObject; Change: Boolean);
    procedure MakeListView;
    procedure ShowContact(ID: Integer);
    procedure ShowElement(ID: Integer);
    procedure ShowBuffer(ID: Integer);
  end;

implementation

end.

unit gd_dlgChooseReference_unit;

interface

type
  Tgd_dlgChooseReference = class(TForm)

  public
    btnOk: TButton;
    btnCancel: TButton;
    lvGroup: TListView;
  end;

implementation

end.

unit gd_dlgFilter_unit;

interface

type
  Tgd_dlgFilter = class(TForm)

  public
    Label1: TLabel;
    Edit1: TEdit;
    Label2: TLabel;
    Edit2: TEdit;
    CheckBox1: TCheckBox;
    Bevel5: TBevel;
    btnOK: TButton;
    btnCancel: TButton;
    Button1: TButton;
  end;

implementation

end.

unit gd_dlgViewFilter_unit;

interface

type
  Tgd_dlgViewFilter = class(TForm)

  public
    ListView3: TListView;
    Button1: TButton;
    btnOK: TButton;
    btnCancel: TButton;
  end;

implementation

end.

unit olecontac_unit;

interface

type
  TTContact = class(TAutoObject, ITContact)
  end;

implementation

end.

unit BugBase_TLB;

interface

type
implementation

end.

unit bug_automation;

interface

type
  ToWindow = class(TObject)
  private
    FWindow: TForm;

  public
    constructor Create;
    destructor Destroy;

    procedure CreateWindow(const ALeft, ATop, AWidth, AHeight: Integer);
    procedure DestroyWindow;
    procedure ShowModal(var Result: OleVariant);
    procedure AddControl(const AClassName, AName: WideString; const AX, AY, AW, AH: Integer;
      const AText: WideString);
    procedure SetControlText(const AName, AText: String);
    procedure GetControlText(const AName: String; var AText: OleVariant);
  end;

  ToBugRecord = class(TObject)
  private
    FBugRecordQuery: TIBSQL;

    function GetResponsible: String;
    procedure SetResponsible(const Value: String);

  public
    constructor Create(ADatabase: TIBDatabase; ATransaction: TIBTransaction);
    destructor Destroy;

    procedure Find(const AnID: Integer);

    property Responsible: String read GetResponsible write SetResponsible;
  end;

  ToBugFilter = class(TObject)
  private
    FFilter: TboQueryFilter;
    FFilterData: TFilterData;
    FBugQuery: TIBQuery;

    function GetBof: Boolean;
    function GetEof: Boolean;
    function GetActive: Boolean;
    procedure SetActive(const Value: Boolean);
    function GetID: Integer;

  public
    constructor Create(ADatabase: TIBDatabase; ATransaction: TIBTransaction);
    destructor Destroy;

    procedure AddCondition(AFieldName, AValue1, AValue2: String; AFieldType, AConditionType: Integer);
    procedure Clear;
    procedure Open;
    procedure Close;
    procedure First;
    procedure Last;
    procedure Next;
    procedure Prior;

    property Active: Boolean read GetActive write SetActive;
    property Eof: Boolean read GetEof;
    property Bof: Boolean read GetBof;
    property ID: Integer read GetID;
  end;

implementation

end.

unit bug_automation_provider;

interface

type
  TBugProvider = class(TScriptObjectProvider)
  private
    FCoBugFilter: TCoBugFilter;
    FCoBugRecord: TCoBugRecord;
    FCoWindow: TCoWindow;
    FLogin: TboLogin;

  protected
    procedure CreateObjects;
    procedure AfterDeleteObjects;

  public
    constructor Create(ALogin: TboLogin);
    destructor Destroy;

  end;

implementation

end.

unit bug_co_automation;

interface

type
  TCoWindow = class(TAutoObject, ICoWindow)
  private
    FWindow: ToWindow;

  protected
    procedure AddControl(const AClassName, AName: WideString; AX, AY, AW,
      AH: Integer; const AText: WideString);
    procedure CreateWindow(ALeft, ATop, AWidth, AHeight: Integer);
    procedure DestroyWindow;
    procedure GetControlText(const AName: WideString; var AText: OleVariant);
    procedure SetControlText(const AName, AText: WideString);
    procedure ShowModal(var Result: OleVariant);

  public
    constructor Create;
    destructor Destroy;

  end;

  TCoBugRecord = class(TAutoObject, ICoBugRecord)
  private
    FBugRecord: ToBugRecord;

  protected
    function Get_Responsible: WideString;
    procedure Find(AnID: Integer);
    procedure Set_Responsible(const Value: WideString);

  public
    constructor Create(ADatabase: TIBDatabase; ATransaction: TIBTransaction);
    destructor Destroy;

  end;

  TCoBugFilter = class(TAutoObject, ICoBugFilter)
  private
    FBugFilter: ToBugFilter;

  protected
    function Get_Active: WordBool;
    function Get_BOF: WordBool;
    function Get_EOF: WordBool;
    procedure AddCondition(const AFieldName, AConditionValue1,
      AConditionValue2: WideString; AFieldType, AConditionType: Integer);
    procedure Clear;
    procedure Close;
    procedure First;
    procedure Last;
    procedure Next;
    procedure Open;
    procedure Prior;
    procedure Set_Active(Value: WordBool);
    function Get_ID: Integer;
    function Get_ID2: Integer;

  public
    constructor Create(ADatabase: TIBDatabase; ATransaction: TIBTransaction);
    destructor Destroy;

  end;

implementation

end.

unit bug_dlg_update_record;

interface

type
  TdlgUpdateRecord = class(TForm)

  public
    Button1: TButton;
    DBEdit1: TDBEdit;
    dbcbFixer: TDBComboBox;
    DBComboBox2: TDBComboBox;
    Button2: TButton;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    IBSQL: TIBSQL;
    DBMemo1: TDBMemo;

    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  end;

implementation

end.

unit bug_main_unit;

interface

type
  TfrmBugBaseMain = class(TCreateableForm)
  private
    FDefaultSubSystem: String;
    FDefaultBugArea: String;
    FDefaultBugFinder: String;
    FDefaultResponsible: String;

    procedure LoadListBoxes;

  public
    IBTransaction: TIBTransaction;
    IBQuery: TIBQuery;
    DataSource: TDataSource;
    dbcg: TDBCtrlGrid;
    DBText1: TDBText;
    dbcbSubSystem: TDBComboBox;
    IBSQL: TIBSQL;
    Label1: TLabel;
    dbcbBugArea: TDBComboBox;
    Label2: TLabel;
    dbcbBugType: TDBComboBox;
    Label3: TLabel;
    dbcbBugFreq: TDBComboBox;
    Label4: TLabel;
    DBMemo1: TDBMemo;
    DBMemo2: TDBMemo;
    dbcbFounder: TDBComboBox;
    Label5: TLabel;
    DBEdit1: TDBEdit;
    Label6: TLabel;
    dbcbResponsible: TDBComboBox;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    IBUpdateSQL: TIBUpdateSQL;
    IBQueryID: TIntegerField;
    IBQuerySUBSYSTEM: TIBStringField;
    IBQueryBUGAREA: TIBStringField;
    IBQueryBUGTYPE: TIBStringField;
    IBQueryBUGFREQUENCY: TIBStringField;
    IBQueryBUGDESCRIPTION: TIBStringField;
    IBQueryBUGINSTRUCTION: TIBStringField;
    IBQueryFOUNDER: TIBStringField;
    IBQueryRAISED: TDateField;
    IBQueryRESPONSIBLE: TIBStringField;
    IBQueryDECISION: TIBStringField;
    IBQueryDECISIONDATE: TDateField;
    IBQueryFIXER: TIBStringField;
    IBQueryAFULL: TIntegerField;
    IBQueryACHAG: TIntegerField;
    IBQueryAVIEW: TIntegerField;
    IBQueryRESERVED: TIntegerField;
    ActionList: TActionList;
    actInsert: TAction;
    actDelete: TAction;
    actOk: TAction;
    actCancel: TAction;
    actEdit: TAction;
    StatusBar: TStatusBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    ToolButton4: TToolButton;
    ToolButton5: TToolButton;
    boDialogFilter: TboDialogFilter;
    boQueryFilter: TboQueryFilter;
    boSavedFilter: TboSavedFilter;
    actFilter: TAction;
    ToolButton7: TToolButton;
    ToolButton8: TToolButton;
    pmFilter: TPopupMenu;
    ToolButton10: TToolButton;
    DBText2: TDBText;
    DBText3: TDBText;
    ToolButton12: TToolButton;
    actReport: TAction;
    actMacro: TAction;
    boScriptControl: TboScriptControl;
    boUserFunction: TboUserFunction;
    ibtrScript: TIBTransaction;
    ToolButton13: TToolButton;
    ToolButton14: TToolButton;
    actRefresh: TAction;
    ImageList: TImageList;
    ToolButton15: TToolButton;
    actPost: TAction;
    ToolButton6: TToolButton;
    actUpdate: TAction;
    IBQueryFIXCOMMENT: TIBStringField;
    gsFormDataSaver: TgsFormDataSaver;
    class function CreateAndAssign(AnOwner: TComponent): TForm;

    procedure FormCreate(Sender: TObject);
    procedure IBQueryNewRecord(DataSet: TDataSet);
    procedure actInsertExecute(Sender: TObject);
    procedure actDeleteExecute(Sender: TObject);
    procedure actOkExecute(Sender: TObject);
    procedure actCancelExecute(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure actInsertUpdate(Sender: TObject);
    procedure actDeleteUpdate(Sender: TObject);
    procedure actEditUpdate(Sender: TObject);
    procedure DataSourceStateChange(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure actFilterExecute(Sender: TObject);
    procedure actFilterUpdate(Sender: TObject);
    procedure actReportExecute(Sender: TObject);
    procedure actReportUpdate(Sender: TObject);
    procedure actMacroExecute(Sender: TObject);
    procedure boScriptControlCreateObject(Sender: TObject;
      Handler: TScriptObjectHandler);
    procedure actRefreshExecute(Sender: TObject);
    procedure actPostExecute(Sender: TObject);
    procedure actPostUpdate(Sender: TObject);
    procedure actMacroUpdate(Sender: TObject);
    procedure actRefreshUpdate(Sender: TObject);
    procedure actUpdateUpdate(Sender: TObject);
    procedure actUpdateExecute(Sender: TObject);
  end;

implementation

end.

unit bug_rpt_buglist;

interface

type
  TrptBugList = class(TForm)

  public
    Report: TQuickRep;
    QRBand1: TQRBand;
    QRBand2: TQRBand;
    QRDBText1: TQRDBText;
    QRLabel1: TQRLabel;
    QRBand3: TQRBand;
    QRLabel2: TQRLabel;
    QRDBText2: TQRDBText;
    QRLabel3: TQRLabel;
    QRDBText3: TQRDBText;
    QRDBText4: TQRDBText;
    QRDBText5: TQRDBText;
    QRLabel5: TQRLabel;
    QRDBText6: TQRDBText;
    QRLabel6: TQRLabel;
    QRBand4: TQRBand;
    QRBand5: TQRBand;
    QRSysData1: TQRSysData;
    QRSysData2: TQRSysData;
    QRLabel8: TQRLabel;
    QRShape1: TQRShape;
    QRDBText7: TQRDBText;
    QRLabel9: TQRLabel;
    QRDBText8: TQRDBText;
    QRLabel10: TQRLabel;
    QRDBText9: TQRDBText;
    QRLabel11: TQRLabel;
    QRDBText10: TQRDBText;
    QRLabel12: TQRLabel;
    QRDBText11: TQRDBText;
    QRLabel13: TQRLabel;
    QRDBText12: TQRDBText;
    QRShape2: TQRShape;
    QRDBText13: TQRDBText;
    QRLabel7: TQRLabel;
    QRShape3: TQRShape;

    procedure QRDBText5Print(sender: TObject; var Value: String);
  end;

implementation

end.

unit gd_CalcField;

interface

type
(* Класс для хранения значения переменной и его типа*)
  TValueData = class(TObject)
  private
    FValue: Variant;
    FFieldType: TFieldType;

  public
    property Value: Variant read FValue write FValue;
    property FieldType: TFieldType read FFieldType write FFieldType;
  end;

(* Класс для храненния списка из названия переменных, значений и типа данных*)
  TValueList = class(TStringList)
  private
    function GetValue(Index: Integer): Variant;
    procedure SetValue(Index: Integer; Value: Variant);
    function GetType(Index: Integer): TFieldType;
    procedure SetType(Index: Integer; Value: TFieldType);

  public
    destructor Destroy;

    procedure DeleteValue(Index: Integer);
    procedure AddValue(const Name: String; const Value: Variant;
     const FieldType: TFieldType);
    procedure Assign(Value: TValueList);
    procedure Clear;

    property Values[Index: Integer]: Variant read GetValue write SetValue;
    property FieldType[Index: Integer]: TFieldType read GetType write SetType;
  end;

(* Компонент TboCalcField*)
  TboCalcField = class(TComponent)
  private
    FTableName: String;
    FDataSource: TDataSource;
    FAutoCalc: Boolean;
    FGlobalDate: TDateTime;
    FOldDataChange: TDataChangeEvent;
    FScriptControl: TScriptControl;
    FGlobalVar: TStrings;
    FNameLocalVar: TStrings;
    FNameLocalField: TStrings;
    FReadGlobalVar: Boolean;
    FReadLocalVar: Boolean;
    FDataChanging: Boolean;
    FUserVar: TValueList;

    procedure SetTableName(Value: String);
    procedure SetDataSource(Value: TDataSource);
    procedure InsideDataChange(Sender: TObject; Field: TField);
    procedure SetUserVar(Value: TValueList);
    procedure SetGlobalDate(Value: TDateTime);
    procedure GetGlobalVars(var SL: TStrings);
    procedure GetNameLocalVars;

  protected
    procedure Loaded;
    function CheckConnection: Boolean;
    function AssignedSQL(IBSQL: TIBSQL): Boolean;
    function AssignedQuery(IBQuery: TIBQuery): Boolean;
    function CalculateSingleField(const Formula: String;
     const LocateVar: TStrings): Variant;
    procedure CalcFieldSQL(SQL: TStrings);
    procedure CompliteUserVar(SL: TStrings);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    function CalculateFields: Boolean;
    function GetCalcValues(const PrimaryList: TStrings;
     var ValueList: TValueList): Boolean;

    property GlobalDate: TDateTime read FGlobalDate write SetGlobalDate;
    property UserVar: TValueList read FUserVar write SetUserVar;

  published
    property AutoCalc: Boolean read FAutoCalc write FAutoCalc default False;
    property TableName: String read FTableName write SetTableName;
    property DataSource: TDataSource read FDataSource write SetDataSource;
  end;

implementation

end.

unit gd_cf_dlgAddCalcField_unit;

interface

type
  TdlgAddCalcField = class(TForm)
  private
    procedure ShowVar(const TableKey: Integer);

  public
    btnOk: TButton;
    btnCancel: TButton;
    Label1: TLabel;
    lblComment: TLabel;
    dbeComment: TDBEdit;
    dblcbFieldName: TDBLookupComboBox;
    Label2: TLabel;
    Label3: TLabel;
    btnCompile: TButton;
    ibqryCalcField: TIBQuery;
    ibqryFields: TIBQuery;
    ibudCalcField: TIBUpdateSQL;
    dsCalcField: TDataSource;
    dsFields: TDataSource;
    mmText: TMemo;
    ibqryCalcFieldTABLEKEY: TIntegerField;
    ibqryCalcFieldFIELDNAME: TIBStringField;
    ibqryCalcFieldFORMULA: TBlobField;
    ibqryCalcFieldCALCORDER: TIntegerField;
    ibqryCalcFieldCOMMENT: TIBStringField;
    ibqryCalcFieldRESERVED: TIntegerField;
    ibqryVars: TIBQuery;
    ibqryConstant: TIBQuery;
    lbVars: TListBox;
    ScriptControl: TScriptControl;
    boAccess: TboAccess;

    procedure btnCompileClick(Sender: TObject);
    procedure mmTextChange(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    function NewCalcField(const TableKey: Integer): Boolean;
    function EditCalcField(const TableKey: Integer; const FieldName: String): Boolean;
    function DeleteCalcField(const TableKey: Integer; const FieldName: String): Boolean;
  end;

implementation

end.

unit gd_cf_dlgAddGlobalVar_unit;

interface

type
  TdlgAddGlobalVar = class(TForm)

  public
    dbeComment: TDBEdit;
    lblName: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibudNewGlobalVar: TIBUpdateSQL;
    ibqryNewGlobalVar: TIBQuery;
    dsNewGlobalVar: TDataSource;
    dblcbSubsystem: TDBLookupComboBox;
    lblDate: TLabel;
    Label1: TLabel;
    dsSubsystem: TDataSource;
    ibqrySubsystem: TIBQuery;
    dbeName: TDBEdit;
    ibqryNewGlobalVarID: TIntegerField;
    ibqryNewGlobalVarSUBSYSTEMKEY: TIntegerField;
    ibqryNewGlobalVarNAME: TIBStringField;
    ibqryNewGlobalVarCOMMENT: TIBStringField;
    ibqryNewGlobalVarRESERVED: TIntegerField;
    ibsqlLocalVar: TIBSQL;
    boAccess: TboAccess;

    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    function NewVar(VarKey: Variant): Boolean;
  end;

implementation

end.

unit gd_cf_dlgSetGlobalVar_unit;

interface

type
  TdlgSetGlobalVar = class(TForm)

  public
    dbeValue: TDBEdit;
    lblName: TLabel;
    lblRate: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibudAddGlobalVar: TIBUpdateSQL;
    ibqryAddGlobalVar: TIBQuery;
    dsAddGlobalVar: TDataSource;
    dtpDate: TDateTimePicker;
    dblcbGlobalVars: TDBLookupComboBox;
    lblDate: TLabel;
    ibsqlMaxDate: TIBSQL;
    dtpTime: TDateTimePicker;
    Label1: TLabel;
    dsGlobalVars: TDataSource;
    ibqryGlobalVars: TIBQuery;
    btnAdd: TButton;
    ActionList1: TActionList;
    actAddGlobalVar: TAction;
    boAccess: TboAccess;

    procedure dblcbGlobalVarsCloseUp(Sender: TObject);
    procedure actAddGlobalVarExecute(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    function SetNewValue: Boolean;
  end;

implementation

end.

unit gd_cf_dlgViewCalcField_unit;

interface

type
  TdlgViewCalcField = class(TForm)
  private
    OrderFlag: Boolean;

    procedure ShowTables;
    procedure ShowFields(const TableName: String);
    procedure SaveOrder(const TableKey: Integer);

  public
    btnOk: TButton;
    Panel3: TPanel;
    Panel1: TPanel;
    Panel2: TPanel;
    lvFields: TListView;
    Panel4: TPanel;
    Label1: TLabel;
    lvRef: TListView;
    Panel5: TPanel;
    Label2: TLabel;
    ibqryRef: TIBQuery;
    ibqryFields: TIBQuery;
    ActionList1: TActionList;
    pmField: TPopupMenu;
    actAddCalcField: TAction;
    actEditCalcField: TAction;
    actDelCalcField: TAction;
    act1: TMenuItem;
    actEditCalcField1: TMenuItem;
    actDelCalcField1: TMenuItem;
    ibsqlSetOrder: TIBSQL;

    procedure lvRefChange(Sender: TObject; Item: TListItem;
      Change: TItemChange);
    procedure FormCreate(Sender: TObject);
    procedure actAddCalcFieldExecute(Sender: TObject);
    procedure actEditCalcFieldExecute(Sender: TObject);
    procedure actDelCalcFieldExecute(Sender: TObject);
    procedure actEditCalcFieldUpdate(Sender: TObject);
    procedure actAddCalcFieldUpdate(Sender: TObject);
    procedure lvFieldsDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure lvRefChanging(Sender: TObject; Item: TListItem;
      Change: TItemChange; var AllowChange: Boolean);
    procedure lvFieldsDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure btnOkClick(Sender: TObject);
  end;

implementation

end.

unit gd_cf_dlgViewGlobalVar_unit;

interface

type
  TdlgViewGlobalVar = class(TForm)
  private
    procedure ShowVars;

  public
    dtpMinDate: TDateTimePicker;
    dtpMaxDate: TDateTimePicker;
    lblStart: TLabel;
    lblEnd: TLabel;
    lvVars: TListView;
    btnOk: TButton;
    ibqryVars: TIBQuery;
    btnSet: TButton;
    ActionList: TActionList;
    actSetValue: TAction;

    procedure FormCreate(Sender: TObject);
    procedure actSetValueExecute(Sender: TObject);
    procedure dtpMinDateChange(Sender: TObject);
    procedure dtpMaxDateChange(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  end;

implementation

end.

unit MainForm;

interface

type
  TForm2 = class(TForm)

  public
    Button1: TButton;
    DBGrid1: TDBGrid;
    Button2: TButton;
    boDirectGood: TboDirectGood;
    IBQuery1: TIBQuery;
    DataSource1: TDataSource;
    boCalcField: TboCalcField;
    IBUpdateSQL1: TIBUpdateSQL;
    Button3: TButton;
    Memo1: TMemo;
    Button4: TButton;
    ScriptControl: TScriptControl;
    Button5: TButton;

    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure DataSource1DataChange(Sender: TObject; Field: TField);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
  end;

implementation

end.

unit ct_class;

interface

type
  TctClass = class(TctBase)
  private
    FParent: TctClass;
    FBelongs2Unit: TctUnit;
    FSections: TctClassSections;
    FParentName: String;

    function GetParentName: String;
    procedure SetParentName(const Value: String);
    function GetURL: String;
    function GetSourceURL: String;

  public
    constructor Create(const AName: String; ABelongs2Unit: TctUnit);
    destructor Destroy;

    procedure SaveAsText(S: TStream);
    procedure SaveAsHTML(const ASourceDir, AnOutputDir: String);
    procedure Sort;

    property Parent: TctClass read FParent write FParent;
    property Belongs2Unit: TctUnit read FBelongs2Unit;
    property Sections: TctClasssections read FSections;
    property ParentName: String read GetParentName write SetParentName;
    property URL: String read GetURL;
    property SourceURL: String read GetSourceURL;
  end;

  TctUnit = class(TctBase)
  private
    FClasses: TctClasses;
    FVars: TctVars;
    FRoutines: TctRoutines;
    FFileName: String;
    FConsts: TctConsts;
    FUses: TctUses;

    function GetURL: String;

  public
    constructor Create;
    destructor Destroy;

    procedure SaveAsText(S: TStream);
    procedure SaveAsHTML(const ASourceDir, AnOutputDir: String);
    procedure Sort;

    property Classes: TctClasses read FClasses;
    property Vars: TctVars read FVars;
    property Routines: TctRoutines read FRoutines;
    property Consts: TctConsts read FConsts;
    property SectionUses: TctUses read FUses;
    property URL: String read GetURL;
    property FileName: String read FFileName write FFileName;
  end;

  TctClassSection = class(TctBase)
  private
    FSectionType: TClassSectionType;
    FMethods: TctMethods;
    FFields: TctFields;
    FBelongs2Class: TctClass;

  public
    constructor Create(AType: TClassSectionType; ABelongs2Class: TctClass);
    destructor Destroy;

    procedure SaveAsText(S: TStream);
    procedure Sort;

    property Belongs2Class: TctClass read FBelongs2Class;
    property SectionType: TClassSectionType read FSectionType write FsectionType;
    property Methods: TctMethods read FMethods;
    property Fields: TctFields read FFields;
  end;

  TctBase = class(TObject)
  private
    FComment: String;
    FName: String;
    FDecloration: String;

  public
    procedure Sort;

    property Comment: String read FComment write FComment;
    property Decloration: String read FDecloration write FDecloration;
    property Name: String read FName write FName;
  end;

  TctUses = class(TctBase)
  private
    FBelongs2Unit: TctUnit;

    function GetURL: String;

  public
    constructor Create(ABelongs2Unit: TctUnit);
    procedure Sort;
    procedure SaveAsHTML(const ASourceDir, AnOutputDir: String);

    property URL: String read GetURL;
  end;

  TctConst = class(TctBase)
  end;

  TctConsts = class(TctBase)
  private
    FList: TObjectList;
    FBelongs2Unit: TctUnit;

    function GetCount: Integer;
    function GetItems(Index: Integer): TctConst;
    function GetURL: String;

  public
    constructor Create(ABelongs2Unit: TctUnit);
    destructor Destroy;

    function Add(AConst: TctConst): Integer;
    procedure Sort;
    procedure SaveAsHTML(const ASourceDir, AnOutputDir: String);

    property Items[Index: Integer]: TctConst read GetItems;
    property Count: Integer read GetCount;
    property URL: String read GetURL;
  end;

  TctVar = class(TctBase)
  end;

  TctVars = class(TctBase)
  private
    FList: TObjectList;
    FBelongs2Unit: TctUnit;

    function GetCount: Integer;
    function GetItems(Index: Integer): TctVar;
    function GetURL: String;

  public
    constructor Create(ABelongs2Unit: TctUnit);
    destructor Destroy;

    function Add(AVar: TctVar): Integer;
    procedure Sort;
    procedure CreateVarsFromDecloration(ADecloration: String; const AComment: String);
    procedure SaveAsHTML(const ASourceDir, AnOutputDir: String);

    property Items[Index: Integer]: TctVar read GetItems;
    property Count: Integer read GetCount;
    property URL: String read GetURL;
  end;

  TctRoutine = class(TctBase)
  end;

  TctRoutines = class(TctBase)
  private
    FList: TObjectList;
    FBelongs2Unit: TctUnit;

    function GetCount: Integer;
    function GetItems(Index: Integer): TctRoutine;
    function GetURL: String;

  public
    constructor Create(ABelongs2Unit: TctUnit);
    destructor Destroy;

    function Add(ARoutine: TctRoutine): Integer;
    procedure Sort;
    procedure SaveAsHTML(const ASourceDir, AnOutputDir: String);

    property Items[Index: Integer]: TctRoutine read GetItems;
    property Count: Integer read GetCount;
    property URL: String read GetURL;
  end;

  TctField = class(TctBase)
  private
    FBelongs2Section: TctClassSection;
    FIsProperty: Boolean;

    function GetURL: String;

  public
    constructor Create(ABelongs2Section: TctClassSection; const AName: String = ''; const ADecloration: String = '');
    procedure SaveAsText(S: TStream);

    property Belongs2Section: TctClassSection read FBelongs2Section write FBelongs2Section;
    property IsProperty: Boolean read FIsProperty write FIsProperty;
    property URL: String read GetURL;
  end;

  TctFields = class(TctBase)
  private
    FList: TObjectList;
    FBelongs2ClassSection: TctClassSection;

    function GetItems(Index: Integer): TctField;
    function GetCount: Integer;
    function GetCountOfFields: Integer;
    function GetCountOfProperties: Integer;

  public
    constructor Create(ABelongs2ClassSection: TctClassSection);
    destructor Destroy;

    function Add(AField: TctField): Integer;
    procedure SaveAsText(S: TStream; const ASaveFields: Boolean);
    procedure Sort;

    property Belongs2ClassSection: TctClassSection read FBelongs2ClassSection;
    property Items[Index: Integer]: TctField read GetItems;
    property Count: Integer read GetCount;
    property CountOfFields: Integer read GetCountOfFields;
    property CountOfProperties: Integer read GetCountOfProperties;
  end;

  TctMethod = class(TctBase)
  private
    FBelongs2Section: TctClassSection;

  public
    constructor Create(ABelongs2Section: TctClassSection; const AName: String = ''; const ADecloration: String = '');
    procedure SaveAsText(S: TStream);

    property Belongs2Section: TctClassSection read FBelongs2Section write FBelongs2Section;
  end;

  TctMethods = class(TctBase)
  private
    FList: TObjectList;
    FBelongs2ClassSection: TctClassSection;

    function GetItems(Index: Integer): TctMethod;
    function GetCount: Integer;

  public
    constructor Create(ABelongs2ClassSection: TctClassSection);
    destructor Destroy;

    function Add(AMethod: TctMethod): Integer;
    procedure SaveAsText(S: TStream);
    procedure Sort;

    property Belongs2ClassSection: TctClassSection read FBelongs2ClassSection;
    property Items[Index: Integer]: TctMethod read GetItems;
    property Count: Integer read GetCount;
  end;

  TctClassSections = class(TctBase)
  private
    FBelongs2Class: TctClass;
    FPrivateSection, FProtectedSection, FPublicSection, FPublishedsection: TctClassSection;

    function GetPropertiesURL: String;
    function GetMethodsURL: String;

  public
    constructor Create(ABelongs2Class: TctClass);
    destructor Destroy;

    procedure Add(CS: TctClassSection);
    procedure SaveAsText(S: TStream);
    procedure SaveAsHTML(const ASourceDir, AnOutputDir: String);
    procedure Sort;

    property Belongs2Class: TctClass read FBelongs2Class;
    property PrivateSection: TctClassSection read FPrivateSection write FPrivateSection;
    property ProtectedSection: TctClassSection read FProtectedSection write FProtectedSection;
    property PublicSection: TctClassSection read FPublicSection write FPublicSection;
    property PublishedSection: TctClassSection read FPublishedSection write FPublishedSection;
    property PropertiesURL: String read GetPropertiesURL;
    property MethodsURL: String read GetMethodsURL;
  end;

  TctClasses = class(TctBase)
  private
    FList: TObjectList;
    FBelongs2Unit: TctUnit;

    function GetItems(Index: Integer): TctClass;
    function GetURL: String;
    function GetCount: Integer;

  public
    constructor Create(ABelongs2Unit: TctUnit);
    destructor Destroy;

    function Add(AClass: TctClass): Integer;
    function Find(const AName: String): TctClass;
    procedure SaveAsText(S: TStream);
    procedure SaveAsHTML(const ASourceDir, AnOutputDir: String);
    procedure Sort;

    property Belongs2Unit: TctUnit read FBelongs2Unit;
    property Items[Index: Integer]: TctClass read GetItems;
    property URL: String read GetURL;
    property Count: Integer read GetCount;
  end;

  TctUnits = class(TObject)
  private
    FList: TObjectList;

    function GetCount: Integer;
    function GetItems(Index: Integer): TctUnit;

  public
    constructor Create;
    destructor Destroy;

    procedure SaveAsText(S: TStream);
    procedure SaveAsHtml(const ASourceDir, AnOutputDir: String);
    function Add(AUnit: TctUnit): Integer;
    procedure Sort;

    property Items[Index: Integer]: TctUnit read GetItems;
    property Count: Integer read GetCount;
  end;

implementation

end.

unit ct_input_parser;

interface

type
  TctStack = class(TObject)
  private
    FStack: array of TctTokem;
    FCount: Integer;

    function GetEmpty: Boolean;
    function GetOnTop: TctTokem;

  public
    constructor Create;
    destructor Destroy;

    procedure Put(const ATokem: TctTokem);
    function Get: TctTokem;
    procedure Clear;

    property OnTop: TctTokem read GetOnTop;
    property Count: Integer read FCount;
    property Empty: Boolean read GetEmpty;
  end;

  TctInputParser = class(TObject)
  private
    FTokem: String;
    FStream: TStream;
    FTokemType: TTokemType;
    FStack: TctStack;

    procedure SetStream(const Value: TStream);
    function GetEOF: Boolean;
    function GetLowerTokem: String;

  public
    constructor Create;
    destructor Destroy;

    function GetNext: TTokemType;
    procedure GetNextUntil(const ASymbol: Char);
    procedure GetNextUntil(const ASymbol: Char; const AnOpenPair, AnClosingPair: String);
    procedure GetNextUntilEOL;
    procedure Rollback;
    procedure ClearStack;
    function GetPrev: TctTokem;

    property Stream: TStream read FStream write SetStream;
    property TokemType: TTokemType read FTokemType;
    property Tokem: String read FTokem;
    property LowerTokem: String read GetLowerTokem;
    property EOF: Boolean read GetEOF;
  end;

implementation

end.

unit ct_main_form;

interface

type
  TForm1 = class(TForm)

  public
    Edit: TEdit;
    Button1: TButton;
    xFileList: TxFileList;
    Label1: TLabel;

    procedure Button1Click(Sender: TObject);
  end;

implementation

end.

unit ct_pascal_parser;

interface

type
  TFileAreaStack = class(TObject)
  private
    FStack: array of TFileArea;
    FCount: Integer;

    function GetCount: Integer;
    function GetEmpty: Boolean;
    function GetOnTop: TFileArea;

  public
    constructor Create;
    destructor Destroy;

    procedure Put(const FA: TFileArea);
    function Get: TFileArea;

    property Empty: Boolean read GetEmpty;
    property OnTop: TFileArea read GetOnTop;
    property Count: Integer read GetCount;
  end;

  TctFileParser = class(TObject)
  end;

implementation

end.

unit gd_directories_const;

interface

type
implementation

end.

unit gd_ternaries;

interface

type
implementation

end.

unit gd_todo;

interface

type
implementation

end.

unit gd_createable_form;

interface

type
  TCreateableForm = class()
  end;

  TCreateableFormClass = class(TObject)

  public
    of TCreateableForm;
    TCreateableForm = class(TForm)
  public
    class function CreateAndAssign(AnOwner: TComponent): TForm;
  end;

implementation

end.

unit gsDBGrid;

interface

type
(* ceoMultiline - основная колонка в несколько строк*)
  TCustomgsDBGrid = class()
  end;

  TGridConditions = class()
  end;

  TGridCheckBox = class(TPersistent)
  private
    FDisplayField: String;
    FFieldName: String;
    FVisible: Boolean;
    FCheckList: TStringList;
    FOwner: TCustomgsDBGrid;
    FGlyphChecked: TBitmap;
    FGlyphUnChecked: TBitmap;
    FStoreGlyphChecked, FStoreGlyphUnChecked: Boolean;

    function GetCheckCount: Integer;
    function GetStrCheck(AnIndex: Integer): String;
    function GetIntCheck(AnIndex: Integer): Integer;
    procedure SetDisplayField(const Value: String);
    procedure SetFieldName(const Value: String);
    procedure SetVisible(const Value: Boolean);
    procedure SetCheckList(const Value: TStringList);
    procedure SetGlyphChecked(const Value: TBitmap);
    procedure SetGlyphUnChecked(const Value: TBitmap);
    function GetRecordChecked: Boolean;

  protected
    function GetOwner: TPersistent;
    procedure DoOnChange(Sender: TObject);

  public
    constructor Create(AnOwner: TCustomgsDBgrid);
    destructor Destroy;

    procedure Assign(Source: TPersistent);
    function GetNamePath: string;
    procedure AddCheck(const Value: String);
    procedure AddCheck(const Value: Integer);
    procedure DeleteCheck(const Value: String);
    procedure DeleteCheck(const Value: Integer);
    procedure BeginUpdate;
    procedure EndUpdate;

    property Grid: TCustomgsDBGrid read FOwner;
    property CheckCount: Integer read GetCheckCount;
    property StrCheck[Index: Integer]: String read GetStrCheck;
    property IntCheck[Index: Integer]: Integer read GetIntCheck;
    property RecordChecked: Boolean read GetRecordChecked;

  published
    property DisplayField: String read FDisplayField write SetDisplayField;
    property FieldName: String read FFieldName write SetFieldName;
    property Visible: Boolean read FVisible write SetVisible;
    property CheckList: TStringList read FCheckList write SetCheckList;
    property GlyphChecked: TBitmap read FGlyphChecked write SetGlyphChecked
      stored FStoreGlyphChecked;
    property GlyphUnChecked: TBitmap read FGlyphUnChecked write SetGlyphUnChecked
      stored FStoreGlyphUnChecked;
  end;

(* Класс ответственный за сохранение данных*)
  TgsDBGrid = class(TCustomgsDBGrid)

  public
    property Canvas;
    property SelectedRows;

  published
    property Align;
    property Anchors;
    property BiDiMode;
    property BorderStyle;
    property Columns stored False;
    property Constraints;
    property Ctl3D;
    property DataSource;
    property DefaultDrawing;
    property DragCursor;
    property DragKind;
    property DragMode;
    property Enabled;
    property ImeMode;
    property ImeName;
    property Options;
    property ParentBiDiMode;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ReadOnly;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property Visible;
    property OnCellClick;
    property OnColEnter;
    property OnColExit;
    property OnColumnMoved;
    property OnDrawDataCell;
    property OnDrawColumnCell;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEditButtonClick;
    property OnEndDock;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnStartDock;
    property OnStartDrag;
    property OnTitleClick;
    property TableFont;
    property TableColor;
    property SelectedFont;
    property SelectedColor;
    property TitleFont;
    property TitleColor;
    property Striped;
    property StripeOdd;
    property StripeEven;
    property InternalMenuKind;
    property Expands;
    property ExpandsActive;
    property ExpandsSeparate;
    property Conditions;
    property ConditionsActive;
    property CheckBox;
    property ScaleColumns;
    property MinColWidth;
    property Saver;
  end;

  EgsDBGridException = class(Exception)
  end;

implementation

end.

unit gsDBGridSaver;

interface

type
  TgsDBGridSaver = class(TCustomGridSaver)
  private
    FActive: Boolean;
    FDefaultFileName: TFileName;
    FLocalFileName: TFileName;
    FLocal: Boolean;
    FState: TGridLoadStates;
    FOperationState: TOperationState;
    FDefaults, FSetups: TGridSaveCollection;
    FOnLoadData: TOnGridData;
    FOnSaveData: TOnGridData;

    procedure SetActive(const Value: Boolean);
    procedure SetDefaultFileName(const Value: TFileName);
    procedure SetLocalFileName(const Value: TFileName);

  protected
    function FindGridSave(Grid: TCustomgsDBGrid; Collection: TGridSaveCollection; out Item: TGridSaveItem): Boolean;
    procedure CreateNewGridSave(AGrid: TCustomgsDBGrid; Collection: TGridSaveCollection);
    procedure LoadData(FileName: String; Collection: TGridSaveCollection);
    procedure StoreData(FileName: String; Collection: TGridSaveCollection);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    procedure BeforeDestruction;
    procedure LoadGlobally(Stream: TStream);
    procedure StoreGlobally(Stream: TStream);
    procedure Load(AGrid: TCustomgsDBgrid);
    procedure Save(AGrid: TCustomgsDBgrid);

    property State: TGridLoadStates read FState;
    property LastOperation: TOperationState read FOperationState;

  published
    property Active: Boolean read FActive write SetActive;
    property DefaultFileName: TFileName read FDefaultFileName write SetDefaultFileName;
    property LocalFileName: TFileName read FLocalFileName write SetLocalFileName;
    property Local: Boolean read FLocal write FLocal;
    property OnLoadData: TOnGridData read FOnLoadData write FOnLoadData;
    property OnSaveData: TOnGridData read FOnSaveData write FOnSaveData;
  end;

  TGridSaveCollection = class(TCollection)
  private
    FOwner: TgsDBGridSaver;

    function GetGridSave(AnIndex: Integer): TGridSaveItem;
    procedure SetGridSave(AnIndex: Integer; const Value: TGridSaveItem);

  public
    constructor Create(AnOwner: TgsDBGridSaver);
    destructor Destroy;

    function  Add: TGridSaveItem;

    property Owner: TgsDBGridSaver read FOwner;
    property Items[Index: Integer]: TGridSaveItem read GetGridSave write SetGridSave;
  end;

  TGridSaveItem = class(TCollectionItem)
  private
    FGridName: String;
    FFormName: String;
    FData: TMemoryStream;

    procedure Read(Reader: TReader);
    procedure Write(Writer: TWriter);

  protected
    procedure DefineProperties(Filer: TFiler);
    procedure Initialize(AGrid: TCustomgsDBgrid);
    procedure Store(AGrid: TCustomgsDBgrid);

    property Data: TMemoryStream read FData;

  public
    constructor Create(Collection: TCollection);
    destructor Destroy;

    procedure Assign(Source: TPersistent);

  published
    property GridName: String read FGridName write FGridName;
    property FormName: String read FFormName write FFormName;
  end;

implementation

end.

unit gsDBGrid_dlgColFormat;

interface

type
  TdlgColFormat = class(TForm)
  private
    FField: TField;

    function GetDisplayFormat: String;

  public
    Panel2: TPanel;
    Panel1: TPanel;
    Panel3: TPanel;
    btnCancel: TButton;
    btnOk: TButton;
    btnHelp: TButton;
    sgFormat: TStringGrid;
    Bevel1: TBevel;
    Label1: TLabel;

    constructor Create(AnOwner: TComponent; AField: TField);
    destructor Destroy;

    function ShowModal: Integer;

    property DisplayFormat: String read GetDisplayFormat;
  end;

implementation

end.

unit gsDBGrid_dlgColumnExpand;

interface

type
  TdlgColumnExpand = class(TForm)
  private
    FDataLink: TGridDataLink;
    FExpand: TColumnExpand;
    FEdit: Boolean;
    FField: TField;

  public
    Panel2: TPanel;
    Panel3: TPanel;
    Button1: TButton;
    btnOk: TButton;
    btnHelp: TButton;
    Panel1: TPanel;
    Label1: TLabel;
    lblColumn: TLabel;
    Label3: TLabel;
    cbColumn: TComboBox;
    cbLineCount: TCheckBox;
    editColumnLineCount: TxSpinEdit;
    Bevel1: TBevel;

    procedure cbLineCountClick(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    constructor Create(AnOwner: TComponent; ADataLink: TGridDataLink; AField: TField;
      AnExpand: TColumnExpand; Edit: Boolean);
    destructor Destroy;

    function ShowModal: Integer;
  end;

implementation

end.

unit gsDBGrid_dlgMaster;

interface

type
  TdlgMaster = class(TForm)
  private
    FNewColumns: TDBGridColumns;
    FOldColumns: TDBGridColumns;
    FTitleFont: TFont;
    FTitleColor: TColor;
    FSelectedFont: TFont;
    FSelectedColor: TColor;
    FStripe1, FStripe2: TColor;
    FFontDlg: TFontDialog;
    FColorDlg: TColorDialog;
    FDataLink: TGridDataLink;
    FNewExpands: TColumnExpands;
    FOldExpands: TColumnExpands;
    FNewConditions: TGridConditions;
    FOldConditions: TGridConditions;

    function GetTableFont: TFont;
    function GetTableColor: TColor;
    function GetTitleFont: TFont;
    function GetTitleColor: TColor;
    function GetSelectedFont: TFont;
    function GetSelectedColor: TColor;
    function GetStriped: Boolean;
    function GetStripe1: TColor;
    function GetStripe2: TColor;
    function GetScaleColumns: Boolean;
    function GetExpandsActive: Boolean;
    function GetExpandsSeparate: Boolean;
    function GetConditionsActive: Boolean;
    procedure SetTableFont(const Value: TFont);
    procedure SetTableColor(const Value: TColor);
    procedure SetTitleFont(const Value: TFont);
    procedure SetTitleColor(const Value: TColor);
    procedure SetSelectedFont(const Value: TFont);
    procedure SetSelectedColor(const Value: TColor);
    procedure SetStriped(const Value: Boolean);
    procedure SetStripe1(const Value: TColor);
    procedure SetStripe2(const Value: TColor);
    procedure SetScaleColumns(const Value: Boolean);
    procedure SetExpandsActive(const Value: Boolean);
    procedure SetExpandsSeparate(const Value: Boolean);
    procedure SetConditionsActive(const Value: Boolean);
    function GetCurrColumn: TColumn;
    function GetCurrField: TField;
    function GetCurrCondition: TCondition;
    function GetNewExpands: TColumnExpands;

  protected
    procedure EnableCategory(Category: String; Enable: Boolean);
    procedure EditColumn(AColumn: TColumn);
    procedure PrepareExpands(AColumn: TColumn);
    function FindCurrExpand: TColumnExpand;
    procedure EditCondition(ACondition: TCondition);
    procedure EnableConditions(Enable, All: Boolean);
    procedure UpdateConditionVisibleColumns;
    function ColumnByFieldName(AFieldName: String): TColumn;
    procedure GetSelectedColumns(List: TList);
    function ItemIndexByExpand(AnExpand: TColumnExpand): Integer;
    procedure LoadRegistryOptions;
    procedure SaveRegistryOptions;

    property CurrColumn: TColumn read GetCurrColumn;
    property CurrField: TField read GetCurrField;
    property CurrCondition: TCondition read GetCurrCondition;

  public
    Panel1: TPanel;
    Panel2: TPanel;
    pcOptions: TPageControl;
    tsTable: TTabSheet;
    tsColumn: TTabSheet;
    tsCondition: TTabSheet;
    Panel3: TPanel;
    Button1: TButton;
    btnOk: TButton;
    sgTableExample: TStringGrid;
    btnTableFont: TButton;
    btnTableColor: TButton;
    btnSelectedFont: TButton;
    btnSelectedColor: TButton;
    Label1: TLabel;
    Shape1: TShape;
    Label2: TLabel;
    Shape2: TShape;
    btnTitleFont: TButton;
    btnTitleColor: TButton;
    Label3: TLabel;
    Shape3: TShape;
    GroupBox1: TGroupBox;
    cbStriped: TCheckBox;
    btnStripe2Color: TButton;
    btnStripe1Color: TButton;
    Label4: TLabel;
    Label5: TLabel;
    cbScaleColumns: TCheckBox;
    Label11: TLabel;
    Panel4: TPanel;
    pcColumns: TPageControl;
    TabSheet1: TTabSheet;
    Label8: TLabel;
    Shape4: TShape;
    Label9: TLabel;
    Shape5: TShape;
    btnColumnFont: TButton;
    btnColumnColor: TButton;
    btnColumnTitleFont: TButton;
    btnColumnTitleColor: TButton;
    rgColumnAlign: TRadioGroup;
    rgColumnTitleAlign: TRadioGroup;
    TabSheet5: TTabSheet;
    Panel5: TPanel;
    Label10: TLabel;
    sgColumn: TStringGrid;
    editColumnFormat: TEdit;
    cbColumnFormat: TCheckBox;
    cbColumnLineCount: TCheckBox;
    editColumnLineCount: TxSpinEdit;
    cbColumnExpanded: TCheckBox;
    lbExpandedLines: TListBox;
    btnAddExp: TButton;
    btnDeleteExp: TButton;
    btnUpExp: TButton;
    btnDownExp: TButton;
    Memo1: TMemo;
    Panel6: TPanel;
    pcConditions: TPageControl;
    TabSheet6: TTabSheet;
    Label13: TLabel;
    Label14: TLabel;
    Label16: TLabel;
    lblAnd: TLabel;
    Label19: TLabel;
    editConditionColumn: TComboBox;
    editConditionKind: TComboBox;
    editConditionName: TEdit;
    editConditionText1: TEdit;
    editConditionText2: TEdit;
    cbEvaluateExpression: TCheckBox;
    TabSheet7: TTabSheet;
    Panel8: TPanel;
    lbConditions: TListBox;
    btnConditonAdd: TButton;
    btnConditionDelete: TButton;
    btnConditionUp: TButton;
    btnConditionDown: TButton;
    cbConditionActive: TCheckBox;
    Label20: TLabel;
    btnConditionFont: TButton;
    btnConditionColor: TButton;
    cbConditionFontUse: TCheckBox;
    pnlConditionPreview: TPanel;
    lbConditionColumns: TListBox;
    btnConditionColumns: TButton;
    editColumnTitle: TEdit;
    Label12: TLabel;
    Memo2: TMemo;
    alMaster: TActionList;
    actTableFont: TAction;
    actTableColor: TAction;
    actTitleFont: TAction;
    actTitleColor: TAction;
    actSelectedFont: TAction;
    actSelectedColor: TAction;
    actStriped: TAction;
    actStipe1Color: TAction;
    actStipe2Color: TAction;
    actColumnFont: TAction;
    actColumnColor: TAction;
    actColumnTitleFont: TAction;
    actColumnTitleColor: TAction;
    actColumnFormat: TAction;
    actColumnLineCount: TAction;
    actColumnExpaneded: TAction;
    actColumnAddExp: TAction;
    actColumnDeleteExp: TAction;
    actColumnUpExp: TAction;
    actColumnDownExp: TAction;
    actConditionAdd: TAction;
    actConditionDelete: TAction;
    actConditionUp: TAction;
    actConditionDown: TAction;
    actConditionsActive: TAction;
    actConditionFont: TAction;
    actConditionColor: TAction;
    actConditionFontUse: TAction;
    actConditionColorUse: TAction;
    actConditionColumns: TAction;
    btnHelp: TButton;
    actOk: TAction;
    actCancel: TAction;
    actHelp: TAction;
    cbColumnVisible: TCheckBox;
    actVisible: TAction;
    btnEditExp: TButton;
    actColumnEditExp: TAction;
    lvColumns: TListView;
    cbColumnSeparateExp: TCheckBox;
    actColumnSeparateExp: TAction;
    cbConditionColorUse: TCheckBox;
    actApply: TAction;
    btnApply: TButton;
    btnChooseColumnFormat: TButton;
    actChooseColumnFormat: TAction;

    procedure actOkExecute(Sender: TObject);
    procedure actCancelExecute(Sender: TObject);
    procedure actTableFontExecute(Sender: TObject);
    procedure actTableColorExecute(Sender: TObject);
    procedure actTitleFontExecute(Sender: TObject);
    procedure actTitleColorExecute(Sender: TObject);
    procedure actSelectedFontExecute(Sender: TObject);
    procedure actSelectedColorExecute(Sender: TObject);
    procedure actChooseColumnsExecute(Sender: TObject);
    procedure actStripedExecute(Sender: TObject);
    procedure actStipe1ColorExecute(Sender: TObject);
    procedure actStipe2ColorExecute(Sender: TObject);
    procedure sgTableExampleDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure actColumnFontExecute(Sender: TObject);
    procedure actColumnColorExecute(Sender: TObject);
    procedure actColumnTitleFontExecute(Sender: TObject);
    procedure actColumnTitleColorExecute(Sender: TObject);
    procedure sgColumnDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure actVisibleExecute(Sender: TObject);
    procedure actColumnLineCountExecute(Sender: TObject);
    procedure actColumnExpanededExecute(Sender: TObject);
    procedure editColumnTitleChange(Sender: TObject);
    procedure editColumnFormatExit(Sender: TObject);
    procedure rgColumnAlignClick(Sender: TObject);
    procedure rgColumnTitleAlignClick(Sender: TObject);
    procedure actColumnAddExpExecute(Sender: TObject);
    procedure actColumnDeleteExpExecute(Sender: TObject);
    procedure actColumnUpExpExecute(Sender: TObject);
    procedure actColumnDownExpExecute(Sender: TObject);
    procedure actColumnEditExpExecute(Sender: TObject);
    procedure lbExpandedLinesClick(Sender: TObject);
    procedure editColumnLineCountChange(Sender: TObject);
    procedure lvColumnsSelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
    procedure actColumnSeparateExpExecute(Sender: TObject);
    procedure actConditionsActiveExecute(Sender: TObject);
    procedure lbConditionsClick(Sender: TObject);
    procedure editConditionNameChange(Sender: TObject);
    procedure editConditionColumnClick(Sender: TObject);
    procedure editConditionKindClick(Sender: TObject);
    procedure editConditionText1Change(Sender: TObject);
    procedure editConditionText2Change(Sender: TObject);
    procedure cbEvaluateExpressionClick(Sender: TObject);
    procedure actConditionAddExecute(Sender: TObject);
    procedure actConditionDeleteExecute(Sender: TObject);
    procedure actConditionUpExecute(Sender: TObject);
    procedure actConditionDownExecute(Sender: TObject);
    procedure actConditionFontExecute(Sender: TObject);
    procedure actConditionColorExecute(Sender: TObject);
    procedure actConditionFontUseExecute(Sender: TObject);
    procedure actConditionColorUseExecute(Sender: TObject);
    procedure actConditionColumnsExecute(Sender: TObject);
    procedure actColumnFormatExecute(Sender: TObject);
    procedure actChooseColumnFormatExecute(Sender: TObject);
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    function ShowModal: Integer;
    procedure SetOldColumns(Value: TDBGridColumns);
    procedure SetOldExpands(Value: TColumnExpands);
    procedure SetOldConditions(Value: TGridConditions);

    property NewColumns: TDBGridColumns read FNewColumns;
    property TableFont: TFont read GetTableFont write SetTableFont;
    property TableColor: TColor read GetTableColor write SetTableColor;
    property TitleFont: TFont read GetTitleFont write SetTitleFont;
    property TitleColor: TColor read GetTitleColor write SetTitleColor;
    property SelectedFont: TFont read GetSelectedFont write SetSelectedFont;
    property SelectedColor: TColor read GetSelectedColor write SetSelectedColor;
    property Striped: Boolean read GetStriped write SetStriped;
    property Stripe1: TColor read GetStripe1 write SetStripe1;
    property Stripe2: TColor read GetStripe2 write SetStripe2;
    property ScaleColumns: Boolean read GetScaleColumns write SetScaleColumns;
    property ExpandsActive: Boolean read GetExpandsActive write SetExpandsActive;
    property NewExpands: TColumnExpands read GetNewExpands;
    property ExpandsSeparate: Boolean read GetExpandsSeparate write SetExpandsSeparate;
    property ConditionsActive: Boolean read GetConditionsActive write SetConditionsActive;
    property NewConditions: TGridConditions read FNewConditions;
    property DataLink: TGridDataLink write FDataLink;
  end;

implementation

end.

unit gsDesktopManager;

interface

type
(*
 * Базавы клас, ад якога мы будзем наследваць усе класы
 * якія рэпрзентуюць элементы працоўнага стала.
 *
 *)
  TDesktopItem = class(TObject)
  private
    FOwnerName: String;
    FItemClassName: String;
    FItemName: String;
    FItem: TComponent;

  protected
    procedure ReadFromStream(Reader: TReader);
    procedure WriteToStream(Writer: TWriter);
    procedure LoadDesktopItem(I: TComponent);
    procedure SaveDesktopItem(I: TComponent);

  public
    procedure Assign(I: TDesktopItem);
    function IsItem(const AnOwnerName, AClassName, AName: String): Boolean;

    property OwnerName: String read FOwnerName;
    property ItemClassName: String read FItemClassName;
    property ItemName: String read FItemName;
    property Item: TComponent read FItem;
  end;

(*
 * Клас, які прызначаны каб захоўваць парамэтры формы.
 *
 *)
  TFormData = class(TDesktopItem)
  private
    FHeight: Integer;
    FLeft: Integer;
    FWidth: Integer;
    FTop: Integer;
    FVisible: Boolean;
    FWindowState: TWindowState;

    function GetForm: TForm;
    procedure SetForm(const Value: TForm);

  protected
    procedure ReadFromStream(Reader: TReader);
    procedure WriteToStream(Writer: TWriter);
    procedure LoadDesktopItem(I: TComponent);
    procedure SaveDesktopItem(I: TComponent);

  public
    procedure Assign(I: TDesktopItem);

    property Left: Integer read FLeft;
    property Top: Integer read FTop;
    property Width: Integer read FWidth;
    property Height: Integer read FHeight;
    property Visible: Boolean read FVisible;
    property WindowState: TWindowState read FWindowState;
    property Form: TForm read GetForm write SetForm;
  end;

  TgsDesktopManager = class()
  end;

  TDesktopItems = class(TObject)
  private
    FItems: TList;
    FDesktopManager: TgsDesktopManager;

    function GetItems(Index: Integer): TDesktopItem;
    procedure SetItems(Index: Integer; const Value: TDesktopItem);
    function GetCount: Integer;
    function FindComponent(AnOwner: TComponent; const AClassName, AName: String): TComponent;

  protected
    procedure ReadFromStream(Reader: TReader);
    procedure WriteToStream(Writer: TWriter);

  public
    constructor Create(ADesktopManager: TgsDesktopManager);
    destructor Destroy;

    procedure Add(const DI: TDesktopItem);
    procedure Clear;
    function Find(const AnOwnerName, AClassName, AName: String): TDesktopItem;
    function Find(const Item: TComponent): TDesktopItem;
    procedure SaveDesktopItems;
    procedure LoadDesktopItems;

    property Count: Integer read GetCount;
    property Items[Index: Integer]: TDesktopItem read GetItems write SetItems;
    property DesktopManager: TgsDesktopManager read FDesktopManager;
  end;

implementation

end.

unit gsFormDataSaver;

interface

type
  TgsFormDataSaver = class(TComponent)
  private
    FEnabled: Boolean;
    FOnlyFormData: Boolean;
    FOnChanged: TNotifyEvent;
    OldOnCreate: TNotifyEvent;
    OldOnDestroy: TNotifyEvent;

    procedure DoOnCreate(Sender: TObject);
    procedure DoOnDestroy(Sender: TObject);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;


  published
    property Enabled: Boolean read FEnabled write FEnabled
      default DefEnabled;
    property OnlyFormData: Boolean read FOnlyFormData write FOnlyFormData
      default DefOnlyFormData;
    property OnChanged: TNotifyEvent read FOnChanged write FOnChanged;
  end;

  EFormDataSaverError = class(Exception)
  end;

implementation

end.

unit grid_unit;

interface

type
  TForm1 = class(TForm)

  public
    DataSource1: TDataSource;
    PopupMenu1: TPopupMenu;
    HelloDisign1: TMenuItem;
    Hellobrother1: TMenuItem;
    ActionList1: TActionList;
    Action1: TAction;
    Action2: TAction;
    Action3: TAction;
    dfhdfhh1: TMenuItem;
    N1: TMenuItem;
    dfhrtetyer1: TMenuItem;
    qweqweqwe1: TMenuItem;
    ActionList2: TActionList;
    gsDBGrid1: TgsDBGrid;
    gsDBGridSaver1: TgsDBGridSaver;
    Splitter1: TSplitter;
    DataSource3: TDataSource;
    Table1: TTable;
    Table2: TTable;
    gsDBGrid2: TgsDBGrid;
  end;

implementation

end.

unit Unit1;

interface

type
  TFrame1 = class(TFrame)

  public
    IBTable1: TIBTable;
    gsDBGrid1: TgsDBGrid;
  end;

implementation

end.

unit DirectoryGood;

interface

type
  TTaxList = class(TStringList)

  public
    destructor Destroy;

    procedure AddRecord(Name, Formula, TaxLabel: String; Key: Integer; Rate: Currency);
    function GetRecord(Index: Integer): TTaxData;
  end;

  TGoodData = class(TObject)

  public
    GoodKey: Integer;
    AFull: Integer;
    AChag: Integer;
    AView: Integer;

    constructor Create(AnOwner: TComponent);
    destructor Destroy;

  end;

  TboDirectGood = class(TComponent)
  private
    FDatabase: TIBDatabase;
    FTransaction: TIBTransaction;
    FibqryGood: TIBQuery;
    FibqryTax: TIBQuery;
    FibqryGroup: TIBQuery;

    procedure SetParamDatabase(F: TForm);
    procedure SetNameDatabase(F: TForm);
    procedure SetDatabase(const Value: TIBDatabase);
    procedure SetTransaction(const Value: TIBTransaction);
    function GetActive: Boolean;
    procedure FullRecord(GoodData: TGoodData);
    procedure SetQuery(ibQry: TIBQuery);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    function AddGroup(var GroupData: TGroupData): Boolean;
    function EditGroup(var GroupData: TGroupData): Boolean;
    function DeleteGroup(const GroupKey: Integer): Boolean;
    function AddGood(const GroupData: TGroupData): Boolean;
    function EditGood(const GoodKey: Integer): Boolean;
    function DeleteGood(const GoodKey: Integer): Boolean;
    procedure CompleteGoodSet(SetKey: Integer);
    function FindGood(GoodKey: Integer; var GoodData: TGoodData): Boolean;
    function ConvertValue(GoodKey, ValueKey: Integer; Count: Currency): Currency;

  published
    property DGDatabase: TIBDatabase read FDatabase write SetDatabase;
    property DGTransaction: TIBTransaction read FTransaction write SetTransaction;
  end;

implementation

end.

unit dlgAddGoodGroup_unit;

interface

type
(*type
  PGroupData = ^TGroupData;

  TGroupData = Record
    GroupKey: Integer;
    Parent: Integer;
    RangeCode: Integer;
    FirstField: Integer;
    LastField: Integer;
    AFull: Integer;
    AChag: Integer;
    AView: Integer;
  end;*)
  TdlgAddGoodGroup = class(TForm)

  public
    dbmDescription: TDBMemo;
    dbcbDisabled: TDBCheckBox;
    Label1: TLabel;
    Label2: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    boAccess: TboAccess;
    btnRight: TButton;
    ActionList1: TActionList;
    actSetRigth: TAction;
    ibqryGroup: TIBQuery;
    ibudGroup: TIBUpdateSQL;
    dsGroup: TDataSource;
    ibsqlGroupKey: TIBSQL;
    Label3: TLabel;
    dbeName: TDBEdit;
    dbeAlias: TDBEdit;
    btnHelp: TButton;
    ibtrGroup: TIBTransaction;

    procedure btnOkClick(Sender: TObject);
    procedure actSetRigthExecute(Sender: TObject);
    function AddGroup(var GroupData: TGroupData): Boolean;
    function EditGroup(var GroupData: TGroupData): Boolean;
    function DeleteGroup(const GroupKey: Integer): Boolean;
  end;

implementation

end.

unit dlgAddGood_unit;

interface

type
  TdlgAddGood = class(TForm)
  private
    New: Boolean;
    FGoodKey: Integer;
    FGroupData: TGroupData;

    procedure PrepareNewGood(const GroupData: TGroupData);
    procedure SetParamDatabase(F: TForm);
    procedure SetNameDatabase(F: TForm);
    procedure DoAdditionalJob;

  public
    pcGood: TPageControl;
    tsOption: TTabSheet;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    dbeName: TDBEdit;
    dbmDescription: TDBMemo;
    dbeBarCode: TDBEdit;
    dbeAlias: TDBEdit;
    dblcbValue: TDBLookupComboBox;
    dblcbTNVD: TDBLookupComboBox;
    dbcbSet: TDBCheckBox;
    btnAddValue: TButton;
    btnAddTNVD: TButton;
    cbGoodType: TComboBox;
    Button1: TButton;
    ActionList: TActionList;
    actSetRight: TAction;
    actNew: TAction;
    actAddValue: TAction;
    actAddTNVD: TAction;
    boAccess: TboAccess;
    ibqryGood: TIBQuery;
    ibudGood: TIBUpdateSQL;
    dsGood: TDataSource;
    dsValue: TDataSource;
    ibqryValue: TIBQuery;
    ibqryGoodID: TIBQuery;
    ibqryTNVD: TIBQuery;
    dsTNVD: TDataSource;
    btnCancel: TButton;
    btnOk: TButton;
    btnNew: TButton;
    btnRight: TButton;
    tsAttribute: TTabSheet;
    boInputAttribute: TboInputAttribute;
    tsTax: TTabSheet;
    tsValue: TTabSheet;
    tsPrMetal: TTabSheet;
    tsBarCode: TTabSheet;
    ibqryBarCode: TIBQuery;
    actShowBarCode: TAction;
    actAddBarCode: TAction;
    actEditBarCode: TAction;
    actDelBarCode: TAction;
    actAddPrMetal: TAction;
    actEditPrMetal: TAction;
    actDelPrMetal: TAction;
    actShowPrMetal: TAction;
    Panel1: TPanel;
    lvSelPrMetal: TListView;
    Button6: TButton;
    Button7: TButton;
    Button8: TButton;
    Panel2: TPanel;
    lvSelBarCode: TListView;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    ibqrySelPrMetal: TIBQuery;
    Panel3: TPanel;
    lvSelTax: TListView;
    Button5: TButton;
    Button9: TButton;
    Button10: TButton;
    ibudSelTax: TIBUpdateSQL;
    ibqrySelTax: TIBQuery;
    actAddTax: TAction;
    actEditTax: TAction;
    actDelTax: TAction;
    actShowTax: TAction;
    Panel4: TPanel;
    lvSelValue: TListView;
    Button11: TButton;
    Button12: TButton;
    Button13: TButton;
    actSetValue: TAction;
    actDelValue: TAction;
    actShowValue: TAction;
    actEditValue: TAction;
    ibudSelValue: TIBUpdateSQL;
    ibqrySelValue: TIBQuery;
    Button14: TButton;
    Button15: TButton;
    Button16: TButton;
    Button17: TButton;
    ibtrGood: TIBTransaction;

    procedure btnOkClick(Sender: TObject);
    procedure actViewValueUpdate(Sender: TObject);
    procedure actNewExecute(Sender: TObject);
    procedure actSetRightExecute(Sender: TObject);
    procedure actAddValueExecute(Sender: TObject);
    procedure actAddTNVDExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure actAddBarCodeExecute(Sender: TObject);
    procedure actEditBarCodeExecute(Sender: TObject);
    procedure actDelBarCodeExecute(Sender: TObject);
    procedure actShowBarCodeExecute(Sender: TObject);
    procedure lvSelBarCodeDblClick(Sender: TObject);
    procedure actAddPrMetalExecute(Sender: TObject);
    procedure actEditPrMetalExecute(Sender: TObject);
    procedure actDelPrMetalExecute(Sender: TObject);
    procedure actShowPrMetalExecute(Sender: TObject);
    procedure lvSelPrMetalDblClick(Sender: TObject);
    procedure actAddTaxExecute(Sender: TObject);
    procedure actEditTaxExecute(Sender: TObject);
    procedure actDelTaxExecute(Sender: TObject);
    procedure actShowTaxExecute(Sender: TObject);
    procedure actSetValueExecute(Sender: TObject);
    procedure actEditValueExecute(Sender: TObject);
    procedure actDelValueExecute(Sender: TObject);
    procedure actShowValueExecute(Sender: TObject);
    procedure lvSelTaxDblClick(Sender: TObject);
    procedure lvSelValueDblClick(Sender: TObject);
    function AddGood(const GroupData: TGroupData): Boolean;
    function EditGood(const GoodKey: Integer): Boolean;
    function DeleteGood(const GoodKey: Integer): Boolean;
  end;

implementation

end.

unit dlgAddPrMetal_unit;

interface

type
  TdlgAddPrMetal = class(TForm)

  public
    dbeName: TDBEdit;
    Label1: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibqryPrMetalID: TIBQuery;
    ibudEditPrMetal: TIBUpdateSQL;
    ibqryEditPrMetal: TIBQuery;
    dsPrMetal: TDataSource;
    lblTNVD: TLabel;
    dbmDescription: TDBMemo;
    boAccess: TboAccess;
    ibtrPrMetal: TIBTransaction;

    procedure btnOkClick(Sender: TObject);
    function AddPrMetal(var PrMetalKey: Integer): Boolean;
    function EditPrMetal(const PrMetalKey: Integer): Boolean;
    function DeletePrMetal(const PrMetalKey: Integer): Boolean;
  end;

implementation

end.

unit dlgAddTax_unit;

interface

type
  TdlgAddTax = class(TForm)
  private
    New: Boolean;

  public
    dbeName: TDBEdit;
    dbeShot: TDBEdit;
    dbeRate: TDBEdit;
    Label1: TLabel;
    Label2: TLabel;
    lblRate: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibqryTaxID: TIBQuery;
    ibudEditTax: TIBUpdateSQL;
    ibqryEditTax: TIBQuery;
    dsTax: TDataSource;
    ibtrTax: TIBTransaction;
    TaxKey: Integer;

    procedure FormCreate(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    function DeleteValue: Boolean;
    procedure ActiveDialog;
  end;

implementation

end.

unit dlgAddTNVD_unit;

interface

type
  TdlgAddTNVD = class(TForm)
  private
    New: Boolean;

  public
    btnOk: TButton;
    btnCancel: TButton;
    Label1: TLabel;
    dbeName: TDBEdit;
    ibqryEditTNVD: TIBQuery;
    ibudEditTNVD: TIBUpdateSQL;
    ibqryTnvdID: TIBQuery;
    dsTNVD: TDataSource;
    lblTNVD: TLabel;
    dbmDescription: TDBMemo;
    boAccess: TboAccess;
    ibtrTNVD: TIBTransaction;
    TNVDKey: Integer;

    procedure FormCreate(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    function DeleteValue: Boolean;
    procedure ActiveDialog;
  end;

implementation

end.

unit dlgAddValue_unit;

interface

type
  TdlgAddValue = class(TForm)
  private
    New: Boolean;

  public
    btnOk: TButton;
    btnCancel: TButton;
    Label1: TLabel;
    dbeName: TDBEdit;
    ibqryEditValue: TIBQuery;
    ibudEditValue: TIBUpdateSQL;
    ibqryValueID: TIBQuery;
    dsValue: TDataSource;
    ibtrValue: TIBTransaction;
    ValueKey: Integer;

    procedure FormCreate(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    function DeleteValue: Boolean;
    procedure ActiveDialog;
  end;

implementation

end.

unit dlgCompleteGoodSet_unit;

interface

type
  TdlgCompleteGoodSet = class(TForm)

  public
    btnOk: TButton;
    Label1: TLabel;
    lblName: TLabel;
    PopupMenu1: TPopupMenu;
    ActionList1: TActionList;
    actAddItem: TAction;
    actEditItem: TAction;
    actDelItem: TAction;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    lvGoodSet: TListView;
    ibqryGoodSet: TIBQuery;
    ibudGoodSet: TIBUpdateSQL;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    dsGoodSet: TDataSource;
    boAccess: TboAccess;
    ibsqlSetName: TIBSQL;
    SetKey: Integer;

    procedure actAddItemExecute(Sender: TObject);
    procedure actEditItemExecute(Sender: TObject);
    procedure actDelItemExecute(Sender: TObject);
    procedure lvGoodSetDblClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    function ActiveDialog: Boolean;
  end;

implementation

end.

unit dlgEditCountSet_unit;

interface

type
  TdlgEditCountSet = class(TForm)

  public
    Label1: TLabel;
    Label3: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    dbeCount: TDBEdit;
    ibqrySetCount: TIBQuery;
    ibudSetCount: TIBUpdateSQL;
    dsSetCount: TDataSource;
    lblName: TLabel;
    Name: String;
    SetKey: Integer;
    GoodKey: Integer;

    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure ActiveDialog;
    function Delete: Boolean;
  end;

implementation

end.

unit dlgIncludeGood_unit;

interface

type
  TdlgIncludeGood = class(TForm)
  private
    FGoodParent: Integer;
    EndPoint: Integer;

  public
    pnlView: TPanel;
    Splitter1: TSplitter;
    ActionList1: TActionList;
    actGoodSet: TAction;
    pmGood: TPopupMenu;
    actGoodSet1: TMenuItem;
    Panel1: TPanel;
    Panel2: TPanel;
    tvGoodGroup: TTreeView;
    lvGood: TListView;
    ibqryGroupNULL: TIBQuery;
    ibqryGood: TIBQuery;
    ibqryGroupParent: TIBQuery;
    actShowGroup: TAction;
    actShowGood: TAction;
    pnlButton: TPanel;
    btnOk: TButton;
    btnCancel: TButton;
    Button1: TButton;
    actSelect: TAction;
    actInvert: TAction;
    actSelectAll: TAction;
    actClear: TAction;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    boAccess: TboAccess;
    ilGoodGroup: TImageList;
    slGoodList: TStringList;
    SetKey: Integer;

    procedure FormCreate(Sender: TObject);
    procedure actGoodSetExecute(Sender: TObject);
    procedure actShowGroupExecute(Sender: TObject);
    procedure actShowGoodExecute(Sender: TObject);
    procedure tvGoodGroupExpanding(Sender: TObject; Node: TTreeNode;
      var AllowExpansion: Boolean);
    procedure tvGoodGroupChanging(Sender: TObject; Node: TTreeNode;
      var AllowChange: Boolean);
    procedure actGoodSetUpdate(Sender: TObject);
    procedure tvGoodGroupKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormDestroy(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure actSelectExecute(Sender: TObject);
    procedure actSelectAllExecute(Sender: TObject);
    procedure actClearExecute(Sender: TObject);
    procedure actInvertExecute(Sender: TObject);
    procedure SetGood;
    function CheckValue(StartP, EndP, Value: Integer): Integer;
    procedure ActiveDialog;
  end;

implementation

end.

unit dlgSelectPrMetal_unit;

interface

type
  TdlgSelectPrMetal = class(TForm)
  private
    FGoodKey: Integer;

    procedure SetNameDatabase(F: TForm);

  public
    Panel2: TPanel;
    btnOk: TButton;
    btnCancel: TButton;
    Panel1: TPanel;
    lvPrMetal: TListView;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    ActionList1: TActionList;
    actAddPrMetal: TAction;
    actEditPrMetal: TAction;
    actDelPrMetal: TAction;
    Button4: TButton;
    actShowPrMetal: TAction;
    ibqryPrMetal: TIBQuery;
    actSelect: TAction;
    boAccess: TboAccess;
    ibdsGoodPrMetal: TIBDataSet;

    procedure actAddPrMetalExecute(Sender: TObject);
    procedure actEditPrMetalExecute(Sender: TObject);
    procedure actDelPrMetalExecute(Sender: TObject);
    procedure actShowPrMetalExecute(Sender: TObject);
    procedure actSelectExecute(Sender: TObject);
    procedure lvPrMetalDblClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    function SelectPrMetal(const GoodKey: Integer): Boolean;
    function DeletePrMetal(const GoodKey, PrMetalKey: Integer): Boolean;
  end;

implementation

end.

unit dlgSelectTax_unit;

interface

type
  TdlgSelectTax = class(TForm)
  private
    procedure SetNameDatabase(F: TForm);

  public
    Panel2: TPanel;
    btnOk: TButton;
    btnCancel: TButton;
    Panel1: TPanel;
    lvTax: TListView;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    ActionList1: TActionList;
    actAddTax: TAction;
    actEditTax: TAction;
    actDelTax: TAction;
    Button4: TButton;
    actShowTax: TAction;
    ibudTax: TIBUpdateSQL;
    ibqryTax: TIBQuery;
    actSelect: TAction;
    boAccess: TboAccess;
    GoodKey: Integer;

    procedure actAddTaxExecute(Sender: TObject);
    procedure actEditTaxExecute(Sender: TObject);
    procedure actDelTaxExecute(Sender: TObject);
    procedure actShowTaxExecute(Sender: TObject);
    procedure actSelectExecute(Sender: TObject);
    procedure lvTaxDblClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ActiveDialog;
  end;

implementation

end.

unit dlgSelectValue_unit;

interface

type
  TdlgSelectValue = class(TForm)
  private
    procedure SetNameDatabase(F: TForm);

  public
    Panel1: TPanel;
    Panel2: TPanel;
    lvValue: TListView;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    ActionList1: TActionList;
    actAddValue: TAction;
    actEditValue: TAction;
    actDelValue: TAction;
    btnOk: TButton;
    btnCancel: TButton;
    Button4: TButton;
    ibqryValue: TIBQuery;
    ibudValue: TIBUpdateSQL;
    actShowValue: TAction;
    dsValue: TDataSource;
    actSelect: TAction;
    boAccess: TboAccess;
    FGoodKey: Integer;
    FValueKey: Integer;

    procedure actAddValueExecute(Sender: TObject);
    procedure actEditValueExecute(Sender: TObject);
    procedure actDelValueExecute(Sender: TObject);
    procedure actShowValueExecute(Sender: TObject);
    procedure actSelectExecute(Sender: TObject);
    procedure lvValueDblClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ActiveDialog;
  end;

implementation

end.

unit dlgSetParamBarCode_unit;

interface

type
  TdlgSetParamBarCode = class(TForm)

  public
    btnOk: TButton;
    btnCancel: TButton;
    ibudBarCode: TIBUpdateSQL;
    ibqryBarCode: TIBQuery;
    dsBarCode: TDataSource;
    Label1: TLabel;
    lblTNVD: TLabel;
    dbeName: TDBEdit;
    dbmDescription: TDBMemo;
    ibqryBarCodeID: TIBQuery;
    boAccess: TboAccess;

    procedure btnOkClick(Sender: TObject);
    function AddBarCode(const GoodKey: Integer): Boolean;
    function EditBarCode(const Key: Integer): Boolean;
    function DeleteBarCode(const Key: Integer): Boolean;
  end;

implementation

end.

unit dlgSetParamPrMetal_unit;

interface

type
  TdlgSetParamPrMetal = class(TForm)

  public
    dbeName: TDBEdit;
    dbeQuantity: TDBEdit;
    Label1: TLabel;
    lblRate: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibudEditGoodPrMetal: TIBUpdateSQL;
    ibqryEditGoodPrMetal: TIBQuery;
    dsGoodPrMetal: TDataSource;
    boAccess: TboAccess;

    procedure btnOkClick(Sender: TObject);
    function SetParams(const GoodKey, PrMetalKey: Integer): Boolean;
  end;

implementation

end.

unit dlgSetParamTax_unit;

interface

type
  TdlgSetParamTax = class(TForm)

  public
    dbeName: TDBEdit;
    dbeRate: TDBEdit;
    Label1: TLabel;
    lblRate: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibudEditGoodTax: TIBUpdateSQL;
    ibqryEditGoodTax: TIBQuery;
    dsGoodTax: TDataSource;
    Label3: TLabel;
    dtpDate: TDateTimePicker;
    TaxKey: Integer;
    GoodKey: Integer;
    DateTax: TDate;

    procedure FormCreate(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure ActiveDialog;
  end;

implementation

end.

unit dlgSetParamValue_unit;

interface

type
  TdlgSetParamValue = class(TForm)

  public
    Label1: TLabel;
    lblBaseValue: TLabel;
    dbeScale: TDBEdit;
    dbeDiscount: TDBEdit;
    Label2: TLabel;
    Label3: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibqryEditGoodValue: TIBQuery;
    ibudEditGoodValue: TIBUpdateSQL;
    dsEditGoodValue: TDataSource;
    Label4: TLabel;
    dbeDecDigit: TDBEdit;
    GoodKey: Integer;
    ValueKey: Integer;

    procedure btnOkClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ActiveDialog;
  end;

implementation

end.

unit GroupType_unit;

interface

type
implementation

end.

unit MainGood_unit;

interface

type
  TMainGood = class(TForm)
  private
    RGroupAdd, RGroupEdit, RGroupDel: Integer;
    RGoodAdd, RGoodEdit, RGoodDel: Integer;
    FFiltering: Boolean;

  public
    pnlView: TPanel;
    Splitter1: TSplitter;
    ActionList1: TActionList;
    actAddGroup: TAction;
    actEditGroup: TAction;
    actDelGroup: TAction;
    actAddGood: TAction;
    actEditGood: TAction;
    actDelGood: TAction;
    actViewTax: TAction;
    MainMenu1: TMainMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    N4: TMenuItem;
    N5: TMenuItem;
    N6: TMenuItem;
    N7: TMenuItem;
    N8: TMenuItem;
    N9: TMenuItem;
    N10: TMenuItem;
    actGoodSet: TAction;
    pmGood: TPopupMenu;
    actGoodSet1: TMenuItem;
    Panel1: TPanel;
    Panel2: TPanel;
    tvGoodGroup: TTreeView;
    N11: TMenuItem;
    ibqryGroupNULL: TIBQuery;
    ibqryGood: TIBQuery;
    ibqryGroupParent: TIBQuery;
    actShowGroup: TAction;
    ilGoodGroup: TImageList;
    actAddSubGroup: TAction;
    N12: TMenuItem;
    actChangeGoodRights: TAction;
    actChangeGroupRights: TAction;
    boAccess: TboAccess;
    N13: TMenuItem;
    N14: TMenuItem;
    N15: TMenuItem;
    N16: TMenuItem;
    N17: TMenuItem;
    ibqrySetGoodRights: TIBQuery;
    dbgGood: TDBGrid;
    dsGood: TDataSource;
    ibudGood: TIBUpdateSQL;
    ilToolBar: TImageList;
    ilHotImages: TImageList;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    tbNew: TToolButton;
    tbEdit: TToolButton;
    tbDelete: TToolButton;
    tmrHold: TTimer;
    pmAdd: TPopupMenu;
    N18: TMenuItem;
    N19: TMenuItem;
    N20: TMenuItem;
    pmEdit: TPopupMenu;
    pmDelete: TPopupMenu;
    N21: TMenuItem;
    N22: TMenuItem;
    N23: TMenuItem;
    N24: TMenuItem;
    ToolButton3: TToolButton;
    tbGoodSet: TToolButton;
    pmGroup: TPopupMenu;
    N25: TMenuItem;
    N26: TMenuItem;
    N27: TMenuItem;
    N28: TMenuItem;
    ImageList1: TImageList;
    DirectGood1: TboDirectGood;
    tbFilter: TToolButton;
    boSavedFilter: TboSavedFilter;
    boQueryFilter: TboQueryFilter;
    boDialogFilter: TboDialogFilter;
    pmFilter: TPopupMenu;

    procedure FormCreate(Sender: TObject);
    procedure actAddGroupExecute(Sender: TObject);
    procedure actEditGroupExecute(Sender: TObject);
    procedure actDelGroupExecute(Sender: TObject);
    procedure actAddGoodExecute(Sender: TObject);
    procedure actEditGoodExecute(Sender: TObject);
    procedure actDelGoodExecute(Sender: TObject);
    procedure actViewTaxExecute(Sender: TObject);
    procedure actGoodSetExecute(Sender: TObject);
    procedure actShowGroupExecute(Sender: TObject);
    procedure ShowGood(GroupKey: Integer);
    procedure tvGoodGroupExpanding(Sender: TObject; Node: TTreeNode;
      var AllowExpansion: Boolean);
    procedure tvGoodGroupChanging(Sender: TObject; Node: TTreeNode;
      var AllowChange: Boolean);
    procedure actAddSubGroupExecute(Sender: TObject);
    procedure actDelGroupUpdate(Sender: TObject);
    procedure actGoodSetUpdate(Sender: TObject);
    procedure lvGoodDblClick(Sender: TObject);
    procedure lvGoodKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure tvGoodGroupKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure actChangeGoodRightsExecute(Sender: TObject);
    procedure actEditGroupUpdate(Sender: TObject);
    procedure actEditGoodUpdate(Sender: TObject);
    procedure actDelGoodUpdate(Sender: TObject);
    procedure dbgGoodDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure tmrHoldTimer(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure ibqryGoodAfterOpen(DataSet: TDataSet);
    procedure boSavedFilterChange(Sender: TObject; Change: Boolean);
    procedure boSavedFilterFiltred(Sender: TObject; Change: Boolean);
  end;

implementation

end.

unit boSavedFilter;

interface

type
(* Класс в который объединят общий класс TFilterData и параметры пользователя*)
  TFilter = class(TObject)

  public
    FilterData: TFilterData;
    Params: TStringList;
    Values: TStringList;

    constructor Create;
    destructor Destroy;

    procedure SetValue(const AParam, AValue: String);
    function GetValue(const AParam: String): String;
    procedure Assign(AFilter: TFilter);
  end;

implementation

end.

unit dlgFilterBody_unit;

interface

type
  TdlgFilterBody = class(TForm)
  private
    FieldList: TStringList;
    FilterList: TObjectList;
    OrderList: TList;
    DeltaHeight: Integer;
    SizeScreenX: Integer;
    SizeScreenY: Integer;

    procedure FillComboFields(var cbFields: TStringList);
    function ConvertDataType(InterbaseType: Integer): Integer;
    function GetCondition(const I: Integer; var ConditionData: TConditionData): Boolean;
    procedure SetCondition(const I: Integer; const ConditionData: TConditionData);
    procedure SetOrderLine(const I: Integer; const AnOrderLine: TOrderLine);
    function GetOrderLine(const I: Integer; const AnOrderLine: TOrderLine): boolean;
    procedure CompIB;
    procedure OpenQuerys;
    function CheckVisible(FieldName: String): Boolean;
    procedure DeleteOrderLine;
    procedure DeleteFilterLine;

  public
    ActionList1: TActionList;
    actAddLine: TAction;
    actDeleteLine: TAction;
    ibqrySelectFields: TIBQuery;
    ibqryExtSelFields: TIBQuery;
    ibqrySelectSet: TIBQuery;
    ibqryExtSelectSet: TIBQuery;
    ibqryTableName: TIBQuery;
    ibqryAttrRef: TIBQuery;
    ibqrySelectFields_2: TIBQuery;
    ibqryPrimaryKey: TIBQuery;
    pcOrderFilter: TPageControl;
    tsFilter: TTabSheet;
    tsOrder: TTabSheet;
    pnlButton: TPanel;
    btnCancel: TButton;
    btnOk: TButton;
    Button3: TButton;
    Button1: TButton;
    btnSaveFilter: TButton;
    ibqryIndexedFields: TIBQuery;
    From : TStringList;
    IndexFieldList: TStringList;
    Database: TIBDatabase;
    Transaction: TIBTransaction;
    TableName: String;
    PrimaryName: String;
    MainTable: String;
    NoVisibleList: TStringList;
    SaveFilter: TSaveFilter;
    UserFields: TStringList;

    procedure FormCreate(Sender: TObject);
    procedure actAddLineExecute(Sender: TObject);
    procedure AddFilterLine;
    procedure AddOrderLine;
    procedure FormDestroy(Sender: TObject);
    procedure actDeleteLineExecute(Sender: TObject);
    procedure actDeleteLineUpdate(Sender: TObject);
    procedure actAddLineUpdate(Sender: TObject);
    function DataType(DataSet: TDataSet): Integer;
    procedure btnSaveFilterClick(Sender: TObject);
    function Filtering(var FilterData: TFilterData): Boolean;
    procedure DeleteOrdersAfter(const AnOrderLine: TfrOrderLine);
    procedure FillIndexedFields(var AFields: TStringList);
  end;

implementation

end.

unit dlgFilterList_unit;

interface

type
  TdlgFilterList = class(TForm)

  public
    lvFilter: TListView;
    btnOK: TButton;
    Button1: TButton;
    Button2: TButton;
    alFilter: TActionList;
    acDelete: TAction;
    acEdit: TAction;
    qryFilter: TIBQuery;
    boAccess: TboAccess;
    qryUpdate: TIBQuery;
    FormName, CompName: String;
    FEditFilter, FDeleteFilter: Integer;

    procedure acEditUpdate(Sender: TObject);
    procedure acDeleteUpdate(Sender: TObject);
    procedure acEditExecute(Sender: TObject);
    procedure acDeleteExecute(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure ShowFilter;
  end;

implementation

end.

unit dlgFilter_unit;

interface

type
  TdlgFilter = class(TForm)

  public
    mmQueryText: TMemo;
    lblQueryText: TLabel;
    lblParams: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    pnlAddText: TPanel;
    edAddText: TEdit;
    btnAdd: TButton;
    rbtnAND: TRadioButton;
    rbtnOR: TRadioButton;
    sgParams: TStringGrid;
    IBQuery1: TIBQuery;
    Label1: TLabel;
    mmSubQueryText: TMemo;

    procedure FormCreate(Sender: TObject);
    procedure sgParamsDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure btnAddClick(Sender: TObject);
    procedure sgParamsClick(Sender: TObject);
  end;

implementation

end.

unit dlgSavedFilter_unit;

interface

type
  TdlgSavedFilter = class(TForm)

  public
    Label1: TLabel;
    Label2: TLabel;
    eName: TEdit;
    eDescription: TEdit;
    btnAccess: TButton;
    btnOk: TButton;
    btnCancel: TButton;
    cbForMe: TCheckBox;
    boAccess: TboAccess;
    ActionList1: TActionList;
    aRights: TAction;
    aview, afull, achag: Integer;

    procedure FormCreate(Sender: TObject);
    procedure aRightsExecute(Sender: TObject);
    procedure aRightsUpdate(Sender: TObject);
  end;

implementation

end.

unit dlgSelectFSet_unit;

interface

type
  TdlgSelectFSet = class(TForm)
  private
    procedure ShowAttrSet;
    procedure ShowFind(Qry: Boolean);
    procedure ShowTargetList(SL: TStrings);
    function CheckValue(StartP, EndP, Value: Integer): Integer;

  public
    Panel1: TPanel;
    Label1: TLabel;
    edName: TEdit;
    Button1: TButton;
    Button2: TButton;
    Panel2: TPanel;
    ListView1: TListView;
    lvAttrSet: TListView;
    ibqrySelectAttrSet: TIBQuery;
    PopupMenu1: TPopupMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    ActionList1: TActionList;
    Panel4: TPanel;
    lItemsCount: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibqryFind: TIBQuery;
    actFind: TAction;
    cbCondition: TComboBox;
    Label2: TLabel;
    lvTarget: TListView;
    Button6: TButton;
    actTo: TAction;
    actFrom: TAction;
    Button7: TButton;
    TableName: String;
    FieldName: String;
    PrimaryName: String;

    procedure Button2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure actFindExecute(Sender: TObject);
    procedure actFindUpdate(Sender: TObject);
    procedure edNameKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure actToExecute(Sender: TObject);
    procedure lvTargetCompare(Sender: TObject; Item1, Item2: TListItem;
      Data: Integer; var Compare: Integer);
    procedure actFromExecute(Sender: TObject);
    procedure lvAttrSetDblClick(Sender: TObject);
    procedure lvTargetDblClick(Sender: TObject);
    function GetElements(var SetList: TStrings): Boolean;
  end;

implementation

end.

unit dlgSelectF_unit;

interface

type
  TdlgSelectF = class(TForm)
  private
    OkEn: Boolean;

    procedure ShowAttrSet;
    procedure ShowFind(Qry: Boolean);

  public
    Panel1: TPanel;
    Label1: TLabel;
    edName: TEdit;
    Button1: TButton;
    Button2: TButton;
    Panel2: TPanel;
    Image1: TImage;
    ListView1: TListView;
    lvAttrSet: TListView;
    ibqrySelectAttrSet: TIBQuery;
    PopupMenu1: TPopupMenu;
    ActionList1: TActionList;
    Panel4: TPanel;
    lItemsCount: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibqryFind: TIBQuery;
    actFind: TAction;
    cbCondition: TComboBox;
    Label2: TLabel;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    TableName: String;
    FieldName: String;
    PrimaryName: String;

    procedure Button2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnSelectClick(Sender: TObject);
    procedure actFindExecute(Sender: TObject);
    procedure actFindUpdate(Sender: TObject);
    procedure edNameKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure lvAttrSetDblClick(Sender: TObject);
    function GetElement(const NameOfTable, NameOfField,
     NameOfPrimary: String; var SetName: String): Integer;
  end;

implementation

end.

unit dlgSetFieldCondition_unit;

interface

type
  TdlgSetFieldCondition = class(TForm)
  private
    FFieldType: Integer;

  public
    btnOk: TButton;
    btnCancel: TButton;
    edCondition: TEdit;
    cbCondition: TComboBox;
    Label1: TLabel;
    Button1: TButton;
    lblName: TLabel;

    procedure SetFieldType(Value: Integer);
    procedure btnOkClick(Sender: TObject);

    property FieldType: Integer read FFieldType write SetFieldType;
  end;

implementation

end.

unit frFilterLine_unit;

interface

type
  TfrFilterLine = class(TFrame)

  public
    pnlFilter: TPanel;
    cbFields: TComboBox;
    cbCondition: TComboBox;
    Label1: TLabel;
    Label2: TLabel;
    pcEdits: TPageControl;
    tsOnes: TTabSheet;
    tsTwise: TTabSheet;
    tsCombo: TTabSheet;
    tsEmpty: TTabSheet;
    edCondition: TEdit;
    edFrom: TEdit;
    edTo: TEdit;
    Label3: TLabel;
    Label4: TLabel;
    tsElementSet: TTabSheet;
    tsFilter: TTabSheet;
    cbFilter: TComboBox;
    gscbElementSet: TgsComboBoxAttr;
    gsComboBoxAttrSet: TgsComboBoxAttrSet;
    TblName: String[40];
    FilterData: TFilterData;
    IBDatabase: TIBDatabase;
    IBTransaction: TIBTransaction;
    NoVisible: TStringList;

    procedure cbFieldsChange(Sender: TObject);
    procedure cbFieldsExit(Sender: TObject);
    procedure cbConditionChange(Sender: TObject);
    procedure cbConditionExit(Sender: TObject);
    procedure cbFilterDropDown(Sender: TObject);
    procedure edConditionExit(Sender: TObject);
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    function CheckTypeValue: Boolean;
  end;

implementation

end.

unit frOrderLine_unit;

interface

type
  TfrOrderLine = class(TFrame)

  public
    pnlOrder: TPanel;
    cbFields: TComboBox;
    Label1: TLabel;
    chbOnlyIndexed: TCheckBox;
    rgOrderType: TRadioGroup;
    ParentForm: TForm;

    procedure cbFieldsExit(Sender: TObject);
    procedure cbFieldsChange(Sender: TObject);
    procedure chbOnlyIndexedClick(Sender: TObject);
  end;

implementation

end.

unit gd_filter;

interface

type
(* задавать условия фильтрации*)
  TboDialogFilter = class(TComponent)
  private
    FBase: TIBBase;
    FOnSaved: TSaveFilter;
    FNoVisible: TStringList;
    FTableName: String;
    FUserFields: TStringList;
    FFrom: TStringList;

    function GetDatabase: TIBDatabase;
    function GetTransaction: TIBTransaction;
    procedure SetDatabase(Value: TIBDatabase);
    procedure SetTransaction(Value: TIBTransaction);
    procedure SetNoVisible(Value: TStringList);
    procedure SetFrom(Value: TStringList);
    procedure SaveFilterData(FilterData: TFilterData);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    function MakeFilter(var FilterData: TFilterData): Boolean;

    property UserFields: TStringList read FUserFields;
    property OnSaved: TSaveFilter read FOnSaved write FOnSaved;

  published
    property TableName: String read FTableName write FTableName;
    property Database: TIBDatabase read GetDatabase write SetDatabase;
    property Transaction: TIBTransaction read GetTransaction
                                          write SetTransaction;
    property NoVisible: TStringList read FNoVisible write SetNoVisible;
    property From: TStringList read FFrom write SetFrom;
  end;

(* полученным от boDialogFilter в формате TFilterData*)
  TboQueryFilter = class(TComponent)
  private
    FIBQuery: TIBQuery;
    FSelectText: TStringList;
    FFromText: TStringList;
    FWhereText: TStringList;
    FOrderText: TStringList;
    FViewAttr: Boolean;
    FTableList: TStringList;
    FPrefixList: TStringList;
    FQueryText: TStringList;
    FUserFields: TStringList;

    procedure SetQuery(Value: TIBQuery);
    procedure SetSelectText(Value: TStringList);
    procedure SetFromText(Value: TStringList);
    procedure SetWhereText(Value: TStringList);
    procedure SetOrderText(Value: TStringList);
    procedure SetUserFields(Value: TStringList);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    function CreateSQL(FilterData: TFilterData): Boolean;

    property QueryText: TStringList read FQueryText;
    property UserFields: TStringList read FUserFields write SetUserFields;

  published
    property IBQuery: TIBQuery read FIBQuery write SetQuery;
    property SelectText: TStringList read FSelectText write SetSelectText;
    property FromText: TStringList read FFromText write SetFromText;
    property WhereText: TStringList read FWhereText write SetWhereText;
    property OrderText: TStringList read FOrderText write SetOrderText;
    property ViewAttr: Boolean read FViewAttr write FViewAttr;
  end;

implementation

end.

unit gd_filter_condition_type;

interface

type
(* Список условий*)
  TConditionList = class(TList)
  private
    function GetCondition(AnIndex: Integer): TConditionData;

  public
    destructor Destroy;

    procedure Clear;
    procedure Assign(Source: TConditionList);
    function AddCondition(AConditionData: TConditionData): Integer;
    function AddCondition(const AFieldName: TRelationName; const AValue1, AValue2: String;
      const AFieldType: TFilterFieldType; const AConditionType: TFilterConditionType): Integer;
    procedure DeleteCondition(const AnIndex: Integer);

    property Conditions[AnIndex: Integer]: TConditionData read GetCondition;
  end;

(* Запись условия*)
  TConditionData = class(TObject)

  public
    FieldName: TRelationName;
    FieldType: TFilterFieldType;
    ConditionType: TFilterConditionType;
    Value1: TRelationName;
    Value2: TRelationName;
    RefTable: TRelationName;
    RefField: TRelationName;
    NetTable: TRelationName;
    NetFieldSource: TRelationName;
    NetFieldTarget: TRelationName;
    NetFieldTargetType: TFilterFieldType;
    Filter: TConditionList;
    ValueList: TStrings;
    RusFieldName: TRelationName;

    constructor Create;
    destructor Destroy;

    procedure Assign(Source: TConditionData);
  end;

  TOrderLine = class(TObject)

  public
    FieldName: TRelationName;
    TableAlias: TRelationName;
    DisplayName: TRelationName;
    SortOrder: Integer;
    OnlyIndexed: Boolean;

    procedure Assign(Source: TOrderLine);
  end;

(* Данные о сортировоки*)
  TSortData = class(TList)
  private
    function GetOrder(AnIndex: Integer): TOrderLine;

  public
    destructor Destroy;

    procedure Assign(Source: TSortData);
    function AddOrder(AnOrderLine: TOrderLine): Integer;
    function AddOrder(const AFieldName,  ATableAlias, ADisplayName: TRelationName;
                      const ASortOrder: Integer; const AOnlyIndexed: Boolean): Integer;
    procedure DeleteOrder(const AnIndex: Integer);

    property Orders[AnIndex: Integer]: TOrderLine read GetOrder;
  end;

(* Тип данных для фильтра*)
  TFilterData = class(TObject)
  private
    function GetFilterText: String;
    function GetOrderText: String;

  public
    TableName: String;
    ConditionList: TConditionList;
    SortData: TSortData;

    constructor Create;
    destructor Destroy;

    procedure Assign(Value: TFilterData);

    property FilterText: String read GetFilterText;
    property OrderText: String read GetOrderText;
  end;

implementation

end.

unit gsFontMemo;

interface

type
  TgsFontMemo = class(TMemo)
  private
    FOnPaint: TNotifyEvent;
    FOnDrawItem: TDrawItemEvent;

    procedure KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;


  published
    property OnDrawItem: TDrawItemEvent read FOnDrawItem write FOnDrawItem;
    property OnPaint: TNotifyEvent read FOnPaint write FOnPaint;
  end;

implementation

end.

unit MainForm_unit;

interface

type
  TMainForm = class(TForm)
  private
    FilterData: TFilterData;

  public
    Button1: TButton;
    Button2: TButton;
    IBQuery1: TIBQuery;
    DataSource1: TDataSource;
    DBGrid1: TDBGrid;
    boDialogFilter1: TboDialogFilter;
    boQueryFilter1: TboQueryFilter;
    Button3: TButton;
    Button4: TButton;
    boSavedFilter1: TboSavedFilter;
    PopupMenu1: TPopupMenu;
    Label1: TLabel;

    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure boDialogFilter1Saved(FilterData: TFilterData);
    procedure FormDestroy(Sender: TObject);
    procedure boSavedFilter1Change(Sender: TObject);
    procedure boSavedFilter1Filtred(Sender: TObject);
    function CreateSQL(FilterData: TFilterData): Boolean;
  end;

implementation

end.

unit dlgAbout_unit;

interface

type
  TdlgAbout = class(TForm)

  public
    Image1: TImage;
    Bevel: TBevel;
    HiddenCredit: TCredit;
    Memo: TMemo;
    Button1: TButton;
  end;

implementation

end.

unit dlgAddGroup_unit;

interface

type
  TdlgAddGroup = class(TForm)

  public
    dsUser: TDataSource;
    dbeName: TDBEdit;
    dbmDiscription: TDBMemo;
    dbeID: TDBEdit;
    btnOk: TButton;
    btnCancel: TButton;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    cbDisabled: TDBCheckBox;
    btnUser: TButton;
    ActionList1: TActionList;
    actViewUsers: TAction;
    ibqryWork: TIBQuery;
    btnSubSystem: TButton;
    dsGroup: TDataSource;
    actViewSubsystem: TAction;
    dsSubsystem: TDataSource;
    btnHelp: TButton;
    Ingroup: Integer;

    procedure actViewUsersExecute(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure actViewSubsystemExecute(Sender: TObject);
  end;

implementation

end.

unit dlgAddOperation_unit;

interface

type
  TdlgAddOperation = class(TForm)

  public
    dsOperation: TDataSource;
    dbeName: TDBEdit;
    dbmDiscription: TDBMemo;
    dbeID: TDBEdit;
    btnOk: TButton;
    btnCancel: TButton;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    cbDisabled: TDBCheckBox;
    Button1: TButton;
    ActionList1: TActionList;
    Label4: TLabel;
    Label5: TLabel;
    dbeInt1: TDBEdit;
    Label6: TLabel;
    dbeInt2: TDBEdit;
    Label7: TLabel;
    dbeFloat1: TDBEdit;
    Label8: TLabel;
    dbeFloat2: TDBEdit;
    Label9: TLabel;
    dbeDate: TDBEdit;
    Label10: TLabel;
    dbeText: TDBEdit;
    Label11: TLabel;
    dbeBlob: TDBEdit;
    dsSubsystem: TDataSource;
    dblcbSubSystem: TDBLookupComboBox;
    actShowGroup: TAction;
    dsGroup: TDataSource;
    btnHelp: TButton;
    Ingroup: Integer;
    ChangeRigth: Boolean;

    procedure btnOkClick(Sender: TObject);
    procedure actShowGroupExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  end;

implementation

end.

unit dlgAddSubsystem_unit;

interface

type
  TdlgAddSubsystem = class(TForm)

  public
    dsSubsystem: TDataSource;
    btnOk: TButton;
    btnCancel: TButton;
    Button1: TButton;
    ActionList1: TActionList;
    actGroup: TAction;
    ibqryWork: TIBQuery;
    dsGroup: TDataSource;
    btnHelp: TButton;
    PageControl: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    Label1: TLabel;
    Label2: TLabel;
    dbeID: TDBEdit;
    dbeName: TDBEdit;
    Label3: TLabel;
    dbmDiscription: TDBMemo;
    cbDisabled: TDBCheckBox;
    Bevel1: TBevel;
    Bevel2: TBevel;
    Label4: TLabel;
    dbchbxAuditCache: TDBCheckBox;
    chbxAuditMaxDays: TCheckBox;
    cbAuditLevel: TComboBox;
    dbedAuditMaxDays: TDBEdit;
    Label5: TLabel;
    Ingroup: Integer;

    procedure actGroupExecute(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure chbxAuditMaxDaysClick(Sender: TObject);
    procedure cbAuditLevelChange(Sender: TObject);
  end;

implementation

end.

unit dlgAddUser_unit;

interface

type
  TdlgAddUser = class(TForm)

  public
    dbeName: TDBEdit;
    lblInfo: TLabel;
    Label5: TLabel;
    dbeFullName: TDBEdit;
    dbmDiscription: TDBMemo;
    dbeExpDate: TDBEdit;
    edPassword: TEdit;
    edPasswordDoble: TEdit;
    btnOk: TButton;
    btnCancel: TButton;
    cbNeverExp: TDBCheckBox;
    cbCantChange: TDBCheckBox;
    cbMustChange: TDBCheckBox;
    cbDisabled: TDBCheckBox;
    btnGroup: TButton;
    ActionList1: TActionList;
    actGroup: TAction;
    dsGroup: TDataSource;
    dsUser: TDataSource;
    btnHelp: TButton;
    edStartWork: TEdit;
    edEndWork: TEdit;
    Ingroup: Integer;

    procedure mmcbNeverExpClick(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure actGroupExecute(Sender: TObject);
    procedure cbCantChangeClick(Sender: TObject);
  end;

implementation

end.

unit dlgSetTable_unit;

interface

type
  TdlgSetTable = class(TForm)

  public
    ibqryDataBase: TIBQuery;
    dsDataBase: TDataSource;
    lvAll: TListView;
    ActionList1: TActionList;
    actTo: TAction;
    actFrom: TAction;
    actChangeRigth: TAction;
    btnOk: TButton;
    btnCancel: TButton;
    btnHelp: TButton;
  end;

implementation

end.

unit dlgViewGroup_unit;

interface

type
  TdlgViewGroup = class(TForm)

  public
    btnOk: TButton;
    btnCancel: TButton;
    btnHelp: TButton;
    Panel1: TPanel;
    lvGroup: TListView;
    pnlCheckBox: TPanel;
    cbAllSubOperation: TCheckBox;
  end;

implementation

end.

unit dlgViewSubsystem_unit;

interface

type
  TdlgViewSubsystem = class(TForm)

  public
    btnOk: TButton;
    btnCancel: TButton;
    lvSubsystem: TListView;
    btnHelp: TButton;
  end;

implementation

end.

unit dlgViewUser_unit;

interface

type
  TdlgViewUser = class(TForm)

  public
    btnOk: TButton;
    btnCancel: TButton;
    lvUsers: TListView;
    btnHelp: TButton;
  end;

implementation

end.

unit dmDataBase_unit;

interface

type
  TdmDatabase = class(TDataModule)

  public
    ibdbGAdmin: TgsIBDatabase;
    ibtrGAdmin: TIBTransaction;
    boJournal: TboJournal;
    boLogin: TboLogin;
    boAttr: TboAttr;
  end;

implementation

end.

unit gadmin_unit;

interface

type
  TfrmGAdminMainForm = class(TForm)

  public
    PageControl: TPageControl;
    tsUser: TTabSheet;
    tsGroup: TTabSheet;
    tsSubsystem: TTabSheet;
    MainMenu: TMainMenu;
    j1: TMenuItem;
    lvUser: TListView;
    lvGroup: TListView;
    lvSubsystem: TListView;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    tsOperation: TTabSheet;
    N4: TMenuItem;
    ibqryUser: TIBQuery;
    ibqryGroup: TIBQuery;
    ibqrySubsystem: TIBQuery;
    ibqryOperationNull: TIBQuery;
    ibudUser: TIBUpdateSQL;
    ibudGroup: TIBUpdateSQL;
    ibudSubsystem: TIBUpdateSQL;
    ActionList1: TActionList;
    actShowUser: TAction;
    actShowGroup: TAction;
    actShowSubsystem: TAction;
    actShowOperation: TAction;
    actAddUser: TAction;
    actEditUser: TAction;
    actDelUser: TAction;
    N5: TMenuItem;
    N6: TMenuItem;
    N7: TMenuItem;
    actAddGroup: TAction;
    actEditGroup: TAction;
    actDelGroup: TAction;
    N8: TMenuItem;
    N9: TMenuItem;
    N10: TMenuItem;
    actAddSubsystem: TAction;
    actEditSubsystem: TAction;
    actDelSubsystem: TAction;
    N11: TMenuItem;
    N12: TMenuItem;
    N13: TMenuItem;
    tvOperation: TTreeView;
    ibqryOperationChild: TIBQuery;
    actAddItem: TAction;
    actAddSubItem: TAction;
    actEditItem: TAction;
    actDelItem: TAction;
    ibudOperation: TIBUpdateSQL;
    ibqryOperation: TIBQuery;
    N14: TMenuItem;
    N15: TMenuItem;
    N16: TMenuItem;
    N17: TMenuItem;
    ibqryOprID: TIBQuery;
    pmUser: TPopupMenu;
    pmGroup: TPopupMenu;
    pmSubsystem: TPopupMenu;
    pmOperation: TPopupMenu;
    N18: TMenuItem;
    N19: TMenuItem;
    N20: TMenuItem;
    N21: TMenuItem;
    N22: TMenuItem;
    N23: TMenuItem;
    N24: TMenuItem;
    N25: TMenuItem;
    N26: TMenuItem;
    N27: TMenuItem;
    N28: TMenuItem;
    N29: TMenuItem;
    N30: TMenuItem;
    N31: TMenuItem;
    tsTable: TTabSheet;
    N32: TMenuItem;
    lvSelect: TListView;
    actShowTable: TAction;
    ibqryTableAccess: TIBQuery;
    ibudTableAccess: TIBUpdateSQL;
    actAddTable: TAction;
    actAddTable1: TMenuItem;
    boAccess: TboAccess;
    actEditTable: TAction;
    act1: TMenuItem;
    dsAccessTable: TDataSource;
    actDelTable: TAction;
    N33: TMenuItem;
    actHideMenu: TAction;
    ibqryTableList: TIBQuery;
    ibsqlDelGroup: TIBSQL;
    N34: TMenuItem;
    N35: TMenuItem;
    pmTable: TPopupMenu;
    N36: TMenuItem;
    N37: TMenuItem;
    N38: TMenuItem;
    tsVersionInfo: TTabSheet;
    Panel1: TPanel;
    lblVersionID: TLabel;
    lblVersionNumber: TLabel;
    lblVersionDate: TLabel;
    lblVersionComment: TLabel;
    ibspChangeRightOperation: TIBStoredProc;
    tsFileVersion: TTabSheet;
    sgFileVersion: TStringGrid;
    N39: TMenuItem;
    N40: TMenuItem;
    gsFormDataSaver: TgsFormDataSaver;
    ShUs: Boolean;
    ShGr: Boolean;
    ShSs: Boolean;
    ShOp: Boolean;

    procedure actShowUserExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure actShowGroupExecute(Sender: TObject);
    procedure actShowSubsystemExecute(Sender: TObject);
    procedure PageControlResize(Sender: TObject);
    procedure actAddUserExecute(Sender: TObject);
    procedure lvUserDblClick(Sender: TObject);
    procedure actEditUserExecute(Sender: TObject);
    procedure actDelUserExecute(Sender: TObject);
    procedure actAddGroupExecute(Sender: TObject);
    procedure actEditGroupExecute(Sender: TObject);
    procedure actDelGroupExecute(Sender: TObject);
    procedure lvGroupDblClick(Sender: TObject);
    procedure actAddSubsystemExecute(Sender: TObject);
    procedure actEditSubsystemExecute(Sender: TObject);
    procedure actDelSubsystemExecute(Sender: TObject);
    procedure lvSubsystemDblClick(Sender: TObject);
    procedure j1Click(Sender: TObject);
    procedure N1Click(Sender: TObject);
    procedure N2Click(Sender: TObject);
    procedure N4Click(Sender: TObject);
    procedure actShowOperationExecute(Sender: TObject);
    procedure tvOperationExpanding(Sender: TObject; Node: TTreeNode;
      var AllowExpansion: Boolean);
    procedure actAddItemExecute(Sender: TObject);
    procedure actEditItemExecute(Sender: TObject);
    procedure tvOperationDblClick(Sender: TObject);
    procedure actDelItemExecute(Sender: TObject);
    procedure actAddSubItemExecute(Sender: TObject);
    procedure actAddSubItemUpdate(Sender: TObject);
    procedure actDelItemUpdate(Sender: TObject);
    procedure N31Click(Sender: TObject);
    procedure actShowTableExecute(Sender: TObject);
    procedure actAddTableExecute(Sender: TObject);
    procedure actEditTableExecute(Sender: TObject);
    procedure actDelTableExecute(Sender: TObject);
    procedure N32Click(Sender: TObject);
    procedure lvSelectDblClick(Sender: TObject);
    procedure actHideMenuExecute(Sender: TObject);
    procedure PageControlChange(Sender: TObject);
    procedure N40Click(Sender: TObject);
    procedure ClearTableGroup(GroupKey: Integer);
  end;

implementation

end.

unit msgDeleteGroup_unit;

interface

type
  TmsgDeleteGroup = class(TForm)

  public
    Animate: TAnimate;
    Label1: TLabel;
  end;

implementation

end.

unit dmImages_unit;

interface

type
  TdmImages = class(TDataModule)

  public
    ilTree: TImageList;
  end;

implementation

end.

unit gd_frmexplorer;

interface

type
  TfrmExplorer = class(TForm)

  public
    tb: TToolBar;
    tvExplorer: TTreeView;
    IBTransaction: TIBTransaction;
    IBSQL: TIBSQL;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    al: TActionList;
    actExpand: TAction;
    actCollapse: TAction;
    ToolButton3: TToolButton;
    actHide: TAction;
    gsFormDataSaver: TgsFormDataSaver;

    procedure FormDestroy(Sender: TObject);
    procedure tvExplorerDblClick(Sender: TObject);
    procedure actExpandExecute(Sender: TObject);
    procedure actCollapseExecute(Sender: TObject);
    procedure actHideExecute(Sender: TObject);
    procedure LoadExplorer;
  end;

implementation

end.

unit gd_main_form;

interface

type
  TfrmGedeminMain = class(TForm)

  public
    ControlBar: TControlBar;
    tbMenu: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    pmDocument: TPopupMenu;
    ActionList: TActionList;
    actExit: TAction;
    actAbout: TAction;
    N1: TMenuItem;
    pmView: TPopupMenu;
    pmHelp: TPopupMenu;
    N2: TMenuItem;
    actExplorer: TAction;
    N3: TMenuItem;
    gsFormDataSaver: TgsFormDataSaver;
    tbDesktops: TToolBar;
    cbDesktop: TComboBox;
    ToolButton4: TToolButton;
    ToolButton5: TToolButton;
    actSaveDesktop: TAction;
    gsDesktopManager: TgsDesktopManager;
    ToolButton6: TToolButton;
    actDeleteDesktop: TAction;
    N4: TMenuItem;
    actDeleteDesktop1: TMenuItem;
    N5: TMenuItem;

    procedure FormCreate(Sender: TObject);
    procedure actExplorerExecute(Sender: TObject);
    procedure actExplorerUpdate(Sender: TObject);
    procedure actExitExecute(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure actSaveDesktopExecute(Sender: TObject);
    procedure cbDesktopChange(Sender: TObject);
    procedure actDeleteDesktopExecute(Sender: TObject);
    function gsDesktopManagerDesktopItemCreate(Sender: TObject;
      const AnItemClass, AnItemName: String): TComponent;
  end;

implementation

end.

unit boCurrency;

interface

type
  TboCurrency = class(TComponent)

  public
    NCU: Integer;
    Eq: Integer;

    procedure LoadData;
    function GetRate(FromCurr, ToCurr: Integer; Date: TDate): Double;
    function GetRate(FromCurr, ToCurr: Integer): Double;
    function GetRate(FromCurr: Integer; Date: TDate): Double;
    function GetRate(FromCurr: Integer): Double;
    function GetRate(Date: TDate): Double;
    function GetRate: Double;
    function SetRate(FromCurr, ToCurr: Integer; Date: TDate; Rate: Double): Boolean;
    function SetRate(FromCurr, ToCurr: Integer; Rate: Double): Boolean;
    function SetRate(FromCurr: Integer; Date: TDate; Rate: Double): Boolean;
    function SetRate(FromCurr: Integer; Rate: Double): Boolean;
    function SetRate(Date: TDate; Rate: Double): Boolean;
    function SetRate(Rate: Double): Boolean;
  end;

implementation

end.

unit dlgAttrToRef_unit;

interface

type
  TdlgAttrToRef = class(TForm)
  private
    function CheckFieldName(Const AKey: Char; Const ALength: Integer): Char;

  public
    btnOK: TButton;
    btnCancel: TButton;
    btnAccess: TButton;
    Panel1: TPanel;
    lbFieldName: TLabel;
    Label4: TLabel;
    stName: TStaticText;
    Panel2: TPanel;
    Label1: TLabel;
    pnFloat: TPanel;
    edFloat: TEdit;
    pnInteger: TPanel;
    edInteger: TEdit;
    pnSetElement: TPanel;
    pnDateTime: TPanel;
    dtpDataTime: TDateTimePicker;
    dtpTimeData: TDateTimePicker;
    pnDate: TPanel;
    dtpDate: TDateTimePicker;
    pnBoolean: TPanel;
    cbBoolean: TComboBox;
    pnString: TPanel;
    edString: TEdit;
    pnBlob: TPanel;
    chbDataTime: TCheckBox;
    chbDate: TCheckBox;
    udPriority: TUpDown;
    chbDisabled: TCheckBox;
    boAccess1: TboAccess;
    edFieldName: TEdit;
    Label6: TLabel;
    edLabel: TEdit;
    edVariableName: TEdit;
    chbMandatory: TCheckBox;
    Label5: TLabel;
    edPriority: TEdit;
    cbSetType: TComboBox;
    lbSetType: TLabel;
    Label3: TLabel;
    stType: TStaticText;
    hkHotKey: THotKey;
    Label8: TLabel;
    qryName: TIBQuery;
    boCbSetElement: TgsComboBoxAttr;
    chbVariable: TCheckBox;
    ibsqlVarName: TIBSQL;
    RKey: Integer;
    AttrType: Char;
    NewAttr: Boolean;
    TableName: String;
    aFull: Integer;
    aChag: Integer;
    aView: Integer;

    procedure dtpDataTimeChange(Sender: TObject);
    procedure dtpTimeDataChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure edFloatKeyPress(Sender: TObject; var Key: Char);
    procedure edIntegerKeyPress(Sender: TObject; var Key: Char);
    procedure chbDateClick(Sender: TObject);
    procedure chbDataTimeClick(Sender: TObject);
    procedure edPriorityKeyPress(Sender: TObject; var Key: Char);
    procedure btnAccessClick(Sender: TObject);
    procedure cbSetTypeChange(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure edFieldNameKeyPress(Sender: TObject; var Key: Char);
    procedure chbVariableClick(Sender: TObject);
    procedure edVariableNameKeyPress(Sender: TObject; var Key: Char);
  end;

implementation

end.

unit dlgChooseAttr_unit;

interface

type
  TdlgChooseAttr = class(TForm)

  public
    Panel1: TPanel;
    Panel2: TPanel;
    qryAttributes: TIBQuery;
    Button1: TButton;
    btnAdd: TButton;
    lbAttr: TListBox;
    RefKey: Integer;
    AttrKey: Integer;

    procedure SetupDialog(ARefKey: Integer);
    procedure btnAddClick(Sender: TObject);
    procedure lbAttrKeyPress(Sender: TObject; var Key: Char);
  end;

implementation

end.

unit dlgChooseFirm_unit;

interface

type
  TdlgChooseFirm = class(TForm)

  public
    btnOK: TButton;
    btnCancel: TButton;
    dbgOurCompany: TDBGrid;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    ActionList1: TActionList;
    actNew: TAction;
    actChoose: TAction;
    actEdit: TAction;
    actDel: TAction;
    qryOurCompany: TIBQuery;
    actOk: TAction;
    actCancel: TAction;
    dsOurCompany: TDataSource;
    qryOurCompanyID: TIntegerField;
    qryOurCompanyNAME: TIBStringField;
    qryExistFolder: TIBQuery;
    qryAddGroup: TIBQuery;
    qryAddOurCompany: TIBQuery;
    qrySaveUserCompany: TIBQuery;
    qryGetCompanyKey: TIBQuery;
    qryDeleteFirm: TIBQuery;
    DataBase: TIBDataBase;
    CompanyKey: Integer;

    procedure actNewExecute(Sender: TObject);
    procedure actCancelUpdate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure actDelUpdate(Sender: TObject);
    procedure actOkExecute(Sender: TObject);
    procedure actChooseExecute(Sender: TObject);
    procedure actDelExecute(Sender: TObject);
    procedure actCancelExecute(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure ShowOurCompany(Key: Integer);
    function ChooseFirm: Boolean;
  end;

implementation

end.

unit dlgCurrRate_unit;

interface

type
  TdlgCurrRate = class(TForm)

  public
    Image5: TImage;
    Label2: TLabel;
    Bevel2: TBevel;
    Label1: TLabel;
    ActionList1: TActionList;
    aNew: TAction;
    dsCurrRate: TDataSource;
    qryCurrRate: TIBQuery;
    ibuCurrRate: TIBUpdateSQL;
    dblcFromCurr: TDBLookupComboBox;
    qryFromCurr: TIBQuery;
    dsFromCurr: TDataSource;
    xdbForDate: TxDateDBEdit;
    Label3: TLabel;
    Label4: TLabel;
    dblcToCurr: TDBLookupComboBox;
    dsToCurr: TDataSource;
    qryToCurr: TIBQuery;
    Label5: TLabel;
    dbeCoeff: TDBEdit;
    Bevel1: TBevel;
    btnNew: TButton;
    btnOK: TButton;
    btnCancel: TButton;
    KeyList: TStringList;
    Date: TDate;
    FromCurr: Integer;
    ToCurr: Integer;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure aNewExecute(Sender: TObject);
    function AddCurrRate(const AFromCurr, AToCurr: Integer; ADate: TDate): Boolean;
    procedure AppendCurrRate;
  end;

implementation

end.

unit dlgCurr_unit;

interface

type
  TdlgCurr = class(TForm)

  public
    dsCurr: TDataSource;
    Image5: TImage;
    Label2: TLabel;
    Bevel2: TBevel;
    mmlFullName: TLabel;
    mmlShortName: TLabel;
    mmlCode: TLabel;
    mmlSign: TLabel;
    mmlFullCentName: TLabel;
    mmlShortCentName: TLabel;
    mmlDecdigits: TLabel;
    mmlCentbase: TLabel;
    dbeFullName: TDBEdit;
    dbeShortName: TDBEdit;
    dbeCode: TDBEdit;
    dbeSign: TDBEdit;
    dbeFullCentName: TDBEdit;
    dbeShortCentName: TDBEdit;
    dbeDecdigits: TDBEdit;
    dbeCentbase: TDBEdit;
    Bevel1: TBevel;
    btnNew: TButton;
    btnOK: TButton;
    btnCancel: TButton;
    qryCurr: TIBQuery;
    qryNewCurr: TIBQuery;
    ibuCurr: TIBUpdateSQL;
    ActionList1: TActionList;
    actNew: TAction;
    dbrgPlace: TDBRadioGroup;
    dbcbIsNCU: TDBCheckBox;
    dbcbDisabled: TDBCheckBox;
    dbcbEq: TDBCheckBox;
    KeyList: TStringList;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure AppendCurr;
    function AddCurr: Boolean;
    function EditCurr(AKey: Integer): Boolean;
  end;

implementation

end.

unit dlgDimensionValue_unit;

interface

type
  TdlgDimensionValue = class(TForm)
  private
    OldValue: Double;

    procedure OnEnter(Sender: TObject);
    procedure OnExit(Sender: TObject);

  public
    Image3: TImage;
    Label2: TLabel;
    Bevel3: TBevel;
    Bevel1: TBevel;
    btnOK: TButton;
    btnCancel: TButton;
    sbDimension: TScrollBox;
    DimensionValueList: TDimensionValueList;
    AttrKey: Integer;

    procedure btnOKClick(Sender: TObject);
    procedure ShowDimensionValue(AnAttrKey: Integer);
  end;

implementation

end.

unit dlgEditIndex_unit;

interface

type
  TdlgEditIndex = class(TForm)
  private
    NewIndex: Boolean;
    FTableName: String;
    FIndexName: String;
    FRefKey: Integer;

  public
    StaticText1: TStaticText;
    edIndexName: TEdit;
    Bevel1: TBevel;
    StaticText2: TStaticText;
    lbFields: TListBox;
    lbSelected: TListBox;
    Label1: TLabel;
    Label2: TLabel;
    StaticText3: TStaticText;
    StaticText4: TStaticText;
    cbSortMode: TComboBox;
    ActionList1: TActionList;
    btnOk: TButton;
    Button4: TButton;
    Bevel2: TBevel;
    actSelect: TAction;
    actUnselect: TAction;
    SpeedButton1: TSpeedButton;
    SpeedButton2: TSpeedButton;
    ibsqlEditIndex: TIBSQL;
    ibsqlDropIndex: TIBSQL;

    procedure actSelectUpdate(Sender: TObject);
    procedure actUnselectUpdate(Sender: TObject);
    procedure actSelectExecute(Sender: TObject);
    procedure actUnselectExecute(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    function AddIndex(Const ARefKey: Integer; Const ATableName: String): Boolean;
    procedure PropertyIndex(Const ATableName: String; Const AnIndexName: String);
    function DeleteIndex(Const AnIndexName: String): boolean;
  end;

implementation

end.

unit dlgEntryFilter_unit;

interface

type
  TdlgEntryFilter = class(TForm)

  public
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    RadioGroup1: TRadioGroup;
    RadioGroup2: TRadioGroup;
    TabSheet2: TTabSheet;
    CheckBox1: TCheckBox;
    tvGroup: TTreeView;
    TabSheet3: TTabSheet;
    CheckBox2: TCheckBox;
    TreeView1: TTreeView;
    Panel1: TPanel;
    btnOk: TButton;
    Button2: TButton;
    Button1: TButton;
    Button3: TButton;
  end;

implementation

end.

unit dlgIndexes_unit;

interface

type
  TdlgIndexes = class(TForm)
  private
    FRefKey: Integer;
    FTableName: String;

  public
    Panel1: TPanel;
    qryIndex: TIBQuery;
    PopupMenu1: TPopupMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    ActionList1: TActionList;
    actNewIndex: TAction;
    actDelIndex: TAction;
    actEditIndex: TAction;
    qryIndexINDEXNAME: TIBStringField;
    Panel3: TPanel;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    tbDelete: TToolButton;
    ilHotImages: TImageList;
    ilToolBar: TImageList;
    lvIndex: TListView;

    procedure actNewIndexExecute(Sender: TObject);
    procedure actEditIndexExecute(Sender: TObject);
    procedure actDelIndexExecute(Sender: TObject);
    procedure SetupDialog(Const ARefKey: Integer; Const AName: String);
  end;

implementation

end.

unit dlgJ_Transaction_unit;

interface

type
  TdlgJ_Transaction = class(TForm)

  public
    Splitter1: TSplitter;
    Panel1: TPanel;
    Panel2: TPanel;
    dbgJTransaction: TDBGrid;
    DBGrid2: TDBGrid;
    qryJTransaction: TIBQuery;
    qryJEntryList: TIBQuery;
    qryTransaction: TIBQuery;
    Panel3: TPanel;
    btnOK: TButton;
    btnCancel: TButton;
    dsTransaction: TDataSource;
    dsJEntryList: TDataSource;
  end;

implementation

end.

unit dlgSelectAttrSet_unit;

interface

type
  TdlgSelectAttrSet = class(TForm)
  private
    AKey: Integer;

    procedure ShowAttrSet;
    procedure ShowFind(Qry: Boolean);
    procedure ShowTargetList(SL: TStrings);
    function CheckValue(StartP, EndP, Value: Integer): Integer;

  public
    Panel1: TPanel;
    Label1: TLabel;
    edName: TEdit;
    Button1: TButton;
    Button2: TButton;
    Panel2: TPanel;
    ListView1: TListView;
    lvAttrSet: TListView;
    ibqrySelectAttrSet: TIBQuery;
    PopupMenu1: TPopupMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    ActionList1: TActionList;
    actEdit: TAction;
    Panel4: TPanel;
    lItemsCount: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibqryFind: TIBQuery;
    actFind: TAction;
    cbCondition: TComboBox;
    Label2: TLabel;
    actAdd: TAction;
    actDelete: TAction;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    lvTarget: TListView;
    Button6: TButton;
    actTo: TAction;
    actFrom: TAction;
    Button7: TButton;

    procedure Button2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure actFindExecute(Sender: TObject);
    procedure actFindUpdate(Sender: TObject);
    procedure edNameKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure actToExecute(Sender: TObject);
    procedure lvTargetCompare(Sender: TObject; Item1, Item2: TListItem;
      Data: Integer; var Compare: Integer);
    procedure actFromExecute(Sender: TObject);
    procedure actAddExecute(Sender: TObject);
    procedure actDeleteExecute(Sender: TObject);
    procedure actEditUpdate(Sender: TObject);
    procedure lvAttrSetDblClick(Sender: TObject);
    procedure lvTargetDblClick(Sender: TObject);
    function GetElements(AttrKey: Integer; SetList: TStrings): Boolean;
  end;

implementation

end.

unit dlgSelectAttr_unit;

interface

type
  TdlgSelectAttr = class(TForm)
  private
    OkEn: Boolean;
    AKey: Integer;

    procedure ShowAttrSet;
    procedure ShowFind(Qry: Boolean);

  public
    Panel1: TPanel;
    Label1: TLabel;
    edName: TEdit;
    Button1: TButton;
    Button2: TButton;
    Panel2: TPanel;
    Image1: TImage;
    btnProperty: TButton;
    ListView1: TListView;
    lvAttrSet: TListView;
    ibqrySelectAttrSet: TIBQuery;
    PopupMenu1: TPopupMenu;
    ActionList1: TActionList;
    actEdit: TAction;
    Panel4: TPanel;
    lItemsCount: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ibqryFind: TIBQuery;
    actFind: TAction;
    cbCondition: TComboBox;
    Label2: TLabel;
    actAdd: TAction;
    actDelete: TAction;
    Button3: TButton;
    Button4: TButton;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;

    procedure Button2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnSelectClick(Sender: TObject);
    procedure actFindExecute(Sender: TObject);
    procedure actFindUpdate(Sender: TObject);
    procedure edNameKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure actAddExecute(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure actDeleteExecute(Sender: TObject);
    procedure actEditUpdate(Sender: TObject);
    procedure lvAttrSetDblClick(Sender: TObject);
    function GetElement(AttrKey: Integer; var SetName: String): Integer;
  end;

implementation

end.

unit dlgSelectFirm_unit;

interface

type
  TdlgChooseFirma = class(TForm)

  public
    btnOK: TButton;
    btnCancel: TButton;
    dbgOurCompany: TDBGrid;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    ActionList1: TActionList;
    actNew: TAction;
    actChoose: TAction;
    actEdit: TAction;
    actDel: TAction;
    qryOurCompany: TIBQuery;
    actOk: TAction;
    actCancel: TAction;
    dsOurCompany: TDataSource;
    qryOurCompanyID: TIntegerField;
    qryOurCompanyNAME: TIBStringField;
    qryExistFolder: TIBQuery;
    qryAddGroup: TIBQuery;
    qryAddOurCompany: TIBQuery;
    qrySaveUserCompany: TIBQuery;
    qryGetCompanyKey: TIBQuery;
    DataBase: TIBDataBase;
    CompanyKey: Integer;

    procedure actNewExecute(Sender: TObject);
    procedure actCancelUpdate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure actDelUpdate(Sender: TObject);
    procedure actOkExecute(Sender: TObject);
    procedure actChooseExecute(Sender: TObject);
    procedure ShowOurCompany(Key: Integer);
    function ChooseFirma: Boolean;
  end;

implementation

end.

unit dlgViewAnalyze_unit;

interface

type
  TdlgViewAnalyze = class(TForm)

  public
    Panel3: TPanel;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    tbDelete: TToolButton;
    Panel1: TPanel;
    alCardAccount: TActionList;
    aNew: TAction;
    aDelete: TAction;
    pmAnalyze: TPopupMenu;
    qryAnalyze: TIBQuery;
    Panel2: TPanel;
    ilSmall: TImageList;
    ibqryWork: TIBQuery;
    N1: TMenuItem;
    N2: TMenuItem;
    ilHotImages: TImageList;
    ilToolBar: TImageList;
    Splitter2: TSplitter;
    Panel5: TPanel;
    lvAnalyze: TListView;
    Panel4: TPanel;
    lvOpAnalyze: TListView;
    Panel6: TPanel;
    Label1: TLabel;
    Panel7: TPanel;
    Label2: TLabel;
    aNewOperation: TAction;
    pmOpAnalyze: TPopupMenu;
    MenuItem1: TMenuItem;
    MenuItem2: TMenuItem;
    pmNew: TPopupMenu;
    N3: TMenuItem;
    N4: TMenuItem;
    qryOpAnalyze: TIBQuery;

    procedure FormCreate(Sender: TObject);
    procedure aNewExecute(Sender: TObject);
    procedure aDeleteExecute(Sender: TObject);
    procedure IBSQLMonitor1SQL(EventText: String);
    procedure IBEvents1EventAlert(Sender: TObject; EventName: String;
      EventCount: Integer; var CancelAlerts: Boolean);
    procedure aNewOperationExecute(Sender: TObject);
    procedure ShowAnalyze;
    procedure ShowOpAnalyze;
  end;

implementation

end.

unit dlgViewAttr_unit;

interface

type
  TdlgViewAttr = class(TCreateableForm)
  private
    Node: TTreeNode;
    CurrentData: Integer;
    SelKey: Integer;
    FRefList: TStrings;

    procedure ShowAttr;
    procedure ShowTree;
    procedure LoadRef;
    procedure ShowDimension;

  public
    ActionList1: TActionList;
    actNewAttr: TAction;
    actNewElement: TAction;
    actAtrrProperty: TAction;
    actAttrDelete: TAction;
    pmAdd: TPopupMenu;
    N2: TMenuItem;
    N33: TMenuItem;
    pmElement: TPopupMenu;
    N5: TMenuItem;
    N34: TMenuItem;
    N15: TMenuItem;
    N14: TMenuItem;
    N6: TMenuItem;
    qryAttr: TIBQuery;
    qryElement: TIBQuery;
    tmrView: TTimer;
    ibsqlDelete: TIBSQL;
    qryAttribute: TIBQuery;
    qryElements: TIBQuery;
    N1: TMenuItem;
    actNewSubElement: TAction;
    pmAttr: TPopupMenu;
    MenuItem1: TMenuItem;
    MenuItem5: TMenuItem;
    MenuItem6: TMenuItem;
    MenuItem7: TMenuItem;
    N3: TMenuItem;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    Panel3: TPanel;
    Panel1: TPanel;
    lvAttr: TListView;
    Splitter1: TSplitter;
    Panel2: TPanel;
    tvElements: TTreeView;
    TabSheet2: TTabSheet;
    sbAttribute: TStatusBar;
    Splitter2: TSplitter;
    Panel4: TPanel;
    lvRef: TListView;
    Panel5: TPanel;
    lvAttrRef: TListView;
    qryViewRef: TIBQuery;
    PopupMenu1: TPopupMenu;
    MenuItem2: TMenuItem;
    N4: TMenuItem;
    MenuItem3: TMenuItem;
    MenuItem4: TMenuItem;
    MenuItem8: TMenuItem;
    pmiAttrSmall: TMenuItem;
    pmiAttrBig: TMenuItem;
    pmiAttrList: TMenuItem;
    pmiAttrDetail: TMenuItem;
    qryViewAttr: TIBQuery;
    HotImages: TImageList;
    alRef: TActionList;
    actAddAttr: TAction;
    actDelAttr: TAction;
    actProperty: TAction;
    actIndex: TAction;
    actAccess: TAction;
    qryReference: TIBQuery;
    ibSQL: TIBSQL;
    IBUpdateSQL1: TIBUpdateSQL;
    boAccess1: TboAccess;
    qryAttrRef: TIBQuery;
    PopupMenu2: TPopupMenu;
    MenuItem9: TMenuItem;
    N7: TMenuItem;
    N8: TMenuItem;
    IBDatabaseInfo1: TIBDatabaseInfo;
    Panel6: TPanel;
    CoolBar2: TCoolBar;
    ToolBar2: TToolBar;
    ToolButton3: TToolButton;
    ToolButton4: TToolButton;
    ToolButton5: TToolButton;
    ToolButton6: TToolButton;
    ToolButton7: TToolButton;
    ilToolBari: TImageList;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    tbDelete: TToolButton;
    ToolButton8: TToolButton;
    actExit: TAction;
    ToolButton9: TToolButton;
    qrySetAccess: TIBQuery;
    qrySetElementAccess: TIBQuery;
    TabSheet3: TTabSheet;
    Panel7: TPanel;
    CoolBar3: TCoolBar;
    ToolBar3: TToolBar;
    ToolButton10: TToolButton;
    ToolButton11: TToolButton;
    ToolButton12: TToolButton;
    ToolButton13: TToolButton;
    lvDimension: TListView;
    ToolButton14: TToolButton;
    pmAttrFilter: TPopupMenu;
    boAttrQueryFilter: TboQueryFilter;
    boAttrDialogFilter: TboDialogFilter;
    boAttrSavedFilter: TboSavedFilter;
    actNewDimension: TAction;
    actPropertyDimension: TAction;
    actDeleteDimension: TAction;
    qryDimension: TIBQuery;
    ToolButton15: TToolButton;
    pmDimensionFilter: TPopupMenu;
    boDimensionQueryFilter: TboQueryFilter;
    boDimensionDialogFilter: TboDialogFilter;
    boDimensionSavedFilter: TboSavedFilter;
    pmDimension: TPopupMenu;
    N9: TMenuItem;
    N10: TMenuItem;
    N11: TMenuItem;
    actHelp: TAction;
    ToolButton16: TToolButton;
    ToolButton17: TToolButton;
    ToolButton18: TToolButton;
    actChooseDimension: TAction;
    N12: TMenuItem;
    qryDeleteDimension: TIBQuery;
    class function CreateAndAssign(AnOwner: TComponent): TForm;

    procedure FormCreate(Sender: TObject);
    procedure actNewAttrExecute(Sender: TObject);
    procedure actAtrrPropertyExecute(Sender: TObject);
    procedure actNewElementExecute(Sender: TObject);
    procedure tmrViewTimer(Sender: TObject);
    procedure lvAttrChange(Sender: TObject; Item: TListItem;
      Change: TItemChange);
    procedure actAttrDeleteExecute(Sender: TObject);
    procedure actNewElementUpdate(Sender: TObject);
    procedure actNewSubElementExecute(Sender: TObject);
    procedure actAddAttrExecute(Sender: TObject);
    procedure actDelAttrExecute(Sender: TObject);
    procedure actPropertyExecute(Sender: TObject);
    procedure actIndexExecute(Sender: TObject);
    procedure actAccessExecute(Sender: TObject);
    procedure pmiAttrSmallClick(Sender: TObject);
    procedure pmiAttrBigClick(Sender: TObject);
    procedure pmiAttrListClick(Sender: TObject);
    procedure pmiAttrDetailClick(Sender: TObject);
    procedure lvAttrLoad(Const AKey: Integer);
    procedure lvAttrView;
    procedure AddAttrToRef(Const ARefKey: Integer; Const AnAttrKey: Integer);
    procedure actAddAttrUpdate(Sender: TObject);
    procedure actDelAttrUpdate(Sender: TObject);
    procedure lvRefChanging(Sender: TObject; Item: TListItem; Change: TItemChange;
                            var AllowChange: Boolean);
    procedure actExitExecute(Sender: TObject);
    procedure boAttrSavedFilterFiltred(Sender: TObject; Change: Boolean);
    procedure boAttrSavedFilterChange(Sender: TObject; Change: Boolean);
    procedure FormDestroy(Sender: TObject);
    procedure boDimensionSavedFilterChange(Sender: TObject;
      Change: Boolean);
    procedure boDimensionSavedFilterFiltred(Sender: TObject;
      Change: Boolean);
    procedure actNewDimensionExecute(Sender: TObject);
    procedure actPropertyDimensionExecute(Sender: TObject);
    procedure actPropertyDimensionUpdate(Sender: TObject);
    procedure actDeleteDimensionUpdate(Sender: TObject);
    procedure actChooseDimensionUpdate(Sender: TObject);
    procedure actChooseDimensionExecute(Sender: TObject);
    procedure actDeleteDimensionExecute(Sender: TObject);
    procedure ShowModalForm;
    procedure ShowModalForm(ARefList: TStrings);
  end;

implementation

end.

unit dlgViewCardAccount_unit;

interface

type
  TdlgViewCardAccount = class(TForm)
  private
    procedure ClearTree;

  public
    Panel3: TPanel;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    tbDelete: TToolButton;
    ToolButton3: TToolButton;
    Panel1: TPanel;
    ilHotImages: TImageList;
    ilToolBar: TImageList;
    alCardAccount: TActionList;
    aNewPlan: TAction;
    aNewGroup: TAction;
    aProperty: TAction;
    aDelete: TAction;
    aAccess: TAction;
    pmAdd: TPopupMenu;
    N2: TMenuItem;
    N33: TMenuItem;
    pmGroup: TPopupMenu;
    N5: TMenuItem;
    N7: TMenuItem;
    N34: TMenuItem;
    N15: TMenuItem;
    N14: TMenuItem;
    N6: TMenuItem;
    N1: TMenuItem;
    qryCard: TIBQuery;
    aNewCardAccount: TAction;
    aNewSubAccount: TAction;
    Panel2: TPanel;
    lvCardAccount: TListView;
    Panel4: TPanel;
    tvGroup: TTreeView;
    qryGroup: TIBQuery;
    Panel5: TPanel;
    boAccess: TboAccess;
    aNewCardAccount1: TMenuItem;
    aNewSubAccount1: TMenuItem;
    cbGetSub: TCheckBox;
    ilSmall: TImageList;
    ilLarge: TImageList;
    qrySetAccess: TIBQuery;
    qryDeleteAccount: TIBQuery;
    pmCard: TPopupMenu;
    MenuItem1: TMenuItem;
    MenuItem4: TMenuItem;
    MenuItem5: TMenuItem;
    MenuItem6: TMenuItem;
    MenuItem7: TMenuItem;
    MenuItem8: TMenuItem;
    MenuItem9: TMenuItem;
    AccessAddCard, AccessEditCard, AccessDeleteCard: Boolean;

    procedure FormCreate(Sender: TObject);
    procedure aNewPlanExecute(Sender: TObject);
    procedure aPropertyExecute(Sender: TObject);
    procedure aNewGroupExecute(Sender: TObject);
    procedure tvGroupChange(Sender: TObject; Node: TTreeNode);
    procedure aNewCardAccountExecute(Sender: TObject);
    procedure aNewSubAccountExecute(Sender: TObject);
    procedure cbGetSubExit(Sender: TObject);
    procedure aAccessExecute(Sender: TObject);
    procedure aDeleteExecute(Sender: TObject);
    procedure aNewGroupUpdate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure ShowGroup(ID: Integer);
    procedure ShowAccount(ID: Integer);
  end;

implementation

end.

unit dlgViewCurr_unit;

interface

type
  TdlgViewCurr = class(TForm)

  public
    pmAdd: TPopupMenu;
    N2: TMenuItem;
    N33: TMenuItem;
    pmCurrRate: TPopupMenu;
    N5: TMenuItem;
    tmrView: TTimer;
    qryCurr: TIBQuery;
    pmCurr: TPopupMenu;
    MenuItem1: TMenuItem;
    MenuItem5: TMenuItem;
    MenuItem6: TMenuItem;
    MenuItem7: TMenuItem;
    HotImages: TImageList;
    ilToolBari: TImageList;
    alRef: TActionList;
    actAddCurr: TAction;
    actProperty: TAction;
    actAccess: TAction;
    boAccess1: TboAccess;
    Panel3: TPanel;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    Panel1: TPanel;
    lvCurr: TListView;
    Splitter1: TSplitter;
    Panel2: TPanel;
    Panel4: TPanel;
    cbAll: TCheckBox;
    Label1: TLabel;
    dtpStart: TDateTimePicker;
    Label2: TLabel;
    dtpEnd: TDateTimePicker;
    actAddCurrRate: TAction;
    dbgCurrRate: TDBGrid;
    qryCurrRate: TIBQuery;
    ilSmall: TImageList;
    actAll: TAction;
    qryTime: TIBQuery;
    dsCurrRate: TDataSource;
    usqlCurrRate: TIBUpdateSQL;
    ToolButton3: TToolButton;
    aDelete: TAction;
    qryDeleteCurr: TIBQuery;
    CurrentID: Integer;

    procedure FormCreate(Sender: TObject);
    procedure actAllExecute(Sender: TObject);
    procedure tmrViewTimer(Sender: TObject);
    procedure dbeCoeffExit(Sender: TObject);
    procedure dbgCurrRateColEnter(Sender: TObject);
    procedure lvCurrChange(Sender: TObject; Item: TListItem;
      Change: TItemChange);
    procedure dtpStartExit(Sender: TObject);
    procedure dtpEndExit(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure qryCurrRateBeforeEdit(DataSet: TDataSet);
    procedure qryCurrRateAfterInsert(DataSet: TDataSet);
    procedure qryCurrRateBeforeDelete(DataSet: TDataSet);
    procedure dbgCurrRateKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure actAddCurrExecute(Sender: TObject);
    procedure actPropertyExecute(Sender: TObject);
    procedure actAddCurrRateExecute(Sender: TObject);
    procedure aDeleteExecute(Sender: TObject);
    procedure ShowCurr;
    procedure ShowCurrRate;
  end;

implementation

end.

unit dlgWait_unit;

interface

type
  TdlgWait = class(TForm)

  public
    Panel1: TPanel;
    lbWaitText: TLabel;

    procedure Start(Text: String);
    procedure Stop;
  end;

implementation

end.

unit dmAttr_unit;

interface

type
  TdmAttr = class(TDataModule)
  end;

implementation

end.

unit frmSelectLitleSet;

interface

type
  TFrame1 = class(TFrame)

  public
    ListView1: TListView;
  end;

implementation

end.

unit frmSelectSet_unit;

interface

type
  TfrmSelectSet = class(TForm)

  public
    Panel1: TPanel;
    ListView: TListView;
    btnOk: TButton;
    btnCancel: TButton;
  end;

implementation

end.

unit gd_attr;

interface

type
  TTree = class(TObject)

  public
    id, parent, lb, rb: Integer;
  end;

(* Еоличечтвенные показатели аналитики*)
  TDimensionAttr = class(TObject)

  public
    ID: Integer;
    Name: String;

    procedure Assign(ADimensionAttr: TDimensionAttr);
  end;

(* Список показателей*)
  TDimensionAttrList = class(TList)
  private
    function GetDimensionAttr(Index: Integer): TDimensionAttr;

  public
    destructor Destroy;

    procedure Assign(const Source: TDimensionAttrList);
    procedure Clear;
    procedure DeleteDimensionAttr(const Index: Integer);
    function AddDimensionAttr(const AnID: Integer; const AName: String): Integer;
    function AddDimensionAttr(const AnDimensionAttr: TDimensionAttr): Integer;

    property DimensionAttr[Index: Integer]: TDimensionAttr read GetDimensionAttr;
  end;

(* Аналитика*)
  TAnalyze = class(TObject)

  public
    id: Integer;
    name: String;
    refkey: Integer;
    DimensionAttrList: TDimensionAttrList;

    procedure Assign(AnAnalyze: TAnalyze);
    constructor Create;
    destructor Destroy;

  end;

  TAnalyzeList = class(TList)
  private
    function GetAnalyze(Index: Integer): TAnalyze;

  public
    destructor Destroy;

    procedure Assign(const Source: TAnalyzeList);
    procedure Clear;
    function GetName(const AnID: Integer): String;
    function GetIndex(const AnID: Integer): Integer;
    procedure DeleteAnalyze(const Index: Integer);
    function AddAnalyze(const AnAnalyze: TAnalyze): Integer;
    function AddAnalyze(const AName: String; const AnId, ARefKey: Integer): Integer;

    property Analyze[Index: Integer]: TAnalyze read GetAnalyze;
  end;

(* Атрибут справочника*)
  TAttrRef = class(TObject)

  public
    id: Integer;
    AttrLabel: String;
    AttrKey: Integer;
    RefKey: Integer;
    defaultvalue: String;
    mandatory: Boolean;
    hotkey: Integer;
    VariableName: String;
    FieldName: String;
    SetElement: Boolean;
    AttrType: TAttrType;
    LongRef: Boolean;
    afull: Integer;
    achag: Integer;
    aview: Integer;

    procedure Assign(const AnAttrRef: TAttrRef);
  end;

(* Список атрибутов справочника*)
  TAttrRefList = class(TList)
  private
    function GetAttrRef(Index: Integer): TAttrRef;

  public
    destructor Destroy;

    procedure Assign(const Source: TAttrRefList);
    procedure Clear;
    function IndexOfID(const ID: Integer): Integer;
    procedure DeleteAttrRef(const Index: Integer);
    function AddAttrRef(const AnAttrRef: TAttrRef): Integer;

    property AttrRef[Index: Integer]: TAttrRef read GetAttrRef;
  end;

(* Справочник*)
  TReference = class(TObject)

  public
    id: Integer;
    AttrRefList: TAttrRefList;

    constructor Create;
    destructor Destroy;

    procedure Assign(AReference: TReference);
  end;

(* Список атрибутов справочника*)
  TReferenceList = class(TList)
  private
    function GetReference(Index: Integer): TReference;

  public
    destructor Destroy;

    procedure Assign(const Source: TReferenceList);
    procedure Clear;
    function IndexOfID(const ID: Integer): Integer;
    procedure AddVariables(const ID: Integer; VariableList: TVariableList;
      IBQuery: TIBQuery);
    procedure SetAttributeName(const ID: Integer; IBQuery: TIBQuery);
    procedure DeleteReference(const Index: Integer);
    function AddReference(const AReference: TReference): Integer;

    property Reference[Index: Integer]: TReference read GetReference;
  end;

(* где необходимо получить данные подключается этот модуль*)
  TboAttr = class(TComponent)
  private
    FAllReference: Boolean;
    FReferenceList: TStrings;

    procedure SetReferenceList(AReferenceList: TStrings);

  public
    References: TReferenceList;
    OpAnalyze: TStringList;
    CardAnalyze: TStringList;
    AnalyzeList: TAnalyzeList;

    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    function GetAttr(const RefKey, RefValueKey: Integer;
      var AttrKey, AttrSetKey: Integer): Boolean;
    procedure Load;

  published
    property ReferenceList: TStrings read FReferenceList write SetReferenceList;
    property AllReference: Boolean read FAllReference write FAllReference;
  end;

(* ComboBox для заполнения атрибутов ''Множество'' и ''Элемент множества''*)
  TboComboBoxSet = class(TPanel)
  private
    DropDownCheckList: Tgd_dlgChooseAttrElement;

    procedure OnDownClick(Sender: TObject);
    procedure ShowSetDialog(Sender: TObject);
    procedure EditKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure EditKeyPress(Sender: TObject; var Key: Char);
    procedure EditOnChange(Sender: TObject);

  public
    AttrKey: Integer;
    ID: Integer;
    Attribute: TAttrRef;
    DataSource: TDataSource;
    BtnDown: TSpeedButton;
    Edit: TEdit;
    ElementList: TStringList;

    procedure ShowControls;
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

  end;

(* себя (своего справочника) данные из компонента boAttr*)
  TboInputAttribute = class(TScrollBox)
  private
    FDataSource: TDataSource;
    FControlLeft: Integer;
    FBlobHeigth: Integer;
    FControlWidth: Integer;
    Reference: TReference;

    procedure SetDataSource(ADataSource: TDataSource);
    procedure ImageDblClick(Sender: TObject);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    procedure MakeFields(RefID, ID: Integer);
    function TestSave(const Focus: Boolean): Boolean;
    function Save: Boolean;

  published
    property DataSource: TDataSource read FDataSource write SetDataSource;
    property ControlLeft: Integer read FControlLeft write FControlLeft;
    property ControlWidth: Integer read FControlWidth write FControlWidth;
    property BlobHeigth: Integer read FBlobHeigth write FBlobHeigth;
  end;

implementation

end.

unit gd_AttrComboBox;

interface

type
(* ComboBox для заполнения атрибутов ''Множество'' и ''Элемент множества''*)
  TgsDBComboBoxAttr = class(TCustomComboBox)
  private
    FDataLink: TFieldDataLink;
    FPaintControl: TPaintControl;
    FibsqlList: TIBSQL;
    FAttrKey: Integer;
    FFullQry: Boolean;
    FValueID: Integer;
    FDropDowning: Boolean;
    FDialogType: Integer;
    message CM_EXIT;

    function GetDataField: string;
    function GetDataSource: TDataSource;
    procedure SetDataField(const Value: string);
    procedure SetDataSource(Value: TDataSource);
    procedure CompileQry;
    procedure DataChange(Sender: TObject);
    procedure CMExit(var Message: TCMExit);
    procedure SetAttrKey(Value: Integer);

  protected
    procedure Loaded;
    procedure DropDown;
    procedure Change;
    procedure KeyDown(var Key: Word; Shift: TShiftState);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;


    property AttrKey: Integer read FAttrKey write SetAttrKey;
    property ValueID: Integer read FValueID;
    property DialogType: Integer read FDialogType write FDialogType;

  published
    property DataField: string read GetDataField write SetDataField;
    property DataSource: TDataSource read GetDataSource write SetDataSource;
  end;

  TgsComboBoxAttr = class(TCustomComboBox)
  private
    FBase: TIBBase;
    FPaintControl: TPaintControl;
    FibsqlList: TIBSQL;
    FAttrKey: Integer;
    FFullQry: Boolean;
    FValueID: Integer;
    FDropDowning: Boolean;
    FDialogType: Integer;
    FUserAttr: Boolean;
    FTableName: String;
    FFieldName: String;
    FPrimaryName: String;
    message CM_EXIT;

    function GetDatabase: TIBDatabase;
    function GetTransaction: TIBTransaction;
    procedure SetDatabase(Value: TIBDatabase);
    procedure SetTransaction(Value: TIBTransaction);
    procedure CompileQry;
    procedure DataChange(Sender: TObject);
    procedure CMExit(var Message: TCMExit);
    procedure SetAttrKey(Value: Integer);
    procedure SetValueID(Value: Integer);

  protected
    procedure Loaded;
    procedure DropDown;
    procedure Change;
    procedure KeyDown(var Key: Word; Shift: TShiftState);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;


    property UserAttr: Boolean read FUserAttr write FUserAttr;
    property TableName: String read FTableName write FTableName;
    property FieldName: String read FFieldName write FFieldName;
    property PrimaryName: String read FPrimaryName write FPrimaryName;
    property AttrKey: Integer read FAttrKey write SetAttrKey;
    property ValueID: Integer read FValueID write SetValueID;
    property DialogType: Integer read FDialogType write FDialogType;
    property Text;

  published
    property Database: TIBDatabase read GetDatabase write SetDatabase;
    property Transaction: TIBTransaction read GetTransaction
                                          write SetTransaction;
    property OnEnter;
    property OnExit;
  end;

  TgsComboBoxAttrSet = class(TComboBox)
  private
    FBase: TIBBase;
    FPaintControl: TPaintControl;
    FibsqlList: TIBSQL;
    FAttrKey: Integer;
    FFullQry: Boolean;
    FDialogType: Integer;
    FUserAttr: Boolean;
    FValueID: TStrings;
    FDroping: Boolean;
    FTableName: String;
    FFieldName: String;
    FPrimaryName: String;
    FItemList: TfrmSelectSet;

    procedure CompileQry;
    function GetDatabase: TIBDatabase;
    function GetTransaction: TIBTransaction;
    procedure SetDatabase(Value: TIBDatabase);
    procedure SetTransaction(Value: TIBTransaction);
    procedure DataChange(Sender: TObject);
    procedure SetAttrKey(Value: Integer);
    procedure SetValueID(Value: TStrings);

  protected
    procedure Loaded;
    procedure DropDown;
    procedure KeyDown(var Key: Word; Shift: TShiftState);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    procedure ValueIDChange(Sender: TObject);

    property UserAttr: Boolean read FUserAttr write FUserAttr;
    property TableName: String read FTableName write FTableName;
    property FieldName: String read FFieldName write FFieldName;
    property PrimaryName: String read FPrimaryName write FPrimaryName;
    property AttrKey: Integer read FAttrKey write SetAttrKey;
    property DialogType: Integer read FDialogType write FDialogType;
    property ValueID: TStrings read FValueID write SetValueID;

  published
    property Database: TIBDatabase read GetDatabase write SetDatabase;
    property Transaction: TIBTransaction read GetTransaction
                                          write SetTransaction;
  end;

implementation

end.

unit gd_dlgAttrElement_unit;

interface

type
  Tgd_dlgAttrElement = class(TForm)
  private
    FParent: Integer;
    FAttrKey: Integer;

  public
    Label1: TLabel;
    Image1: TImage;
    Bevel1: TBevel;
    dbeName: TDBEdit;
    btnOk: TButton;
    Button2: TButton;
    dsAttrSet: TDataSource;
    qryAttrSet: TIBQuery;
    qryNewAttrSet: TIBQuery;
    ibuAttrSet: TIBUpdateSQL;
    cbDisabled: TCheckBox;
    qryAttribute: TIBQuery;
    ibsqlDelete: TIBSQL;
    qryChildren: TIBQuery;
    Button3: TButton;
    ActionList1: TActionList;
    aNew: TAction;
    btnAccess: TButton;
    boAccess: TboAccess;
    KeyList: TStringList;
    Text: String;

    procedure btnOkClick(Sender: TObject);
    procedure aNewExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnAccessClick(Sender: TObject);
    function AddElement(const AnAttrKey: Integer): Boolean;
    function AddElement(const AnAttrKey: Integer; const AParent: Integer): Boolean;
    function EditElement(const AKey: Integer): Boolean;
    function EditElement(const ARefValueKey: Integer; const AnAttrKey: Integer): Boolean;
    function DeleteElement(const AKey: Integer): Boolean;
    function DeleteElement(const ARefValueKey: Integer; const AnAttrKey: Integer): Boolean;
    procedure AddNextElement;
  end;

implementation

end.

unit gd_dlgAttr_unit;

interface

type
  Tgd_dlgAttr = class(TForm)

  public
    Bevel2: TBevel;
    Image5: TImage;
    Label2: TLabel;
    Label1: TLabel;
    dbeName: TDBEdit;
    dsAttr: TDataSource;
    qryAttr: TIBQuery;
    qryNewAttr: TIBQuery;
    ibuAttr: TIBUpdateSQL;
    Label3: TLabel;
    dbeShortName: TDBEdit;
    Label4: TLabel;
    dbeDescription: TDBEdit;
    Label5: TLabel;
    cbAttrType: TComboBox;
    lbSup1: TLabel;
    edSup1: TEdit;
    lbSup2: TLabel;
    edSup2: TEdit;
    Bevel1: TBevel;
    btnOK: TButton;
    btnCancel: TButton;
    cbReference: TComboBox;
    ibsqlReference: TIBSQL;
    ibsqlInsert: TIBSQL;
    chbBigRef: TCheckBox;
    dbchbDisabled: TDBCheckBox;
    Button1: TButton;
    ActionList1: TActionList;
    aNew: TAction;
    inGroup: Integer;
    OldValue: String;
    KeyList: TStringList;

    procedure cbAttrTypeChange(Sender: TObject);
    procedure dbeFieldNameEnter(Sender: TObject);
    procedure edSup1Exit(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure edSup2Exit(Sender: TObject);
    procedure AddSetRef(Const AnAttrKey: Integer; Const ARefKey: Integer);
    procedure aNewExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    function AddAttr: Boolean;
    function EditAttr(AKey: Integer): Boolean;
    procedure ShowNewParam;
    procedure ShowOldParam;
  end;

implementation

end.

unit gd_dlgCardAccount_unit;

interface

type
  Tgd_dlgCardAccount = class(TForm)

  public
    btnOK: TButton;
    btnCancel: TButton;
    dsAccount: TDataSource;
    qryAccount: TIBQuery;
    ibuAccount: TIBUpdateSQL;
    boAccess: TboAccess;
    dbeName: TDBEdit;
    Label1: TLabel;
    Image3: TImage;
    Bevel3: TBevel;
    Label2: TLabel;
    Label3: TLabel;
    dbeShortName: TDBEdit;
    sbAnalyze: TScrollBox;
    Label4: TLabel;
    dbrgTypeAccount: TDBRadioGroup;
    Bevel1: TBevel;
    dbcbMulyCurr: TDBCheckBox;
    dbcbOffBalance: TDBCheckBox;
    dbcbDisabled: TDBCheckBox;
    btnNew: TButton;
    alNew: TActionList;
    aNew: TAction;
    qryNewAccount: TIBSQL;
    Parent, TypeCard: Integer;
    Name: String;
    KeyList: TStringList;

    procedure btnOKClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure aNewExecute(Sender: TObject);
    procedure AppendCard;
    function AddAccount(const AParent, ATypeCard: Integer; const AName: String): Integer;
    function EditAccount(Key: Integer): Boolean;
  end;

implementation

end.

unit gd_dlgChooseAttrElement_unit;

interface

type
  Tgd_dlgChooseAttrElement = class(TForm)
  private
    FAttrkey: Integer;
    CurrentItem: Integer;
    ChangeNode: Boolean;
    FindFirst: Boolean;
    FindPos: Integer;

    procedure ViewSetTree(Const AnAttrKey: Integer);
    function FindNode(var AStartPos: Integer; Const AText: String; Const AFindForward: Boolean;
                  Const AMatchCase: Boolean; Const AWholeWord: Boolean): TTreeNode;

  public
    Panel3: TPanel;
    Panel1: TPanel;
    Panel2: TPanel;
    pmListView: TPopupMenu;
    N1: TMenuItem;
    miDelete: TMenuItem;
    Panel4: TPanel;
    btnOK: TButton;
    btnCancel: TButton;
    tvSetElements: TTreeView;
    ImageList1: TImageList;
    miAddElement: TMenuItem;
    miAddSubElement: TMenuItem;
    N6: TMenuItem;
    miSelectAll: TMenuItem;
    miDeselectAll: TMenuItem;
    miEdit: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    fdElement: TFindDialog;
    SetElement: Boolean;
    Attribute: TObject;

    procedure miEditClick(Sender: TObject);
    procedure miDeleteClick(Sender: TObject);
    procedure tvSetElementsMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure tvSetElementsClick(Sender: TObject);
    procedure miAddElementClick(Sender: TObject);
    procedure miAddSubElementClick(Sender: TObject);
    procedure tvSetElementsKeyPress(Sender: TObject; var Key: Char);
    procedure miSelectAllClick(Sender: TObject);
    procedure miDeselectAllClick(Sender: TObject);
    procedure N3Click(Sender: TObject);
    procedure fdElementFind(Sender: TObject);
    procedure fdElementShow(Sender: TObject);
    procedure SetupDialog(Const AnAttrKey: Integer);
    function GetSet(var AList: TStringList): boolean;
  end;

implementation

end.

unit gd_dlgEntryType_unit;

interface

type
  Tgd_dlgEntryType = class(TForm)

  public
    Label1: TLabel;
    Image3: TImage;
    Bevel3: TBevel;
    Label2: TLabel;
    Label3: TLabel;
    btnOK: TButton;
    btnCancel: TButton;
    dbeExpression: TDBEdit;
    dsEntryType: TDataSource;
    qryEntryType: TIBQuery;
    ibuEntryType: TIBUpdateSQL;
    boAccess: TboAccess;
    Label4: TLabel;
    Label5: TLabel;
    dbeExpressionCurr: TDBEdit;
    Label6: TLabel;
    dbmComment: TDBMemo;
    sbDebitAnalyze: TScrollBox;
    sbCreditAnalyze: TScrollBox;
    edDebit: TEdit;
    edCredit: TEdit;
    btnNew: TButton;
    alNew: TActionList;
    aNew: TAction;
    Bevel1: TBevel;
    Button1: TButton;
    qryNewEntryType: TIBSQL;
    qrySearchCardAccount: TIBSQL;
    qryGetCard: TIBSQL;
    KeyList: TStringList;
    TrTypeKey: Integer;

    procedure edDebitExit(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure aNewExecute(Sender: TObject);
    procedure AppendEntryType;
    function AddEntryType(const AnTrTypeKey: Integer): Integer;
    function EditEntryType(Key: Integer): Boolean;
    procedure ShowAnalyze(const ADebit, AnEdit: Boolean);
  end;

implementation

end.

unit gd_dlgGroupAccount_unit;

interface

type
  Tgd_dlgGroupAccount = class(TForm)

  public
    btnOK: TButton;
    btnCancel: TButton;
    dsGroup: TDataSource;
    qryGroup: TIBQuery;
    ibuGroupAccount: TIBUpdateSQL;
    boAccess: TboAccess;
    dbeName: TDBEdit;
    Label1: TLabel;
    Image3: TImage;
    Bevel3: TBevel;
    Label2: TLabel;
    Label3: TLabel;
    dbeShortName: TDBEdit;
    btnNew: TButton;
    Bevel1: TBevel;
    alNew: TActionList;
    aNew: TAction;
    qryNewGroup: TIBSQL;
    KeyList: TStringList;
    Parent: Integer;

    procedure btnOKClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure aNewExecute(Sender: TObject);
    procedure AppendGroup;
    function AddGroup(const AParent: Integer): Integer;
    function EditGroup(Key: Integer): Boolean;
  end;

implementation

end.

unit gd_dlgPlanAccount_unit;

interface

type
  Tgd_dlgPlanAccount = class(TForm)

  public
    btnOK: TButton;
    btnCancel: TButton;
    dsCardAccount: TDataSource;
    qryPlan: TIBQuery;
    ibuCardAccount: TIBUpdateSQL;
    boAccess: TboAccess;
    dbeName: TDBEdit;
    Label1: TLabel;
    Image3: TImage;
    Bevel3: TBevel;
    Label2: TLabel;
    cbActiveCard: TCheckBox;
    Label3: TLabel;
    dbeShortName: TDBEdit;
    btnNew: TButton;
    Bevel1: TBevel;
    alNew: TActionList;
    aNew: TAction;
    qryNewPlan: TIBSQL;
    KeyList: TStringList;

    procedure btnOKClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure aNewExecute(Sender: TObject);
    procedure AppendPlan;
    function AddPlan: Integer;
    function EditPlan(Key: Integer): Boolean;
  end;

implementation

end.

unit GReference_unit;

interface

type
  TForm1 = class(TForm)
  end;

implementation

end.

unit MainForm_unit;

interface

type
  TMainForm = class(TForm)

  public
    Button1: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    Button6: TButton;
    Button7: TButton;
    Button8: TButton;
    boTransaction1: TboTransaction;
    Button15: TButton;
    Button16: TButton;
    DBGrid1: TDBGrid;
    DataSource1: TDataSource;
    IBTable1: TIBTable;
    Button17: TButton;
    Button2: TButton;
    gsComboBoxAttr1: TgsComboBoxAttr;
    TrTypeKey: Integer;

    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure Button16Click(Sender: TObject);
    procedure Button15Click(Sender: TObject);
    procedure Button17Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure gsComboBoxAttr1Enter(Sender: TObject);
  end;

implementation

end.

unit GUDFlib;

interface

type
implementation

end.

unit Debugger;

interface

type
implementation

end.

unit UDFLib;

interface

type
implementation

end.

unit dlgArchiveJournal_unit;

interface

type
  TdlgArchiveJournal = class(TForm)

  public
    btnAction: TButton;
    btnCancel: TButton;
    pnlPanel: TPanel;
    chbxAllRecords: TCheckBox;
    Label1: TLabel;
    edDays: TEdit;
    Label2: TLabel;
    ActionList1: TActionList;
    actArchive: TAction;
    sdArchive: TSaveDialog;
    chbDelete: TCheckBox;
    udDays: TUpDown;
    btnHelp: TButton;
    Bevel1: TBevel;
    Bevel2: TBevel;
    Label3: TLabel;
    edListSeparator: TEdit;
    qryArchive: TIBQuery;

    procedure actArchiveExecute(Sender: TObject);
    function DeleteRecord(ADate: String): boolean;
    function ArchiveRecord(ADate: String): boolean;
    procedure chbxAllRecordsClick(Sender: TObject);
  end;

implementation

end.

unit dlgLogFilter_unit;

interface

type
  TdlgLogFilter = class(TForm)

  public
    alFilter: TActionList;
    actFirstEvent: TAction;
    actFirstEventDate: TAction;
    actLastEvent: TAction;
    actLastEventDate: TAction;
    actOK: TAction;
    actCancel: TAction;
    actClear: TAction;
    qryTemp: TIBQuery;
    btnOK: TButton;
    btnCancel: TButton;
    btnClear: TButton;
    actSession: TAction;
    actFilter: TAction;
    pnlPanel: TPanel;
    Panel3: TPanel;
    GroupBox: TGroupBox;
    RadioButton1: TRadioButton;
    RadioButton2: TRadioButton;
    dtpStartDate: TDateTimePicker;
    GroupBox2: TGroupBox;
    RadioButton3: TRadioButton;
    RadioButton4: TRadioButton;
    dtpLastDate: TDateTimePicker;
    Panel2: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Bevel1: TBevel;
    CheckBox1: TCheckBox;
    edSession: TEdit;
    cbUser: TComboBox;
    cbComputer: TComboBox;
    cbEvent: TComboBox;
    cbSubSystem: TComboBox;
    Panel1: TPanel;
    edFilter: TEdit;
    rgFilter: TRadioGroup;
    CheckBox2: TCheckBox;
    dtpStartTime: TDateTimePicker;
    dtpLastTime: TDateTimePicker;
    btnHelp: TButton;
    actHelp: TAction;
    EventKey: TStringList;
    UserKey: TStringList;
    SubSystemKey :TStringList;

    procedure actFirstEventExecute(Sender: TObject);
    procedure actFirstEventDateExecute(Sender: TObject);
    procedure actLastEventExecute(Sender: TObject);
    procedure actLastEventDateExecute(Sender: TObject);
    procedure actClearExecute(Sender: TObject);
    procedure actCancelExecute(Sender: TObject);
    procedure actOKExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure edSessionKeyPress(Sender: TObject; var Key: Char);
    procedure actSessionExecute(Sender: TObject);
    procedure actFilterExecute(Sender: TObject);
    procedure dtpStartTimeChange(Sender: TObject);
    procedure dtpLastTimeChange(Sender: TObject);
    procedure StoreFields;
    procedure RestoreFields;
    procedure SetupDialog;
  end;

implementation

end.

unit dlgLogWait_unit;

interface

type
  TdlgLogWait = class(TForm)

  public
    Animate1: TAnimate;
    Label1: TLabel;
    Label2: TLabel;
  end;

implementation

end.

unit dlgViewOperation_unit;

interface

type
  TdlgViewOperation = class(TForm)

  public
    dsViewOperation: TDataSource;
    ibqViewOperation: TIBQuery;
    DBMemo2: TDBMemo;
    DBText17: TDBText;
    Label6: TLabel;
    Bevel1: TBevel;
    DBText12: TDBText;
    DBText13: TDBText;
    DBText16: TDBText;
    DBText18: TDBText;
    DBText14: TDBText;
    DBText15: TDBText;
    DBEdit11: TDBEdit;
    DBEdit10: TDBEdit;
    DBEdit9: TDBEdit;
    DBEdit8: TDBEdit;
    DBEdit7: TDBEdit;
    DBEdit6: TDBEdit;
    btnOk: TButton;
    btnHelp: TButton;
    Label7: TLabel;
    Label1: TLabel;
    Label2: TLabel;
    Label5: TLabel;
    dbedID: TDBEdit;
    dbedSession: TDBEdit;
    dbedSubSystem: TDBEdit;
    dbedOperation: TDBEdit;
    Label8: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    dbedDateTime: TDBEdit;
    dbedUser: TDBEdit;
    dbedComp: TDBEdit;

    procedure SetupDialog(AJournalKey: Integer);
  end;

implementation

end.

unit ev_frmmain;

interface

type
  TfrmEventViewerMainForm = class(TForm)

  public
    MainMenu: TMainMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    qryEvents: TIBQuery;
    dbgOperation: TDBGrid;
    DataSource: TDataSource;
    N5: TMenuItem;
    N6: TMenuItem;
    N7: TMenuItem;
    N8: TMenuItem;
    N9: TMenuItem;
    N10: TMenuItem;
    N11: TMenuItem;
    alEvents: TActionList;
    actQuit: TAction;
    actViewAll: TAction;
    actViewFilter: TAction;
    actViewOld: TAction;
    actViewNew: TAction;
    actFind: TAction;
    actRefresh: TAction;
    qryEventsSESSIONKEY: TIntegerField;
    qryEventsOPERATIONDATE: TDateTimeField;
    qryEventsSNAME: TIBStringField;
    qryEventsONAME: TIBStringField;
    qryEventsCOMPUTERNAME: TIBStringField;
    qryEventsUNAME: TIBStringField;
    N14: TMenuItem;
    actArchieve: TAction;
    qryEventsJOURNALKEY: TIntegerField;
    N4: TMenuItem;
    N12: TMenuItem;
    actViewOperation: TAction;
    N15: TMenuItem;
    N16: TMenuItem;
    N17: TMenuItem;
    N18: TMenuItem;
    N19: TMenuItem;
    actHelp: TAction;
    actStatistic: TAction;
    N13: TMenuItem;
    ibsqlStatistic: TIBSQL;
    N20: TMenuItem;
    actGroupSession: TAction;
    gsFormDataSaver: TgsFormDataSaver;
    EventsQuery : TQueryRec;

    procedure FormCreate(Sender: TObject);
    procedure actQuitExecute(Sender: TObject);
    procedure actViewAllExecute(Sender: TObject);
    procedure actViewFilterExecute(Sender: TObject);
    procedure actViewOldExecute(Sender: TObject);
    procedure actViewNewExecute(Sender: TObject);
    procedure actRefreshExecute(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure actArchieveExecute(Sender: TObject);
    procedure dbgOperationDblClick(Sender: TObject);
    procedure actViewOperationExecute(Sender: TObject);
    procedure actViewOperationUpdate(Sender: TObject);
    procedure actStatisticExecute(Sender: TObject);
    procedure actGroupSessionExecute(Sender: TObject);
    procedure dbgOperationKeyPress(Sender: TObject; var Key: Char);
    procedure RunNewSQL;
  end;

implementation

end.

unit boScriptControl;

interface

type
(* Массив параметров для передачи параметров в функции*)
  TScriptHandler = class()
  end;

  TScriptModule = class()
  end;

  TScriptController = class()
  end;

  TScriptObjectHandler = class()
  end;

  TScriptObjectProvider = class()
  end;

implementation

end.

unit boScriptControl_AddFunction;

interface

type
  TdlgFunctionProperty = class(TForm)
  private
    FScriptNewFunction: TScriptNewFunction;
    FChangeType: TScriptChangeType;
    FScriptText: String;
    FFunctionHandle: IScriptProcedure;

    procedure UpdateModuleList;
    procedure UpdateLanguageList;
    procedure EnableSourceButton;

  public
    btnOk: TButton;
    btnCancel: TButton;
    Bevel1: TBevel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    editFunctionName: TEdit;
    cbLanguage: TComboBox;
    memoComment: TMemo;
    Label4: TLabel;
    cbModule: TComboBox;
    Label5: TLabel;
    btnHelp: TButton;
    btnSource: TButton;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure editFunctionNameExit(Sender: TObject);
    procedure cbModuleExit(Sender: TObject);
    procedure cbLanguageChange(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure btnSourceClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure cbLanguageExit(Sender: TObject);
    constructor Create(AnOwner: TComponent; AScriptNewFunction: TScriptNewFunction);
    destructor Destroy;

    function ShowModal: Integer;

    property ChangeType: TScriptChangeType read FChangeType write FChangeType;
    property FunctionHandle: IScriptProcedure read FFunctionHandle;
    property ScriptText: String read FScriptText;
  end;

implementation

end.

unit boScriptControl_ChooseFunction;

interface

type
  TdlgChooseFunction = class(TForm)
  private
    FScriptControl: TboScriptControl;

    procedure UpdateModuleList;
    procedure UpdateFunctionList(AModule: TScriptModule);
    procedure UpdateCurrentFunction(AFunction: TScriptFunction);

  public
    sbFunctions: TStatusBar;
    pnlMain: TPanel;
    ilToolBar: TImageList;
    alFunction: TActionList;
    actAdd: TAction;
    actEdit: TAction;
    actDelete: TAction;
    actCopy: TAction;
    actActivate: TAction;
    Panel1: TPanel;
    Splitter1: TSplitter;
    Panel2: TPanel;
    Panel3: TPanel;
    Splitter2: TSplitter;
    Panel4: TPanel;
    Panel5: TPanel;
    lvModule: TListView;
    lvFunction: TListView;
    reText: TRichEdit;
    reComment: TRichEdit;
    Panel6: TPanel;
    actSetup: TAction;
    actExit: TAction;
    ilFunction: TImageList;
    ControlBar1: TControlBar;
    tbFunction: TToolBar;
    tbNew: TToolButton;
    tbEdit: TToolButton;
    tbDelete: TToolButton;
    tbCopy: TToolButton;
    ToolButton6: TToolButton;
    tbRun: TToolButton;
    tbSetup: TToolButton;
    ToolButton8: TToolButton;
    tbExit: TToolButton;
    ImageList2: TImageList;
    pmFunction: TPopupMenu;
    miAdd: TMenuItem;
    miEdit: TMenuItem;
    miDelete: TMenuItem;
    miCopy: TMenuItem;
    miSetup: TMenuItem;
    miExit: TMenuItem;
    N7: TMenuItem;
    miShowPanel: TMenuItem;

    procedure actAddExecute(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure actDeleteExecute(Sender: TObject);
    procedure actCopyExecute(Sender: TObject);
    procedure actActivateExecute(Sender: TObject);
    procedure actSetupExecute(Sender: TObject);
    procedure actExitExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure lvModuleSelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
    procedure lvFunctionSelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
    procedure lvModuleGetImageIndex(Sender: TObject; Item: TListItem);
    procedure lvFunctionGetImageIndex(Sender: TObject; Item: TListItem);
    procedure miShowPanelClick(Sender: TObject);
    procedure pmFunctionPopup(Sender: TObject);
    function ShowModal: Integer;

    property ScriptControl: TboScriptControl read FScriptControl write FScriptControl;
  end;

implementation

end.

unit boScriptControl_Evaluate;

interface

type
  TdlgEvaluate = class(TForm)
  private
    FScriptController: TScriptController;

  public
    btnCancel: TButton;
    btnHelp: TButton;
    btnEvaluate: TButton;
    Label1: TLabel;
    Label2: TLabel;
    memoResult: TMemo;
    Bevel1: TBevel;
    cbVariable: TComboBox;

    procedure btnEvaluateClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    constructor Create(AnOwner: TComponent;
      AScriptController: TScriptController);
  end;

implementation

end.

unit boScriptControl_Execute;

interface

type
  TdlgExecute = class(TForm)
  private
    FScriptController: TScriptController;
    FCurrentFunction: TScriptFunction;

    procedure UpdateParams;
    procedure UpdateResult;

  public
    Label1: TLabel;
    Label2: TLabel;
    Bevel1: TBevel;
    btnCancel: TButton;
    btnHelp: TButton;
    btnActivate: TButton;
    memoComment: TMemo;
    Label3: TLabel;
    lblFunctionName: TLabel;
    Label4: TLabel;
    sgParams: TStringGrid;
    memoResult: TMemo;
    btnSource: TButton;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnActivateClick(Sender: TObject);
    procedure btnSourceClick(Sender: TObject);
    constructor Create(AnOwner: TComponent; AFunction: TScriptFunction);
    destructor Destroy;

    function ShowModal: Integer;

    property ScriptController: TScriptController read FScriptController;
    property CurrentFunction: TScriptFunction read FCurrentFunction;
  end;

implementation

end.

unit boScriptControl_ScriptText;

interface

type
  TdlgScriptText = class(TForm)
  private
    FScriptHandler: TScriptHandler;
    FScriptController: TScriptController;
    FEditScriptText: String;
    FdlgEvaluate: TdlgEvaluate;
    FState: TScriptTextEditStates;
    FFindDialog: TFindDialog;
    FReplaceDialog: TreplaceDialog;

    function GetEditScriptText: String;
    procedure SetEditScriptText(const Value: String);
    procedure ReadSettings;
    procedure WriteSettings;
    procedure SetupError;
    procedure DoOnFind(Sender: TObject);
    procedure DoOnReplace(Sender: TObject);

  public
    sbScript: TStatusBar;
    alScript: TActionList;
    actClear: TAction;
    actSaveInFile: TAction;
    actLoadFromFile: TAction;
    actOk: TAction;
    actCancel: TAction;
    actFind: TAction;
    actFindNext: TAction;
    actReplace: TAction;
    actPrint: TAction;
    actRun: TAction;
    actEvaluate: TAction;
    cbMain: TControlBar;
    tbMain: TToolBar;
    tbClear: TToolButton;
    tbSave: TToolButton;
    tbOpen: TToolButton;
    ToolButton12: TToolButton;
    tbRun: TToolButton;
    tbEval: TToolButton;
    ToolButton13: TToolButton;
    tbFind: TToolButton;
    tbFindNext: TToolButton;
    tbReplace: TToolButton;
    ToolButton14: TToolButton;
    tbPrint: TToolButton;
    ToolButton15: TToolButton;
    tbOk: TToolButton;
    tbCancel: TToolButton;
    ilScript: TImageList;
    pnlMain: TPanel;
    memoScriptText: TMemo;
    Panel1: TPanel;
    actFont: TAction;
    tbFont: TToolButton;
    tbColor: TToolButton;
    actColor: TAction;
    ToolButton18: TToolButton;
    pmScript: TPopupMenu;
    miClear: TMenuItem;
    miSaveInFile: TMenuItem;
    miLoadFromFile: TMenuItem;
    N4: TMenuItem;
    miRun: TMenuItem;
    miEvaluate: TMenuItem;
    N7: TMenuItem;
    miFind: TMenuItem;
    miFindNext: TMenuItem;
    miReplace: TMenuItem;
    N11: TMenuItem;
    miFont: TMenuItem;
    miColor: TMenuItem;
    N14: TMenuItem;
    miShowPanel: TMenuItem;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure actClearExecute(Sender: TObject);
    procedure actSaveInFileExecute(Sender: TObject);
    procedure actLoadFromFileExecute(Sender: TObject);
    procedure actRunExecute(Sender: TObject);
    procedure actEvaluateExecute(Sender: TObject);
    procedure actFindExecute(Sender: TObject);
    procedure actFindNextExecute(Sender: TObject);
    procedure actReplaceExecute(Sender: TObject);
    procedure actPrintExecute(Sender: TObject);
    procedure actOkExecute(Sender: TObject);
    procedure actCancelExecute(Sender: TObject);
    procedure actFontExecute(Sender: TObject);
    procedure actColorExecute(Sender: TObject);
    procedure sbScriptResize(Sender: TObject);
    procedure miShowPanelClick(Sender: TObject);
    procedure pmScriptPopup(Sender: TObject);
    constructor Create(AnOwner: TComponent; AScriptHandler: TScriptHandler;
      AScriptController: TScriptController; AState: TScriptTextEditStates);
    function ShowModal: Integer;

    property EditScriptText: String read GetEditScriptText write SetEditScriptText;
    property State: TScriptTextEditStates read FState;
  end;

implementation

end.

unit boScriptControl_Setup;

interface

type
  TdlgSetup = class(TForm)

  public
    btnOk: TButton;
    btnCancel: TButton;
    btnHelp: TButton;
    Bevel1: TBevel;
    Label1: TLabel;
    Label2: TLabel;
    Memo1: TMemo;
    edTime: TEdit;

    procedure btnOkClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  end;

implementation

end.

unit GScriptControl_unit;

interface

type
  TForm1 = class(TForm)

  public
    Button1: TButton;
    boScriptControl1: TboScriptControl;
    boUserFunction1: TboUserFunction;
    IBDatabase1: TIBDatabase;
    IBTransaction1: TIBTransaction;

    procedure Button1Click(Sender: TObject);
  end;

implementation

end.

unit GSScript_project_TLB;

interface

type
implementation

end.

unit GSScript_unit;

interface

type
  TGSScript = class(TForm)
  private
    FWasChanged: Boolean;
    FCurrFile: TFileName;
    FShouldClose: Boolean;
    FCreating: Boolean;

    function CheckSave: Boolean;

  public
    ilToolBar: TImageList;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    tbNew: TToolButton;
    tbOpen: TToolButton;
    tbSave: TToolButton;
    ToolButton4: TToolButton;
    tbRun: TToolButton;
    pnlMain: TPanel;
    Panel1: TPanel;
    ScriptText: TRichEdit;
    tbClose: TToolButton;
    ToolButton8: TToolButton;
    alButtons: TActionList;
    actNew: TAction;
    actOpen: TAction;
    actSave: TAction;
    actRun: TAction;
    actClose: TAction;
    tbSetup: TToolButton;
    actSetup: TAction;
    OpenDlg: TOpenDialog;
    SaveDlg: TSaveDialog;
    sbScript: TStatusBar;
    Scripter: TScriptControl;
    ToolButton1: TToolButton;
    actCheck: TAction;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure actNewExecute(Sender: TObject);
    procedure actOpenExecute(Sender: TObject);
    procedure actSaveExecute(Sender: TObject);
    procedure actRunExecute(Sender: TObject);
    procedure actSetupExecute(Sender: TObject);
    procedure actCloseExecute(Sender: TObject);
    procedure ScriptTextChange(Sender: TObject);
    procedure ScripterError(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure actCheckExecute(Sender: TObject);
    procedure AddObject(Name: String; TheObject: TAutoObject);
  end;

implementation

end.

unit oContactFilter;

interface

type
  ToContactFilter = class(TObject)
  private
    FFilter: TboQueryFilter;
    FFilterData: TFilterData;
    FLogIn: TboLogIn;
    FContact: TIBQuery;
    FCurrContact: ToContact;

    function GetBof: Boolean;
    function GetEof: Boolean;
    function GetID: Integer;
    function GetContact: ToContact;

  public
    constructor Create(ALogIn: TboLogIn);
    destructor Destroy;

    procedure AddCondition(FieldName, Value1, Value2: String; FieldType, ConditionType: Integer);
    procedure ClearConditionList;
    procedure Open;
    procedure Close;
    procedure First;
    procedure Last;
    procedure Next;
    procedure Prior;
    procedure Commit;
    procedure Rollback;

    property Eof: Boolean read GetEof;
    property Bof: Boolean read GetBof;
    property Id: Integer read GetID;
    property Contact: ToContact read GetContact;
  end;

  ToContact = class(TObject)
  private
    FContactFilter: ToContactFilter;
    FCurrentContact: TIBDataSet;
    FContactID: Integer;

    function GetName: String;
    procedure SetName(const Value: String);
    function GetCity: String;
    procedure SetCity(const Value: String);
    function GetAddress: String;
    procedure SetAddress(const Value: String);

  public
    constructor Create(AContactFilter: ToContactFilter; AContactID: Integer);
    destructor Destroy;

    procedure Edit;
    procedure Post;
    procedure Commit;
    procedure Rollback;

    property ID: Integer read FContactID;
    property Name: String read GetName write SetName;
    property City: String read GetCity write SetCity;
    property Address: String read GetAddress write SetAddress;
  end;

implementation

end.

unit Runner;

interface

type
  TForm1 = class(TForm)

  public
    Button1: TButton;
    boLogin1: TboLogin;
    gsIBDatabase1: TgsIBDatabase;
    IBTransaction1: TIBTransaction;
    boScriptControl1: TboScriptControl;
    boUserFunction1: TboUserFunction;

    procedure Button1Click(Sender: TObject);
    procedure boScriptControl1CreateObject(Sender: TObject;
      Handler: TScriptObjectHandler);
    procedure FormCreate(Sender: TObject);
  end;

implementation

end.

unit SCoContact;

interface

type
  TSCoContact = class(TAutoObject, ISCoContact)
  private
    FContact: ToContact;

  protected
    function Get_Address: WideString;
    function Get_City: WideString;
    function Get_ID: Integer;
    function Get_Name: WideString;
    procedure Edit;
    procedure Post;
    procedure Commit;
    procedure Rollback;
    procedure Set_Address(const Value: WideString);
    procedure Set_City(const Value: WideString);
    procedure Set_Name(const Value: WideString);

  public
    constructor Create(AContact: ToContact);
    destructor Destroy;

  end;

implementation

end.

unit SCoContactFilter;

interface

type
  TSCoContactFilter = class(TAutoObject, ISCoContactFilter)
  private
    FContactFilter: ToContactFilter;

  protected
    function Get_Bof: WordBool;
    function Get_Eof: WordBool;
    function Get_Id: Integer;
    function Get_Contact: ISCoContact;
    procedure AddCondition(const AFieldName, AConditionData1,
      AConditionData2: WideString; AConditionType, AFieldType: Integer);
    procedure ClearConditionList;
    procedure Open;
    procedure Close;
    procedure Commit;
    procedure Rollback;
    procedure First;
    procedure Last;
    procedure Next;
    procedure Prior;

  public
    constructor Create(AContactFilter: ToContactFilter);
    destructor Destroy;

  end;

implementation

end.

unit gd_security;

interface

type
  TboLogin = class(TComponent)
  private
    FDatabase: TIBDatabase;
    FParams: TStrings;
    FLogInCancelled: Boolean;
    FEventTransaction: TIBTransaction;
    FEventSQL: TIBQuery;
    FIBName: String;
    FIBPassw: String;
    FUserKey: Integer;
    FUserName: String;
    FStartTime: TDateTime;
    FSessionKey: Integer;
    FSubSystemKey: Integer;
    FSubSystemName: String;
    FGroupName: String;
    FChangePass: Boolean;
    FLoggedIn: Boolean;
    FDisconRec: Boolean;
    FDBVersion: String;
    FDesiredDBVersion: String;
    FDBReleaseDate: TDateTime;
    FDBVersionID: Integer;
    FDBVersionComment: String;
    FIngroup: Integer;
    FVersionString: String;
    FEnableRegistry: Boolean;
    FComputerName: String;
    FBeforeDisconnect: TNotifyEvent;
    FAuditLevel: TAuditLevel;
    FAuditCache: Integer;
    FAuditMaxDays: Integer;
    FUseTransaction: Boolean;
    FCompanyKey: Integer;

    procedure SetDatabase(const Value: TIBDatabase);
    procedure SetParams(const Value: TStrings);
    procedure SetSubSystem(const Value: Integer);
    function GetActive: Boolean;
    function GetDatabaseName: TFileName;
    function GetCharset: String;
    function GetSessionDuration: TDateTime;
    function GetAdmin: Boolean;
    procedure PrepareNewDatabase;
    function StartConnect: Boolean;
    procedure StartDatabase;
    procedure ShowConnectionProp;
    function GetAuditCache: Integer;
    function GetAuditLevel: TAuditLevel;
    function GetAuditMaxDays: Integer;
    function LoadServerNameFromParamStr: String;

  protected
    procedure Loaded;
    procedure Notification(AComponent: TComponent; Operation: TOperation);
    function CheckConnectionParams: Boolean;
    procedure DoBeforeDisconnect(Sender: TObject);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    function Login: Boolean;
    function Logoff: Boolean;
    function ExistCompany: Boolean;
    function ChooseFirm: Boolean;
    procedure InitDatabase(DB: TIBDatabase);

    property SessionDuration: TDateTime read GetSessionDuration;
    property UserKey: Integer read FUserKey;
    property ComputerName: String read FComputerName;
    property Ingroup: Integer read FIngroup;
    property UserName: String read FUserName;
    property UserAdmin: Boolean read GetAdmin;
    property IBName: String read FIBName;
    property IBPassword: String read FIBPassw;
    property StartTime: TDateTime read FStartTime;
    property ChangePass: Boolean read FChangePass write FChangePass;
    property SessionKey: Integer read FSessionKey;
    property CompanyKey: Integer read FCompanyKey;
    property SubSystemName: String read FSubSystemName;
    property Active: Boolean read GetActive;
    property LogInCancelled: Boolean read FLogInCancelled;
    property DatabaseName: TFileName read GetDatabaseName;
    property CharSet: String read GetCharset;
    property Logined: Boolean read FLoggedIn;
    property DBVersion: String read FDBVersion stored False;
    property DBReleaseDate: TDateTime read FDBReleaseDate stored False;
    property DBVersionID: Integer read FDBVersionID stored False;
    property DBVersionComment: String read FDBVersionComment stored False;
    property AuditLevel: TAuditLevel read GetAuditLevel stored False;
    property AuditCache: Integer read GetAuditCache stored False;
    property AuditMaxDays: Integer read GetAuditMaxDays stored False;
    property SubSystemKey: Integer read FSubSystemKey write SetSubSystem;

  published
    property Database: TIBDatabase read FDatabase write SetDatabase;
    property DesiredDBVersion: String read FDesiredDBVersion write FDesiredDBVersion;
    property Params: TStrings read FParams write SetParams stored False;
    property UseTransaction: Boolean read FUseTransaction write
      FUseTransaction;
  end;

  TboAccess = class(TComponent)
  private
    FDataSetList: TStringList;
    OldOnCreateForm: TNotifyEvent;
    FibtrTable: TIBTransaction;
    FibtblTable: TIBTable;
    FibtrOperation: TIBTransaction;
    FibtblOperation: TIBTable;

    procedure DoOnCreateForm(Sender: TObject);
    procedure DoBeforeOpenTable(DataSet: TDataSet);
    procedure DoBeforeOpenQuery(DataSet: TDataSet);
    procedure DoBeforeOpenDataSet(DataSet: TDataSet);
    procedure DoBeforeInsertQuery(DataSet: TDataSet);
    procedure DoBeforeEditQuery(DataSet: TDataSet);
    procedure DoBeforeDeleteQuery(DataSet: TDataSet);
    procedure DoBeforeInsertTable(DataSet: TDataSet);
    procedure DoBeforeEditTable(DataSet: TDataSet);
    procedure DoBeforeDeleteTable(DataSet: TDataSet);
    procedure DoBeforeInsertDataSet(DataSet: TDataSet);
    procedure DoBeforeEditDataSet(DataSet: TDataSet);
    procedure DoBeforeDeleteDataSet(DataSet: TDataSet);
    procedure SetDataSetList(const Value: TStringList);
    function CheckLogin: Boolean;
    function CreateTableAccess: Boolean;
    function CreateOperation: Boolean;
    function FreeTableAccess: Boolean;
    function FreeOperation: Boolean;

  protected
    procedure Loaded;

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    function CheckRights(ADataSet: TDataSet;
     const AnAccessLevels: TAccessLevels): Integer;
    function CheckRights(const ATableName: String; const AnId: Integer;
     const AnAccessLevels: TAccessLevels): Integer;
    function CheckRights(const ATableName: String;
     const AnAccessLevels: TAccessLevels): Integer;
    function CheckRights(const AnOperation: Integer): Integer;
    function ChangeRight(ADataSet: TDataSet): Boolean;
    function ChangeRight(var AFull, AChag, AView: Integer; ARight: Byte): Boolean;
    function GetRights(const ATableName: String; const AnId: Integer;
     var AFull, AChag, AView: Integer; var ARight: Byte): Boolean;
    function GetRights(const Operation: Integer): Integer;

  published
    property DataSetList: TStringList read FDataSetList write SetDataSetList;
  end;

(* Невизуальный компанент для зонесения событий в журнал*)
  TboJournal = class(TComponent)
  private
    FDBUser: TibDatabase;
    FRecInBuff: Integer;
    FFile: file of TJournalRec;
    FJournalRec: TJournalRec;
    FFileName: String;
    FOldFileName: String;
    FTempPath: String;
    FDatabase: TibDatabase;
    FTransaction: TibTransaction;
    FQuery: TibQuery;
    FUseCache: Boolean;
    FThreshold: Integer;
    FFirst: Boolean;
    FEnabled: Boolean;

    procedure RecordToBuff;
    procedure RecordToBase;
    procedure SetDatabase(Value: TibDatabase);
    procedure FirstStart;
    procedure SetUseCache(const Value: Boolean);
    procedure SetEnabled(const Value: Boolean);

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    procedure AddRecord(const AnOperation: Integer; const Int1: Integer = 0; const Int2: Integer = 0;
                        const D1: Double = 0.0; const D2: Double = 0.0;
                        const Date1: TDateTime = 0;
                        const Text1: String = '';
                        const BufferLength: Integer = 0;
                        Buffer: Pointer = nil);
    procedure AddRecord(AnIBTransaction: TIBTransaction; const AnOperation: Integer;
                        const Int1, Int2: Integer; const D1, D2: Double;
                        const Date1: TDateTime; const Text1: String;
                        const BufferLength: Integer; Buffer: Pointer);
    function FlushBuffer: Boolean;

  published
    property ibDatabase: TibDatabase read FDBUser write SetDatabase;
    property UseCache: Boolean read FUseCache write SetUseCache
      stored False default True;
    property Threshold: Integer read FThreshold write FThreshold
      default 1000;
    property Enabled: Boolean read FEnabled write SetEnabled
      stored False default True;
  end;

implementation

end.

unit gd_security_dlgChangePass;

interface

type
  TdlgChangePass = class(TForm)

  public
    edPassword: TEdit;
    lblUse: TLabel;
    Label1: TLabel;
    edPasswordDouble: TEdit;
    Label2: TLabel;
    lblUser: TLabel;
    btnOk: TButton;
    btnCancel: TButton;

    procedure btnOkClick(Sender: TObject);
  end;

implementation

end.

unit gd_security_dlgChangeRigth;

interface

type
  TdlgChangeRight = class(TForm)

  public
    edName: TEdit;
    Label1: TLabel;
    btnOk: TButton;
    btnCancel: TButton;
    ActionList1: TActionList;
    pcFull: TPageControl;
    tsFull: TTabSheet;
    tsChag: TTabSheet;
    tsView: TTabSheet;
    ibqryWork: TIBQuery;
    actShow: TAction;
    clbFull: TCheckListBox;
    clbChag: TCheckListBox;
    clbView: TCheckListBox;
    AFull: Integer;
    AChag: Integer;
    AView: Integer;
    ARight: Byte;

    procedure actShowExecute(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure clbFullClickCheck(Sender: TObject);
    procedure clbChagClickCheck(Sender: TObject);
  end;

implementation

end.

unit gd_security_dlgLogIn;

interface

type
  TdlgSecLogIn = class(TForm)

  public
    imgSecurity: TImage;
    pnlLoginParams: TPanel;
    lblUser: TLabel;
    lblPassword: TLabel;
    edPassword: TEdit;
    ActionList: TActionList;
    actLogin: TAction;
    edUser: TEdit;
    spUserLogin: TIBStoredProc;
    ibtSecurity: TIBTransaction;
    Button1: TButton;
    btnCancel: TButton;
    lblSubSystem: TLabel;
    lblSubSystemName: TLabel;
    cbShowProp: TCheckBox;

    procedure actLoginUpdate(Sender: TObject);
    procedure actLoginExecute(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure mbbCancelClick(Sender: TObject);
    procedure mbbEditDataClick(Sender: TObject);
  end;

implementation

end.

unit gd_security_dlgLoginProp;

interface

type
  TdlgSecLoginProp = class(TForm)

  public
    lSubSystem: TLabel;
    lUser: TLabel;
    lGroups: TLabel;
    lSession: TLabel;
    lStartWork: TLabel;
    lDBVersion: TLabel;
    memoDatabaseParams: TMemo;
    lParamsInfo: TLabel;
    Button1: TButton;
  end;

implementation

end.

unit gd_security_OperationConst;

interface

type
implementation

end.

unit gsIBDBase;

interface

type
  TgsIBDatabase = class(TIBDatabase)

  protected
    procedure Loaded;

  public
    constructor Create(AnOwner: TComponent);
    destructor Destroy;


  published
    property Connected stored False default False;
    property SQLDialect stored False default 3;
  end;

implementation

end.

unit MainForm;

interface

type
  TForm1 = class(TForm)

  public
    boLogin: TboLogin;
    gsIBDatabase: TgsIBDatabase;
    IBTable1: TIBTable;
    DataSource1: TDataSource;
    ibTest: TIBQuery;
    boAccess: TboAccess;
    IBTransaction1: TIBTransaction;
    DBGrid1: TDBGrid;
    IBSQL1: TIBSQL;
    IBDataSet1: TIBDataSet;
    DBGrid2: TDBGrid;
    DataSource2: TDataSource;
    DBGrid3: TDBGrid;
    DataSource3: TDataSource;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    Button6: TButton;
    Button7: TButton;
    Button8: TButton;
    Button9: TButton;
    IBUpdateSQL1: TIBUpdateSQL;
    Button10: TButton;
    Button11: TButton;
    IBQuery1: TIBQuery;
    Button12: TButton;
    Button13: TButton;

    procedure FormCreate(Sender: TObject);
    procedure ibTestBeforeOpen(DataSet: TDataSet);
    procedure ibTestBeforeEdit(DataSet: TDataSet);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure Button9Click(Sender: TObject);
    procedure Button10Click(Sender: TObject);
    procedure Button11Click(Sender: TObject);
    procedure IBQuery1BeforeInsert(DataSet: TDataSet);
    procedure Button12Click(Sender: TObject);
    procedure Button13Click(Sender: TObject);
  end;

implementation

end.

unit gd_boDBUpgrade;

interface

type
  TTablePrimaryKey = class(TCollectionItem)
  private
    FTableName, FConstraintName: String;
    FKeyFieldCount: Integer;
    FKeyFields: array[0..15] of String;

    function GetKeyFields(Index: Integer): String;

  public
    constructor Create(ACollection: TCollection);
    procedure Init(const ATableName, AConstraintName: String; const AFields: array of String);
    procedure AddKeyField(const AFieldName: String);
    function AddDDL: String;
    function DropDDL: String;
    function Locate(ATargetTable, ASourceTable: TIBTable): Boolean;
    function Locate(ATargetTable: TIBTable; ASourceTable: TIBSQL): Boolean;

    property TableName: String read FTableName;
    property KeyFieldCount: Integer read FKeyFieldCount;
    property KeyFields[Index: Integer]: String read GetKeyFields;
  end;

  TTablePrimaryKeyClass = class(TObject)

  public
    of TTablePrimaryKey;
    type
  TPrimaryKeys = class(TCollection)
  public
    procedure AddDDL(AStringList: TStringList);

    procedure DropDDL(AStringList: TStringList);
    function Find(const ATableName: String): TTablePrimaryKey;
  end;

  EboDBUpgradeException = class(Exception)
  end;

implementation

end.

unit gd_boDBUpgrade_dlgCheckMessage_unit;

interface

type
  TdlgCheckMessage = class(TForm)

  public
    btnOk: TButton;
    btnCancel: TButton;
    chbNoMore: TCheckBox;
    Panel1: TPanel;
    lbMessage: TLabel;
  end;

implementation

end.

unit gd_boDBUpgrade_dlgUserDisconect_unit;

interface

type
  TdlgUserDisconect = class(TForm)
  private
    UserCount: Integer;
    FIBInfo: TIBDatabaseInfo;
    FServerName: String;
    FUserName: String;
    FPassword: String;
    FProtocol: TProtocol;

    procedure CheckUser;

  public
    lbUsers: TListBox;
    Label1: TLabel;
    Button1: TButton;
    btnOK: TButton;
    tmUserCount: TTimer;
    IBConfigService: TIBConfigService;
    IBBackupService1: TIBBackupService;

    procedure tmUserCountTimer(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    function ShowDialog(AnIBInfo: TIBDatabaseInfo; const AServerName,
             AnUserName, APassword: String; const AProtocol: TProtocol): Integer;
  end;

implementation

end.

unit gd_setup_dlgBegin;

interface

type
  TdlgBeginSetup = class(TForm)

  public
    btnOk: TButton;
    Memo1: TMemo;
    Image1: TImage;
    btnExit: TButton;
    Bevel1: TBevel;
  end;

implementation

end.

unit gd_setup_dlgEnterSysdbaPassword;

interface

type
  TdlgEnterSysdbaPassword = class(TForm)

  public
    edPassword1: TEdit;
    edPassword2: TEdit;
    btnOk: TButton;
    btnCancel: TButton;
    Label1: TLabel;
    Label2: TLabel;
    Memo: TMemo;
    Bevel1: TBevel;

    procedure edPassword1Change(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
  end;

implementation

end.

unit gd_setup_dlgIBInstall_progress;

interface

type
  TdlgIBSetupProgress = class(TForm)

  public
    Label1: TLabel;
    Image1: TImage;
    Bevel1: TBevel;
    btnExit: TButton;
    btnOk: TButton;
    Memo1: TMemo;
    Label2: TLabel;
    ProgressBar: TxProgressBar;
    Label3: TLabel;
    Label4: TLabel;
    lblSourceDir: TLabel;
    lblTargetDir: TLabel;
  end;

implementation

end.

unit gd_setup_dlgInputPassword;

interface

type
  TdlgInputPassword = class(TForm)

  public
    btnOk: TButton;
    btnCancel: TButton;
    Label1: TLabel;
    Label2: TLabel;
    edPassword: TEdit;
    Memo: TMemo;

    procedure edPasswordChange(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
  end;

implementation

end.

unit gd_setup_dlgSetupType;

interface

type
  TdlgSetupType = class(TForm)

  public
    btnOk: TButton;
    Memo1: TMemo;
    Image1: TImage;
    btnExit: TButton;
    Bevel1: TBevel;
    rbServer: TRadioButton;
    rbClient: TRadioButton;
    Label1: TLabel;

    procedure btnExitClick(Sender: TObject);
  end;

implementation

end.

unit gd_setup_main_unit;

interface

type
  TfrmMain = class(TForm)

  public
    IBInstall: TIBInstall;
    IBDatabase: TIBDatabase;
    OpenDialog: TOpenDialog;
    IBTransaction: TIBTransaction;
    ibspGetDBVersion: TIBStoredProc;
    Background: TBackground;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    IBRestoreService: TIBRestoreService;
    Panel1: TPanel;
    mProgress: TMemo;
    boDBUpgrade: TboDBUpgrade;

    function IBInstallStatusChange(Sender: TObject;
      StatusComment: String): TStatusResult;
    procedure boDBUpgradeLogRecord(ASender: TObject;
      const AString: String);
    procedure boDBUpgrade1LogRecord(ASender: TObject;
      const AString: String);
  end;

implementation

end.

unit gd_upgrade_main_unit;

interface

type
  TfrmMain = class(TForm)

  public
    Label1: TLabel;
    Label2: TLabel;
    Button1: TButton;
    Button2: TButton;
    ActionList: TActionList;
    actUpgade: TAction;
    actExit: TAction;
    edSourceArchive: TEdit;
    edTargetDatabase: TEdit;
    Memo: TMemo;
    boUpgrade: TboDBUpgrade;
    edUserName: TEdit;
    edPassword: TEdit;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    edServerName: TEdit;
    Label6: TLabel;
    Bevel1: TBevel;
    Bevel2: TBevel;

    procedure actExitExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure actUpgadeExecute(Sender: TObject);
    procedure boUpgradeLogRecord(ASender: TObject; const AString: String);
    procedure FormDestroy(Sender: TObject);
  end;

implementation

end.

unit Unit1;

interface

type
  TForm1 = class(TForm)

  public
    IBDatabase: TIBDatabase;
    IBTransaction: TIBTransaction;
    IBSQL: TIBSQL;
    IBSQL1: TIBSQL;
    Button1: TButton;
    Button2: TButton;

    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  end;

implementation

end.

unit Unit1;

interface

type
  TForm1 = class(TForm)

  public
    Animate1: TAnimate;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
  end;

implementation

end.

unit bb2000_unit;

interface

type
  TForm1 = class(TForm)

  public
    ibdSource: TIBDatabase;
    ibtrSource: TIBTransaction;
    ibdTarget: TIBDatabase;
    ibtrTarget: TIBTransaction;
    IBSQL1: TIBSQL;
    Button1: TButton;
    IBSQL2: TIBSQL;
    IBSQL3: TIBSQL;
    Label1: TLabel;
    Button2: TButton;
    Button3: TButton;

    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
  end;

implementation

end.

unit MainBlob_unit;

interface

type
  TForm1 = class(TForm)

  public
    IBDatabase2: TIBDatabase;
    IBTable1: TIBTable;
    IBTransaction1: TIBTransaction;

    procedure FormCreate(Sender: TObject);
  end;

implementation

end.

unit MainForm;

interface

type
  TfrmMain = class(TForm)
  private
    FAttrKey: String;
    FAttrRefKey: String;

  public
    edAttrKey: TEdit;
    edAttrRefKey: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    btnStart: TButton;
    lblCount: TLabel;
    ibdbBase: TIBDatabase;
    ibdbBB2000: TIBDatabase;
    ibtrBB2000: TIBTransaction;
    ibtrBase: TIBTransaction;
    ibqryInsCat: TIBQuery;
    ibqrySpecial: TIBQuery;
    ibqryRef: TIBQuery;
    ibqryInsValue: TIBQuery;
    ibqryAttrRefKey: TIBQuery;
    ibsqlFindCompany: TIBSQL;
    Button1: TButton;
    ibqryWork: TIBQuery;

    procedure btnStartClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  end;

implementation

end.

unit test_bof_eof_unit;

interface

type
  TForm1 = class(TForm)

  public
    IBDatabase1: TIBDatabase;
    IBTransaction1: TIBTransaction;
    q: TIBQuery;
    Label1: TLabel;
    Label2: TLabel;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    Button6: TButton;

    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
  end;

implementation

end.

unit test_tree;

interface

type
  TForm1 = class(TForm)

  public
    tv: TTreeView;
    Button1: TButton;
    edName: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    edParent: TEdit;
    Button2: TButton;
    edId: TEdit;
    IBDatabase: TIBDatabase;
    IBTransaction: TIBTransaction;
    Button3: TButton;
    s: TIBSQL;
    Label3: TLabel;
    Label4: TLabel;
    edMoveId: TEdit;
    Button4: TButton;
    Label5: TLabel;
    edMoveParent: TEdit;
    IBTable1: TIBTable;
    DataSource1: TDataSource;
    DBGrid1: TDBGrid;

    procedure Button3Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure DoRecurs(const L, R: Integer; TN: TTreeNode);
    procedure Update;
  end;

implementation

end.

unit test_tree_2;

interface

type
  TForm1 = class(TForm)

  public
    tv: TTreeView;
    Button1: TButton;
    edName: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    edParent: TEdit;
    Button2: TButton;
    edId: TEdit;
    IBDatabase: TIBDatabase;
    IBTransaction: TIBTransaction;
    Button3: TButton;
    s: TIBSQL;
    Label3: TLabel;
    Label4: TLabel;
    edMoveId: TEdit;
    Button4: TButton;
    Label5: TLabel;
    edMoveParent: TEdit;
    IBTable1: TIBTable;
    DataSource1: TDataSource;
    DBGrid1: TDBGrid;
    ibqryTreeParent: TIBQuery;
    ibqryTreeNull: TIBQuery;
    tvParent: TTreeView;
    Label6: TLabel;
    lblC1: TLabel;
    Label8: TLabel;
    lblC2: TLabel;
    Button5: TButton;
    edTable: TEdit;
    Label7: TLabel;
    ibspRestruct: TIBStoredProc;

    procedure Button3Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure tvParentExpanding(Sender: TObject; Node: TTreeNode;
      var AllowExpansion: Boolean);
    procedure Button5Click(Sender: TObject);
    procedure DoRecurs(const L, R: Integer; TN: TTreeNode);
    procedure UpdateTree;
    procedure ShowNullParent;
    procedure ShowParent(const Parent: TTreeNode);
  end;

implementation

end.

unit Unit1;

interface

type
  TForm1 = class(TForm)

  public
    ControlBar1: TControlBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    PopupMenu1: TPopupMenu;
    N1: TMenuItem;
    ToolButton3: TToolButton;
    ToolButton4: TToolButton;
    ToolBar2: TToolBar;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;

    procedure N1Click(Sender: TObject);
  end;

implementation

end.

unit Unit2;

interface

type
  TForm2 = class(TForm)
  end;

implementation

end.

unit Unit3;

interface

type
  TForm3 = class(TForm)

  public
    Image1: TImage;
  end;

implementation

end.

unit Unit4;

interface

type
  TForm4 = class(TForm)

  public
    tv: TTreeView;
    StatusBar1: TStatusBar;
    imgTreeview: TImageList;
    imgToolBarsDisabled: TImageList;
    imgToolBarsEnabled: TImageList;
    imgLargeView: TImageList;
    ControlBar1: TControlBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;

    procedure tvDblClick(Sender: TObject);
  end;

implementation

end.

unit Unit5;

interface

type
  TForm5 = class(TForm)

  public
    Shape27: TShape;
    Shape23: TShape;
    Shape21: TShape;
    Shape19: TShape;
    Shape8: TShape;
    Shape6: TShape;
    Shape4: TShape;
    Shape1: TShape;
    Shape2: TShape;
    Label1: TLabel;
    Shape9: TShape;
    Shape10: TShape;
    Label3: TLabel;
    Shape7: TShape;
    Shape5: TShape;
    Label2: TLabel;
    Shape11: TShape;
    Shape3: TShape;
    Shape12: TShape;
    Shape13: TShape;
    Label4: TLabel;
    Shape14: TShape;
    Shape16: TShape;
    Shape17: TShape;
    Label6: TLabel;
    Shape15: TShape;
    Shape18: TShape;
    Shape20: TShape;
    Label5: TLabel;
    Shape22: TShape;
    Shape24: TShape;
    Shape25: TShape;
    Shape26: TShape;
    Label7: TLabel;
  end;

implementation

end.

unit test_data_pump_unit;

interface

type
  TForm1 = class(TForm)

  public
    IBDatabase: TIBDatabase;
    IBTransaction: TIBTransaction;
    IBTable: TIBTable;
    Button1: TButton;

    procedure Button1Click(Sender: TObject);
  end;

implementation

end.

unit test_tr_unit;

interface

type
  TForm1 = class(TForm)

  public
    IBTransaction1: TIBTransaction;
    IBTransaction2: TIBTransaction;
    IBTable1: TIBTable;
    IBTable2: TIBTable;
    DataSource1: TDataSource;
    DataSource2: TDataSource;
    DBGrid1: TDBGrid;
    DBGrid2: TDBGrid;
    Button1: TButton;
    gsIBDatabase: TgsIBDatabase;
    boLogin: TboLogin;

    procedure Button1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  end;

implementation

end.

unit boTransaction;

interface

type
(* Значение аналитики*)
  TAnalyzeValue = class(TObject)

  public
    AttrKey: Integer;
    AttrSetKey: Integer;
    Name: String;

    procedure Assign(const AnAnalyzeValue: TAnalyzeValue);
    function Compare(NewAnalyzeValue: TAnalyzeValue): Boolean;
  end;

(* Список значений аналитик*)
  TAnalyzeValueList = class(TList)
  private
    function GetAnalyzeValue(Index: Integer): TAnalyzeValue;

  public
    destructor Destroy;

    procedure Assign(const Source: TAnalyzeValueList);
    procedure Clear;
    procedure DeleteAnalyzeValue(const Index: Integer);
    function AddUniqueAnalyzeValue(
      const AnAttrKey, AnAttrsetKey: Integer;
      const AName: String
    ): Integer;
    function AddAnalyzeValue(
      const AnAttrKey, AnAttrsetKey: Integer;
      const AName: String
    ): Integer;
    function AddAnalyzeValue(const AnAttrKey: Integer): Integer;
    function AddAnalyzeValue(const AnAnalyzeValue: TAnalyzeValue): Integer;
    function Compare(NewAnalyzeValueList: TAnalyzeValueList): Boolean;

    property AnalyzeValue[Index: Integer]: TAnalyzeValue read GetAnalyzeValue;
  end;

(* Типовая проводка*)
  TEntryType = class(TObject)

  public
    DebitKey: Integer;
    CreditKey: Integer;
    DebitName: String;
    CreditName: String;
    Expression: String;
    ExpressionCurr: String;
    DebitAnalyze: TAnalyzeValueList;
    CreditAnalyze: TAnalyzeValueList;

    constructor Create;
    destructor Destroy;

    procedure Assign(const AnEntryType: TEntryType);
  end;

(* Список типовых проводок*)
  TEntryTypeList = class(TList)
  private
    function GetEntryType(Index: Integer): TEntryType;

  public
    destructor Destroy;

    procedure Assign(const Source: TEntryTypeList);
    procedure Clear;
    procedure DeleteEntryType(const Index: Integer);
    function AddEntryType(const AnEntryType: TEntryType): Integer;

    property EntryType[Index: Integer]: TEntryType read GetEntryType;
  end;

(* Список типовых операций*)
  TTrTypeList = class(TList)
  private
    function GetTrType(Index: Integer): TTrType;

  public
    destructor Destroy;

    procedure Assign(const Source: TTrTypeList);
    procedure Clear;
    function IndexOfID(const ID: Integer): Integer;
    procedure DeleteTrType(const Index: Integer);
    function AddTrType(const AnTrType: TTrType): Integer;

    property TrType[Index: Integer]: TTrType read GetTrType;
  end;

(* Типовая операция*)
  TTrType = class(TObject)

  public
    ID: Integer;
    Parent: Integer;
    Name: String;
    Main: Boolean;
    VariableList: TVariableList;
    EntryTypeList: TEntryTypeList;
    DefValueList: TAnalyzeValueList;
    expressionsumncu: String;
    expressionsumcurr: String;
    expressioncostncu: String;
    expressioncostcurr: String;
    script: String;

    constructor Create;
    destructor Destroy;

    procedure Assign(const AnTrType: TTrType);
  end;

(* Количественный показатель проводки*)
  TDimensionValue = class(TObject)

  public
    AttrKey, DimensionKey: Integer;
    DimValue: Double;

    procedure Assign(const ADimensionValue: TDimensionValue);
  end;

(* Список количественных показателей проводки*)
  TDimensionValueList = class(TList)
  private
    function GetDimensionValue(Index: Integer): TDimensionValue;

  public
    destructor Destroy;

    procedure Assign(const Source: TDimensionValueList);
    procedure Clear;
    procedure DeleteDimensionValue(const Index: Integer);
    function AddDimensionValue(
      const AnAttrKey, ADimensionKey: Integer;
      const ADimValue: double
    ): Integer;
    function AddDimensionValue(const AnDimensionValue: TDimensionValue): Integer;
    function Compare(NewDimensionValueList: TDimensionValueList): Boolean;
    procedure Update(NewList: TDimensionValueList);

    property DimensionValue[Index: Integer]: TDimensionValue read GetDimensionValue;
  end;

(* Проводка*)
  TEntry = class(TObject)

  public
    id: Integer;
    debitkey: Integer;
    creditkey: Integer;
    debitname: String;
    creditname: String;
    sumncu: double;
    sumcurr: double;
    currkey: INTEGER;
    comment: String;
    DebitAnalyze: TAnalyzeValueList;
    CreditAnalyze: TAnalyzeValueList;
    DimensionValueList: TDimensionValueList;

    constructor Create;
    destructor Destroy;

    procedure Assign(const AnEntry: TEntry);
    procedure SetAnalyze(const EntryType: TEntryType; const VariableList: TVariableList);
    procedure SetAnalyze(const AttrKey, AttrSetKey: Integer;
      const AName: String; const Clearing: Boolean);
    function Compare(NewEntry: TEntry): Boolean;
    function Correct: Boolean;
    procedure GetAnalyzeList(AnalyzeValueList: TAnalyzeValueList; const Clearing: Boolean);
    procedure SetDimension;
  end;

(* Список проводок*)
  TEntryList = class(TList)
  private
    function GetEntry(Index: Integer): TEntry;

  public
    destructor Destroy;

    procedure Assign(const Source: TEntryList);
    procedure Clear;
    function GetIndex(AnID: Integer): Integer;
    procedure DeleteEntry(const Index: Integer);
    function AddEntry(const AnEntry: TEntry): Integer;
    function Compare(NewEntryList: TEntryList): Boolean;

    property Entry[Index: Integer]: TEntry read GetEntry;
  end;

(* Список транзакций*)
  TTransactionList = class(TList)
  private
    function GetTransaction(Index: Integer): TTransaction;

  public
    destructor Destroy;

    procedure Assign(const Source: TTransactionList);
    procedure Clear;
    function GetIndex(const ID: Integer): Integer;
    function GetPosition(const PositionKey: Integer): Integer;
    procedure DeleteTransaction(const Index: Integer);
    function AddTransaction(const AnTransaction: TTransaction): Integer;
    procedure DeleteTransactionID(const ID: Integer);
    procedure DeletePosition(const ID: Integer);
    procedure GetAnalyzeList(AnalyzeValueList: TAnalyzeValueList; const Clearing: Boolean;
      const TrTypeList: TTrTypeList);

    property Transaction[Index: Integer]: TTransaction read GetTransaction;
  end;

(* Операция*)
  TTransaction = class(TObject)

  public
    id: Integer;
    PositionKey: Integer;
    TrTypekey: Integer;
    commitdate: TDate;
    sumNCU: Double;
    sumcurr: Double;
    sumEq: Double;
    costNCU: Double;
    costCurr: Double;
    costEq: Double;
    currkey: Integer;
    EntryList: TEntryList;
    Analyze: TStrings;
    Position: String;
    Finished: Integer;
    SubTransaction: Boolean;
    TransactionList: TTransactionList;

    constructor Create;
    destructor Destroy;

    procedure Assign(const ATransaction: TTransaction);
    function Compare(NewTransaction: TTransaction): Boolean;
    function Correct(TrType: TTrType): Boolean;
    procedure SetAnalyze(const AnalyzeValueList: TAnalyzeValueList;
      const VariableList: TVariableList);
    procedure DivideSumm;
    procedure SetAnalyze(const AttrKey, AttrSetKey: Integer;
      const AName: String; const Clearing: Boolean; const TrTypeList: TTrTypeList);
  end;

  TboTransaction = class(TComponent)
  private
    FDocument: Integer;
    FDocumentType: Integer;
    FDocumentInfo: String;
    xFoCal: TxFoCal;

    procedure AddFoCallVariable;
    procedure SetDocument(ADocument: Integer);

  public
    TrTypeList: TTrTypeList;
    VariableList: TVariableList;
    TransactionList: TTransactionList;
    OldTransactionList: TTransactionList;

    constructor Create(AnOwner: TComponent);
    destructor Destroy;

    procedure DeleteTransaction(const AnID: Integer);
    procedure DeletePosition(const AnID: Integer);
    procedure DeleteAllTransaction;
    procedure DeleteDocument;
    procedure CalcTransaction(Transaction: TTransaction);
    procedure ReadTrType(const ReadEntry: Boolean);
    procedure ReadTransaction;
    procedure ReadData;
    procedure ShowTransaction;
    procedure SetPosition(const AnID: Integer; const APosition: String);
    function SaveData: Boolean;
    function CorrectAll(var CountFinished: Integer): Integer;
    function CorrectAll: Boolean;
    function GetTrType: Integer;
    function GetTrType(var Name: String): Integer;
    function ChooseTrType: Integer;
    function ChooseTrType(const TrTypeKey: Integer): Integer;
    function ChooseTrType(var TrTypeName: string): Integer;
    function ChooseTrType(const TrTypeKey: Integer; var TrTypeName: string): Integer;
    procedure MakeTransaction(Transaction: TTransaction;
      SumNCU, SumCurr, SumEq: Double; CurrKey: Integer; Position: String;
        CommitDate: TDate);
    procedure AddEntry(Transaction: TTransaction; TrType: TTrType;
      SumNCU, SumCurr: Double; CurrKey: Integer);
    function SetTransaction(var ID: Integer; PositionKey, TrTypeKey, CurrKey: Integer; CommitDate: TDate;
      SumNCU, SumCurr, SumEq: Double; Position: String): Boolean;
    procedure GetAnalyzeList(AnalyzeValueList: TAnalyzeValueList; const Clearing: Boolean);
    function SetAnalyze(const Clearing: Boolean): Boolean;
    function SetAnalyze(const AttrKey, AttrSetKey: Integer; const AName: String;
      const Clearing: Boolean): Boolean;

  published
    property Document: Integer
      read FDocument write SetDocument default Def_Document;
    property DocumentType: Integer
      read FDocumentType write FDocumentType default Def_DocumentType;
    property DocumentInfo: String
      read FDocumentInfo write FDocumentInfo;
  end;

implementation

end.

unit dlgBankStatement_unit;

interface

type
  TdlgBankStatement = class(TForm)
  private
    BNAccess: Boolean;
    OldRate: Double;

  public
    dsDocument: TDataSource;
    qryDocument: TIBQuery;
    ibuDocument: TIBUpdateSQL;
    botBankStatement: TboTransaction;
    dsBankStatement: TDataSource;
    qryBankStatement: TIBQuery;
    ibuBankStatement: TIBUpdateSQL;
    alCommon: TActionList;
    actNew: TAction;
    actHelp: TAction;
    alDocument: TActionList;
    actSearch: TAction;
    actProperty: TAction;
    actSave: TAction;
    actAccess: TAction;
    actTransaction: TAction;
    dsBankStatementLine: TDataSource;
    qryBankStatementLine: TIBQuery;
    dsAccount: TDataSource;
    qryAccount: TIBQuery;
    boCurrency: TboCurrency;
    boAccess: TboAccess;
    qryGetCompany: TIBQuery;
    ibuBankStatementLine: TIBUpdateSQL;
    pmBankPaymentLine: TPopupMenu;
    actDelAll: TAction;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    N4: TMenuItem;
    Panel1: TPanel;
    Label1: TLabel;
    Label3: TLabel;
    Label8: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    dbeNumber: TDBEdit;
    xdbeDocumentDate: TxDateDBEdit;
    dblcbAccount: TDBLookupComboBox;
    edRate: TEdit;
    btnSaveRate: TButton;
    cbDisabled: TDBCheckBox;
    dbeDescription: TDBEdit;
    boInputAttribute: TboInputAttribute;
    Panel2: TPanel;
    btnNew: TButton;
    btnOK: TButton;
    btnCancel: TButton;
    btnTransaction: TButton;
    btnAccess: TButton;
    btnHelp: TButton;
    alBankStatementLine: TActionList;
    actFindCompany: TAction;
    actFindAccount: TAction;
    actChooseDocument: TAction;
    actAuto: TAction;
    actAddLine: TAction;
    actDeleteLine: TAction;
    actDeleteAll: TAction;
    actNext: TAction;
    actPrior: TAction;
    actFirst: TAction;
    actLast: TAction;
    dbeCurr: TDBEdit;
    actPost: TAction;
    pnBankStatementLine: TPanel;
    pgLine: TPageControl;
    tsDialog: TTabSheet;
    mmlShortName: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    dbeAccount: TDBEdit;
    dbeBankCode: TDBEdit;
    dbeDocNumber: TDBEdit;
    btnFindCompany: TButton;
    dbeSumNCU: TDBEdit;
    dbeSumCurr: TDBEdit;
    rbDebet: TRadioButton;
    rbCredit: TRadioButton;
    boiaLine: TboInputAttribute;
    btnFindAccount: TButton;
    edCompany: TEdit;
    btnSearchDocument: TButton;
    btnNext: TButton;
    btnPrior: TButton;
    btnFirst: TButton;
    btnEnd: TButton;
    btnAdd: TButton;
    btnDel: TButton;
    btnDeleteAll: TButton;
    dbeDocument: TDBEdit;
    tsList: TTabSheet;
    dbgBankStatementLine: TDBGrid;
    dbeTrTypeKey: TDBEdit;
    btnChangeTrType: TButton;
    actChooseTrType: TAction;
    actDebit: TAction;
    actCredit: TAction;
    qryGetGroup: TIBSQL;
    qryNewBankStatementLine: TIBSQL;
    qryGetAccountCompany: TIBSQL;
    qryGetMainAccount: TIBSQL;
    btnNotCorrect: TButton;
    actNotCorrect: TAction;
    KeyList: TStringList;
    OldCompany: String;

    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnOKClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure qryBankStatementLineAfterInsert(DataSet: TDataSet);
    procedure actDelAllExecute(Sender: TObject);
    procedure actDelAllUpdate(Sender: TObject);
    procedure actAddLineExecute(Sender: TObject);
    procedure actDeleteLineExecute(Sender: TObject);
    procedure actDeleteAllExecute(Sender: TObject);
    procedure actNextExecute(Sender: TObject);
    procedure actPriorExecute(Sender: TObject);
    procedure actFirstExecute(Sender: TObject);
    procedure actLastExecute(Sender: TObject);
    procedure actDeleteLineUpdate(Sender: TObject);
    procedure actDeleteAllUpdate(Sender: TObject);
    procedure actNextUpdate(Sender: TObject);
    procedure actPriorUpdate(Sender: TObject);
    procedure actFirstUpdate(Sender: TObject);
    procedure actLastUpdate(Sender: TObject);
    procedure actFindAccountExecute(Sender: TObject);
    procedure actFindAccountUpdate(Sender: TObject);
    procedure dbeAccountExit(Sender: TObject);
    procedure actChooseDocumentExecute(Sender: TObject);
    procedure actChooseDocumentUpdate(Sender: TObject);
    procedure actDebitUpdate(Sender: TObject);
    procedure actCreditExecute(Sender: TObject);
    procedure actCreditUpdate(Sender: TObject);
    procedure actDebitExecute(Sender: TObject);
    procedure dsBankStatementLineDataChange(Sender: TObject;
      Field: TField);
    procedure qryBankStatementLineAfterPost(DataSet: TDataSet);
    procedure qryBankStatementLineBeforeInsert(DataSet: TDataSet);
    procedure dbeDocNumberExit(Sender: TObject);
    procedure edCompanyEnter(Sender: TObject);
    procedure edCompanyExit(Sender: TObject);
    procedure actFindCompanyExecute(Sender: TObject);
    procedure actFindCompanyUpdate(Sender: TObject);
    procedure actTransactionUpdate(Sender: TObject);
    procedure actSaveExecute(Sender: TObject);
    procedure edRateEnter(Sender: TObject);
    procedure edRateExit(Sender: TObject);
    procedure actChooseTrTypeExecute(Sender: TObject);
    procedure qryBankStatementLineBeforePost(DataSet: TDataSet);
    procedure actTransactionExecute(Sender: TObject);
    procedure dbeDocumentKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure pmBankPaymentLineChange(Sender: TObject; Source: TMenuItem;
      Rebuild: Boolean);
    procedure qryBankStatementLineBeforeDelete(DataSet: TDataSet);
    procedure actNotCorrectExecute(Sender: TObject);
    procedure actNotCorrectUpdate(Sender: TObject);
    procedure AppendBankStatement;
    function AddBankStatement: Integer;
    function EditBankStatement(const Key: Integer): Boolean;
    procedure SetFieldName;
    procedure ChooseDocument;
    procedure FindCompany;
  end;

implementation

end.

unit dlgChooseDimension_unit;

interface

type
  TdlgChooseDimension = class(TForm)

  public
    Image5: TImage;
    Label2: TLabel;
    btnOK: TButton;
    btnCancel: TButton;
    btnHelp: TButton;
    qryDimension: TIBQuery;
    ActionList1: TActionList;
    actHelp: TAction;
    lvDimension: TListView;
    qrySaveDimension: TIBQuery;
    qryDelete: TIBQuery;
    AttrKey: Integer;

    procedure btnOKClick(Sender: TObject);
    function ChooseDimension(AnAttrKey: Integer): Boolean;
  end;

implementation

end.

unit dlgChoosePaymentDocument_unit;

interface

type
  TdlgChoosePaymentDocument = class(TForm)
  private
    procedure ShowDocument;

  public
    Panel1: TPanel;
    btnOK: TButton;
    btnCancel: TButton;
    dbgChooseDocument: TDBGrid;
    dsChooseDocument: TDataSource;
    qryChooseDocument: TIBQuery;
    Panel2: TPanel;
    cbPeriod: TCheckBox;
    xdeStart: TxDateEdit;
    Label1: TLabel;
    xdeEnd: TxDateEdit;
    cbNumber: TCheckBox;
    edNumber: TEdit;
    alDocument: TActionList;
    DocumentTypeList: TStringList;
    Number: String;
    DocumentDate: TDate;
    StartDate: TDate;
    EndDate: TDate;
    CompanyKey: Integer;
    TrTypeKey: Integer;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure xdeStartExit(Sender: TObject);
    procedure xdeEndExit(Sender: TObject);
    procedure edNumberExit(Sender: TObject);
    procedure cbPeriodClick(Sender: TObject);
    procedure cbNumberClick(Sender: TObject);
    function ChooseDocument: Integer;
  end;

implementation

end.

unit dlgChooseTransactionVariable_unit;

interface

type
  TdlgChooseTransactionVariable = class(TForm)

  public
    lvValue: TListView;
    btnOK: TButton;
    btnCancel: TButton;
    ilVariable: TImageList;
    qryTrTypeVariable: TIBSQL;

    procedure lvValueDblClick(Sender: TObject);
    function ChooseVariable(TrTypeKey: Integer): String;
  end;

implementation

end.

unit dlgChooseTrTypeVariable_unit;

interface

type
  TdlgChooseTrTypeVariable = class(TForm)

  public
    lvValue: TListView;
    btnOK: TButton;
    btnCancel: TButton;
    ActionList1: TActionList;
    actOk: TAction;
    ilVariable: TImageList;
    qryTrTypeVariable: TIBSQL;
    qryAttr: TIBSQL;
    VaraibleKey: Integer;
    VariableName: String;
    VariableType: Integer;

    procedure actOkUpdate(Sender: TObject);
    procedure lvValueDblClick(Sender: TObject);
    function ChooseVariable(const TrTypeKey: Integer): Boolean;
  end;

implementation

end.

unit dlgChooseTrType_unit;

interface

type
  TdlgChooseTrType = class(TForm)

  public
    Panel2: TPanel;
    lvTrType: TListView;
    Panel3: TPanel;
    btnOK: TButton;
    btnCancel: TButton;
    alTrType: TActionList;
    actOk: TAction;
    Index: Integer;

    procedure actOkExecute(Sender: TObject);
    procedure actOkUpdate(Sender: TObject);
  end;

implementation

end.

unit dlgDimensionCoeff_unit;

interface

type
  TdlgDimensionCoeff = class(TForm)
  end;

implementation

end.

unit dlgDimension_unit;

interface

type
  TdlgDimension = class(TForm)

  public
    Image5: TImage;
    Label2: TLabel;
    Bevel2: TBevel;
    mmlFullName: TLabel;
    mmlShortName: TLabel;
    Bevel1: TBevel;
    dbeName: TDBEdit;
    dbeShortName: TDBEdit;
    btnNew: TButton;
    btnOK: TButton;
    btnCancel: TButton;
    dsDimension: TDataSource;
    qryDimension: TIBQuery;
    qryNewDimension: TIBQuery;
    ibuDimension: TIBUpdateSQL;
    ActionList1: TActionList;
    actNew: TAction;
    Label1: TLabel;
    dbeMeasure: TDBEdit;
    btnHelp: TButton;
    actHelp: TAction;
    KeyList: TStringList;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure AppendDimension;
    function AddDimension: Integer;
    function EditDimension(AKey: Integer): Boolean;
  end;

implementation

end.

unit dlgDocTransaction_unit;

interface

type
  TdlgDocTransaction = class(TForm)
  private
    procedure SetTransaction(LI: TListItem);
    procedure SetEntry(LI: TListItem);
    procedure ShowEntryList;
    procedure ShowTransaction;

  public
    Panel1: TPanel;
    lvTransaction: TListView;
    Splitter1: TSplitter;
    Panel2: TPanel;
    lvEntry: TListView;
    ActionList1: TActionList;
    actEditTransaction: TAction;
    actEditEntry: TAction;
    pmTransaction: TPopupMenu;
    pmEntry: TPopupMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    ilTransaction: TImageList;
    N3: TMenuItem;
    actSelectAll: TAction;
    actFinished: TAction;
    actErrorTransaction: TAction;
    actOkTransaction: TAction;
    actAnalyze: TAction;
    actEmptyAnalyze: TAction;
    N4: TMenuItem;
    N5: TMenuItem;
    N6: TMenuItem;
    N7: TMenuItem;
    N8: TMenuItem;
    N9: TMenuItem;
    N10: TMenuItem;
    actSpecification: TAction;
    N11: TMenuItem;
    boTransaction: TboTransaction;

    procedure actEditTransactionUpdate(Sender: TObject);
    procedure actEditTransactionExecute(Sender: TObject);
    procedure lvTransactionChange(Sender: TObject; Item: TListItem;
      Change: TItemChange);
    procedure actEditEntryUpdate(Sender: TObject);
    procedure actEditEntryExecute(Sender: TObject);
    procedure actSelectAllExecute(Sender: TObject);
    procedure actErrorTransactionExecute(Sender: TObject);
    procedure actOkTransactionExecute(Sender: TObject);
    procedure actFinishedUpdate(Sender: TObject);
    procedure actFinishedExecute(Sender: TObject);
    procedure actAnalyzeExecute(Sender: TObject);
    procedure actEmptyAnalyzeExecute(Sender: TObject);
    procedure actSpecificationUpdate(Sender: TObject);
    procedure actSpecificationExecute(Sender: TObject);
    procedure Show;
    procedure RefreshTransaction;
  end;

implementation

end.

unit dlgEditVariableValue_unit;

interface

type
  TdlgEditVariableValue = class(TForm)

  public
    lblVariable: TLabel;
    btnOK: TButton;
    btnCancel: TButton;
    qryGetValue: TIBQuery;
    qryList: TIBQuery;
    edValue: TEdit;
    cbValue: TComboBox;
    cbaValue: TgsComboBoxAttr;
    TrTypeVariable: TTrTypeVariable;

    procedure btnOKClick(Sender: TObject);
    function SetValue(const NewTrTypeVariable: TTrTypeVariable): Boolean;
  end;

implementation

end.

unit dlgEntry_unit;

interface

type
  TdlgEntry = class(TForm)
  private
    procedure DimensionOnClick(Sender: TObject);

  public
    Label1: TLabel;
    Image3: TImage;
    Bevel3: TBevel;
    Label2: TLabel;
    btnOK: TButton;
    btnCancel: TButton;
    Label4: TLabel;
    Label6: TLabel;
    sbDebitAnalyze: TScrollBox;
    sbCreditAnalyze: TScrollBox;
    edDebit: TEdit;
    edCredit: TEdit;
    Bevel1: TBevel;
    Label7: TLabel;
    Label9: TLabel;
    Label11: TLabel;
    lbSumNCU: TLabel;
    lbSumCurr: TLabel;
    lbCurr: TLabel;
    mComment: TMemo;
    qrySearchCardAccount: TIBSQL;
    qryGetCard: TIBSQL;
    Entry: TEntry;

    procedure FormCreate(Sender: TObject);
    procedure edDebitExit(Sender: TObject);
    procedure edCreditExit(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    function EditEntry(AnEntry: TEntry): Boolean;
    procedure ShowAnalyze(const ADebit, AnEdit: Boolean);
  end;

implementation

end.

unit dlgPaymentOrder_unit;

interface

type
  TdlgPaymentOrder = class(TForm)
  private
    ReadTrType: Boolean;
    TrAccess: Boolean;

    procedure GetTrType;
    procedure SetCompany(NewCompany: Integer);
    procedure FindCompany;
    procedure AppendPaymentOrder;

  public
    Label1: TLabel;
    dsDocument: TDataSource;
    qryDocument: TIBQuery;
    ibuDocument: TIBUpdateSQL;
    boTransaction: TboTransaction;
    dsPayment: TDataSource;
    qryPayment: TIBQuery;
    ibuPayment: TIBUpdateSQL;
    Bevel1: TBevel;
    btnNew: TButton;
    btnOK: TButton;
    btnCancel: TButton;
    ActionList1: TActionList;
    actNew: TAction;
    actHelp: TAction;
    dbeNumber: TDBEdit;
    Label3: TLabel;
    xdbeDocumentDate: TxDateDBEdit;
    Label4: TLabel;
    ActionList2: TActionList;
    actSearch: TAction;
    actProperty: TAction;
    btnFindCompany: TButton;
    btnNewCompany: TButton;
    btnPropertyCompany: TButton;
    edCompany: TEdit;
    Label5: TLabel;
    Label6: TLabel;
    dblcbPaymentSpec: TDBLookupComboBox;
    Label7: TLabel;
    dblcbCompanyAccount: TDBLookupComboBox;
    Label8: TLabel;
    dblcbAccount: TDBLookupComboBox;
    Label9: TLabel;
    dbeSumNCU: TDBEdit;
    Label10: TLabel;
    dbeSumVatNCU: TDBEdit;
    Label11: TLabel;
    dbeSumCurr: TDBEdit;
    Label12: TLabel;
    dbeSumVatCurr: TDBEdit;
    Label13: TLabel;
    Label14: TLabel;
    edRate: TEdit;
    btnSaveRate: TButton;
    actSave: TAction;
    Label15: TLabel;
    dbmSpecification: TDBMemo;
    cbDisabled: TDBCheckBox;
    Label16: TLabel;
    dbeDescription: TDBEdit;
    Label17: TLabel;
    boInputAttribute: TboInputAttribute;
    btnAccess: TButton;
    btnHelp: TButton;
    actAccess: TAction;
    actDefine: TAction;
    actChooseTrType: TAction;
    dsCompanyAccount: TDataSource;
    qryCompanyAccount: TIBQuery;
    dsAccount: TDataSource;
    qryAccount: TIBQuery;
    dbeServiceDate: TDBEdit;
    dsPaymentSpec: TDataSource;
    qryPaymentSpec: TIBQuery;
    boCurrency: TboCurrency;
    boAccess: TboAccess;
    dsPaymentOrder: TDataSource;
    qryPaymentOrder: TIBQuery;
    ibuPaymentOrder: TIBUpdateSQL;
    dbeCurr: TDBEdit;
    Label18: TLabel;
    edTrType: TEdit;
    btnChooseTrType: TButton;
    btnDefineTrType: TButton;
    qryGetMainAccount: TIBSQL;
    qryGetCompany: TIBQuery;
    qryGetGroup: TIBSQL;
    qryGetTrType: TIBSQL;
    KeyList: TStringList;
    OldText: String;
    OldRate: Double;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure edCompanyExit(Sender: TObject);
    procedure edCompanyEnter(Sender: TObject);
    procedure actSearchExecute(Sender: TObject);
    procedure actSearchUpdate(Sender: TObject);
    procedure actPropertyUpdate(Sender: TObject);
    procedure btnNewCompanyClick(Sender: TObject);
    procedure actPropertyExecute(Sender: TObject);
    procedure actAccessExecute(Sender: TObject);
    procedure actSaveUpdate(Sender: TObject);
    procedure dblcbPaymentSpecKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure actSaveExecute(Sender: TObject);
    procedure edRateEnter(Sender: TObject);
    procedure edRateExit(Sender: TObject);
    procedure actDefineUpdate(Sender: TObject);
    procedure actDefineExecute(Sender: TObject);
    procedure actChooseTrTypeUpdate(Sender: TObject);
    procedure actChooseTrTypeExecute(Sender: TObject);
    procedure dsAccountDataChange(Sender: TObject; Field: TField);
    function AddPaymentOrder: Integer;
    function EditPaymentOrder(const Key: Integer): Boolean;
    function CopyPaymentOrder(const Key: Integer): Integer;
    procedure GetRate;
  end;

implementation

end.

unit dlgPaymentSpec_unit;

interface

type
  TdlgPaymentSpec = class(TForm)

  public
    Image5: TImage;
    Label2: TLabel;
    Bevel2: TBevel;
    mmlFullName: TLabel;
    mmlShortName: TLabel;
    Bevel1: TBevel;
    dbeName: TDBEdit;
    dbeDecription: TDBEdit;
    btnNew: TButton;
    btnOK: TButton;
    btnCancel: TButton;
    btnHelp: TButton;
    dsPaymentSpec: TDataSource;
    qryPaymentSpec: TIBQuery;
    qryNewPaymentSpec: TIBQuery;
    ibuPaymentSpec: TIBUpdateSQL;
    alPaymentSpec: TActionList;
    actNew: TAction;
    actHelp: TAction;
    KeyList: TStringList;

    procedure btnOKClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure AppendPaymentSpec;
    function AddPaymentSpec: Integer;
    function EditPaymentSpec(AKey: Integer): Boolean;
  end;

implementation

end.

unit dlgSetAnalyze_unit;

interface

type
  TdlgSetAnalyze = class(TForm)

  public
    Bevel1: TBevel;
    btnOK: TButton;
    btnCancel: TButton;
    Bevel2: TBevel;
    Label5: TLabel;
    Image5: TImage;
    sbAnalyze: TScrollBox;
    AnalyzeValueList: TAnalyzeValueList;

    procedure btnOKClick(Sender: TObject);
    function SetAnalyze(const AnAnalyzeValueList: TAnalyzeValueList): Boolean;
  end;

implementation

end.

unit dlgSpecTransactionList_unit;

interface

type
  TdlgSpecTransactionList = class(TForm)
  private
    procedure CalcSumm;

  public
    lvTransaction: TListView;
    Panel1: TPanel;
    btnOK: TButton;
    btnCancel: TButton;
    Panel2: TPanel;
    Label1: TLabel;
    btnAdd: TButton;
    lbSumNCU: TLabel;
    Label3: TLabel;
    lbSumCurr: TLabel;
    btnDelete: TButton;
    pmTransaction: TPopupMenu;
    N2: TMenuItem;
    N10: TMenuItem;
    N11: TMenuItem;
    alSpecTransaction: TActionList;
    ilTransaction: TImageList;
    actAdd: TAction;
    actDelete: TAction;
    actOk: TAction;
    qryNewTransaction: TIBQuery;
    Label2: TLabel;
    lbCostNCU: TLabel;
    Label5: TLabel;
    lbCostCurr: TLabel;
    btnEdit: TButton;
    actEdit: TAction;
    boTransaction: TboTransaction;
    CurrentTransaction: TTransaction;

    procedure actOkUpdate(Sender: TObject);
    procedure actAddExecute(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure actDeleteUpdate(Sender: TObject);
    procedure actEditUpdate(Sender: TObject);
    procedure actDeleteExecute(Sender: TObject);
    function MakeSpecification(ATransaction: TTransaction): Boolean;
  end;

implementation

end.

unit dlgSpecTransaction_unit;

interface

type
  TdlgSpecTransaction = class(TForm)
  private
    OldValue: Double;

    procedure MakeTrType;

  public
    Label1: TLabel;
    cbTrType: TComboBox;
    Label2: TLabel;
    edSumNCU: TEdit;
    Label3: TLabel;
    edCostNCU: TEdit;
    Label4: TLabel;
    edSumCurr: TEdit;
    Label5: TLabel;
    edCostCurr: TEdit;
    btnOK: TButton;
    btnCancel: TButton;
    Bevel1: TBevel;
    KeyList: TStringList;
    Transaction: TTransaction;
    boTransaction: TboTransaction;
    TrTypeKey: Integer;
    SumNCU, SumCurr, CostNCU, CostCurr: String;

    procedure btnOKClick(Sender: TObject);
    procedure edSumNCUEnter(Sender: TObject);
    procedure edSumNCUExit(Sender: TObject);
    function Add: Boolean;
    function Edit: Boolean;
  end;

implementation

end.

unit dlgTransactionFilter_unit;

interface

type
  TdlgTransactionFilter = class(TForm)

  public
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;
    Panel1: TPanel;
    CheckBox1: TCheckBox;
    CheckBox2: TCheckBox;
    ImageList1: TImageList;
    TreeView1: TTreeView;
    tvGroup: TTreeView;
    btnOk: TButton;
    Button2: TButton;
    Button1: TButton;
    Button3: TButton;
    RadioGroup1: TRadioGroup;
    RadioGroup2: TRadioGroup;
  end;

implementation

end.

unit dlgTransaction_unit;

interface

type
  TdlgTransaction = class(TForm)

  public
    Label1: TLabel;
    lbSumNCU: TLabel;
    Label3: TLabel;
    lbSumCurr: TLabel;
    Image5: TImage;
    Label5: TLabel;
    Bevel2: TBevel;
    Label6: TLabel;
    lbCurr: TLabel;
    Bevel1: TBevel;
    btnOK: TButton;
    btnCancel: TButton;
    sbAnalyze: TScrollBox;
    Label9: TLabel;
    Label11: TLabel;
    lbSumEq: TLabel;
    qryCurr: TIBQuery;
    Transaction: TTransaction;
    TrType: TTrType;

    procedure btnOKClick(Sender: TObject);
    function EditTransaction(AnTransaction: TTransaction): Boolean;
  end;

implementation

end.

unit dlgTrType_unit;

interface

type
  TTrTypeVariable = class(TObject)

  public
    VariableName: String;
    VariableKey: Integer;
    VariableType: Integer;
    Value: String;
    ValueName: String;
  end;

  TdlgTrType = class(TForm)
  private
    procedure RefOnChange(Sender: TObject);

  public
    Label2: TLabel;
    Label3: TLabel;
    btnOK: TButton;
    btnCancel: TButton;
    dbeName: TDBEdit;
    dbeNote: TDBEdit;
    dsTrType: TDataSource;
    qryTrType: TIBQuery;
    ibuTrType: TIBUpdateSQL;
    boAccess: TboAccess;
    btnNew: TButton;
    alNew: TActionList;
    actNew: TAction;
    Bevel1: TBevel;
    sbAnalyze: TScrollBox;
    Label4: TLabel;
    Label7: TLabel;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    actAdd: TAction;
    actEdit: TAction;
    actDelete: TAction;
    lvValue: TListView;
    ilVariable: TImageList;
    Label5: TLabel;
    dbeSumNCU: TDBEdit;
    Label1: TLabel;
    dbeSumCurr: TDBEdit;
    Label6: TLabel;
    dbeCostNCU: TDBEdit;
    Label8: TLabel;
    dbeCostCurr: TDBEdit;
    qryWriteVarValue: TIBSQL;
    qryDeleteVarValue: TIBSQL;
    qryExistTransaction: TIBSQL;
    qryNewTrType: TIBSQL;
    qryReadValue: TIBSQL;
    qryReadAttr: TIBSQL;
    qryReadVariable: TIBSQL;
    btnSumNCU: TButton;
    btnSumCurr: TButton;
    btnCostNCU: TButton;
    btnCostCurr: TButton;
    actChooseVariable: TAction;
    cbDisabled: TDBCheckBox;
    Parent: Integer;
    KeyList: TStringList;

    procedure btnOKClick(Sender: TObject);
    procedure actNewExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure actAddExecute(Sender: TObject);
    procedure actEditUpdate(Sender: TObject);
    procedure actDeleteUpdate(Sender: TObject);
    procedure actDeleteExecute(Sender: TObject);
    procedure actEditExecute(Sender: TObject);
    procedure actChooseVariableExecute(Sender: TObject);
    procedure AppendTrType;
    function AddTrType(const AParent: Integer): Integer;
    function EditTrType(Key: Integer): Boolean;
    procedure ReadVarValue;
    procedure WriteVarValue;
  end;

implementation

end.

unit dlgUserDocument_unit;

interface

type
  TdlgUserDocument = class(TForm)
  private
    OldRate: Double;
    OldTrType: Integer;
    NewValueList: TAnalyzeValueList;

    procedure MakeTrTypeList;
    procedure MakeTransaction;
    procedure OnComboExit(Sender: TObject);
    procedure SetTransaction;
    procedure SetEntry(LI: TListItem);
    procedure ShowEntry;

  public
    Bevel1: TBevel;
    Label3: TLabel;
    Label9: TLabel;
    Label11: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label16: TLabel;
    btnNew: TButton;
    btnOK: TButton;
    btnCancel: TButton;
    xdbeDocumentDate: TxDateDBEdit;
    dbeSumNCU: TDBEdit;
    dbeSumCurr: TDBEdit;
    edRate: TEdit;
    btnSaveRate: TButton;
    cbDisabled: TDBCheckBox;
    dbeDescription: TDBEdit;
    btnAccess: TButton;
    btnHelp: TButton;
    dsDocument: TDataSource;
    qryDocument: TIBQuery;
    ibuDocument: TIBUpdateSQL;
    boTransaction: TboTransaction;
    ActionList1: TActionList;
    actNew: TAction;
    actHelp: TAction;
    boCurrency: TboCurrency;
    boAccess: TboAccess;
    actAccess: TAction;
    Label1: TLabel;
    cbTrType: TComboBox;
    dblbCurrency: TDBLookupComboBox;
    sbAnalyze: TScrollBox;
    lvEntry: TListView;
    Label2: TLabel;
    dbeNumber: TDBEdit;
    btnTransaction: TButton;
    actTransaction: TAction;
    actSaveRate: TAction;
    pmEntry: TPopupMenu;
    actEditEntry: TAction;
    N1: TMenuItem;
    qryGetTrType: TIBSQL;
    dsCurr: TDataSource;
    qryCurr: TIBQuery;
    KeyList: TStringList;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure dbeSumNCUExit(Sender: TObject);
    procedure dbeSumCurrExit(Sender: TObject);
    procedure dblbCurrencyExit(Sender: TObject);
    procedure actSaveRateExecute(Sender: TObject);
    procedure edRateEnter(Sender: TObject);
    procedure dblbCurrencyKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cbTrTypeExit(Sender: TObject);
    procedure cbTrTypeEnter(Sender: TObject);
    procedure actTransactionExecute(Sender: TObject);
    procedure actEditEntryExecute(Sender: TObject);
    procedure AppendUserDocument;
    function AddUserDocument: Integer;
    function EditUserDocument(const Key: Integer): Boolean;
    procedure GetRate;
  end;

implementation

end.

unit dlgViewBankStatement_unit;

interface

type
  TdlgViewBankStatement = class(TForm)

  public
    qryBankStatement: TIBQuery;
    dsBankStatement: TDataSource;
    pmBankStatement: TPopupMenu;
    Add1: TMenuItem;
    Edit1: TMenuItem;
    Delete1: TMenuItem;
    HotImages: TImageList;
    ilToolBari: TImageList;
    alBankStatetment: TActionList;
    actAdd: TAction;
    actProperty: TAction;
    actAccess: TAction;
    actDelete: TAction;
    actHelp: TAction;
    boQueryFilter: TboQueryFilter;
    boDialogFilter: TboDialogFilter;
    boSavedFilter: TboSavedFilter;
    pmFilter: TPopupMenu;
    Panel3: TPanel;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    tbFilter: TToolButton;
    ToolButton4: TToolButton;
    ToolButton5: TToolButton;
    Panel1: TPanel;
    dbgBankStatement: TDBGrid;
    Splitter1: TSplitter;
    dbgBankStatementLine: TDBGrid;
    dsBankStatementLine: TDataSource;
    qryBankStatementLine: TIBQuery;
    tmrView: TTimer;
    gsFormDataSaver1: TgsFormDataSaver;
    CurrentData: Integer;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure tmrViewTimer(Sender: TObject);
    procedure actAddExecute(Sender: TObject);
    procedure actPropertyExecute(Sender: TObject);
    procedure ToolButton5Click(Sender: TObject);
    procedure dsBankStatementDataChange(Sender: TObject; Field: TField);
    procedure ShowBankStatement(ID: Integer);
    procedure ShowBankStatementLine;
  end;

implementation

end.

unit dlgViewPaymentOrder_unit;

interface

type
  TdlgViewPaymentOrder = class(TForm)

  public
    qryPaymentOrder: TIBQuery;
    dsPaymentOrder: TDataSource;
    pmPaymentOrder: TPopupMenu;
    Add1: TMenuItem;
    Edit1: TMenuItem;
    Delete1: TMenuItem;
    HotImages: TImageList;
    ilToolBari: TImageList;
    alPaymentOrder: TActionList;
    actAdd: TAction;
    actProperty: TAction;
    actAccess: TAction;
    actDelete: TAction;
    boQueryFilter: TboQueryFilter;
    boDialogFilter: TboDialogFilter;
    boSavedFilter: TboSavedFilter;
    pmFilter: TPopupMenu;
    actHelp: TAction;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet3: TTabSheet;
    Panel9: TPanel;
    CoolBar4: TCoolBar;
    ToolBar4: TToolBar;
    ToolButton16: TToolButton;
    ToolButton19: TToolButton;
    ToolButton20: TToolButton;
    ToolButton22: TToolButton;
    ToolButton23: TToolButton;
    Panel3: TPanel;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    tbFilter: TToolButton;
    ToolButton4: TToolButton;
    ToolButton5: TToolButton;
    Panel1: TPanel;
    dbgPaymentOrder: TDBGrid;
    dbgPaymentSpec: TDBGrid;
    pmPaymentSpec: TPopupMenu;
    MenuItem1: TMenuItem;
    MenuItem2: TMenuItem;
    MenuItem3: TMenuItem;
    dsPaymentSpec: TDataSource;
    qryPaymentSpec: TIBQuery;
    actAddPaymentSpec: TAction;
    actEditPaymentSpec: TAction;
    actDeletePaymentSpec: TAction;
    TabSheet2: TTabSheet;

    procedure FormCreate(Sender: TObject);
    procedure actAddExecute(Sender: TObject);
    procedure actPropertyExecute(Sender: TObject);
    procedure ToolButton5Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure ToolButton23Click(Sender: TObject);
    procedure actEditPaymentSpecUpdate(Sender: TObject);
    procedure actDeletePaymentSpecUpdate(Sender: TObject);
    procedure actAddPaymentSpecExecute(Sender: TObject);
    procedure actEditPaymentSpecExecute(Sender: TObject);
    procedure ShowPaymentOrder(ID: Integer);
    procedure ShowPaymentSpec(ID: Integer);
  end;

implementation

end.

unit dlgViewTransaction_unit;

interface

type
  TdlgViewTransaction = class(TForm)
  private
    IsShowEntry: Boolean;
    IsShowJ: Boolean;
    CurrentTransaction: Integer;
    CurrentJTransaction: Integer;

    procedure DocumentOnClick(Sender: TObject);

  public
    pgJournal: TPageControl;
    tsTransaction: TTabSheet;
    Splitter1: TSplitter;
    Panel1: TPanel;
    Panel2: TPanel;
    tsEntryList: TTabSheet;
    Panel3: TPanel;
    CoolBar1: TCoolBar;
    alJournal: TActionList;
    ilHotImages: TImageList;
    ilToolBar: TImageList;
    ToolBar1: TToolBar;
    tbDelete: TToolButton;
    Panel4: TPanel;
    Panel5: TPanel;
    CoolBar2: TCoolBar;
    ToolBar2: TToolBar;
    ToolButton3: TToolButton;
    dsTransaction: TDataSource;
    qryTransaction: TIBQuery;
    pmTransaction: TPopupMenu;
    bodfTransaction: TboDialogFilter;
    boqfTransaction: TboQueryFilter;
    bosfTransaction: TboSavedFilter;
    dbgTransactionEntry: TDBGrid;
    dbgEntryList: TDBGrid;
    dsEntryList: TDataSource;
    qryEntryList: TIBQuery;
    dsTransactionEntry: TDataSource;
    qryTransactionEntry: TIBQuery;
    pmEntry: TPopupMenu;
    bodfEntryList: TboDialogFilter;
    boqfEntryList: TboQueryFilter;
    bosfEntryList: TboSavedFilter;
    gsFormDataSaver: TgsFormDataSaver;
    tsJ_Transaction: TTabSheet;
    Panel6: TPanel;
    CoolBar3: TCoolBar;
    ToolBar3: TToolBar;
    ToolButton1: TToolButton;
    Panel7: TPanel;
    dbfJTransaction: TDBGrid;
    Panel8: TPanel;
    DBGrid2: TDBGrid;
    Splitter2: TSplitter;
    ToolButton2: TToolButton;
    actDocumentTr: TAction;
    ToolButton4: TToolButton;
    ToolButton5: TToolButton;
    actDocumentEntry: TAction;
    actDocumentJ: TAction;
    bodfJTransaction: TboDialogFilter;
    boqfJTransaction: TboQueryFilter;
    bosfJTransaction: TboSavedFilter;
    dsJTransaction: TDataSource;
    qryJTransaction: TIBQuery;
    ToolButton6: TToolButton;
    actDel: TAction;
    tmrTransaction: TTimer;
    dsJTransactionEntry: TDataSource;
    qryJTransactionEntry: TIBQuery;
    tmrJTransaction: TTimer;
    ToolButton7: TToolButton;
    actRefreshTr: TAction;
    actRefreshEntry: TAction;
    actRefreshJ: TAction;
    ToolButton8: TToolButton;
    ToolButton9: TToolButton;
    ToolButton10: TToolButton;
    actNew: TAction;
    pmAdd: TPopupMenu;
    N1: TMenuItem;
    qryGetDocType: TIBSQL;
    N2: TMenuItem;
    dbgTransaction: TgsDBGrid;

    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure pgJournalChange(Sender: TObject);
    procedure bosfTransactionChange(Sender: TObject; Change: Boolean);
    procedure bosfTransactionFiltred(Sender: TObject; Change: Boolean);
    procedure bosfEntryListChange(Sender: TObject; Change: Boolean);
    procedure bosfEntryListFiltred(Sender: TObject; Change: Boolean);
    procedure tmrTransactionTimer(Sender: TObject);
    procedure tmrJTransactionTimer(Sender: TObject);
    procedure dsTransactionDataChange(Sender: TObject; Field: TField);
    procedure dsJTransactionDataChange(Sender: TObject; Field: TField);
    procedure actDocumentTrUpdate(Sender: TObject);
    procedure actDocumentEntryUpdate(Sender: TObject);
    procedure actDocumentJExecute(Sender: TObject);
    procedure actDocumentTrExecute(Sender: TObject);
    procedure actDocumentEntryExecute(Sender: TObject);
    procedure actDocumentJUpdate(Sender: TObject);
    procedure actRefreshTrExecute(Sender: TObject);
    procedure actRefreshJExecute(Sender: TObject);
    procedure actRefreshEntryExecute(Sender: TObject);
    procedure N1Click(Sender: TObject);
    procedure ShowTransaction;
    procedure ShowEntry;
    procedure ShowJTransaction;
    procedure ShowTrEntry;
    procedure ShowJTrEntry;
  end;

implementation

end.

unit dlgViewTrType_unit;

interface

type
  TdlgViewTrType = class(TForm)

  public
    Panel3: TPanel;
    CoolBar1: TCoolBar;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    tbDelete: TToolButton;
    ToolButton3: TToolButton;
    Panel1: TPanel;
    Panel2: TPanel;
    lvEntryType: TListView;
    Panel4: TPanel;
    tvTrType: TTreeView;
    ilHotImages: TImageList;
    ilToolBar: TImageList;
    alCardAccount: TActionList;
    actNewTrType: TAction;
    actNewEntryType: TAction;
    actProperty: TAction;
    actDelete: TAction;
    actAccess: TAction;
    pmAdd: TPopupMenu;
    N2: TMenuItem;
    pmTrType: TPopupMenu;
    N5: TMenuItem;
    N15: TMenuItem;
    N14: TMenuItem;
    N6: TMenuItem;
    N1: TMenuItem;
    qryEntryType: TIBQuery;
    qryTrType: TIBQuery;
    boAccess: TboAccess;
    ilSmall: TImageList;
    tmrView: TTimer;
    qrySetAccess: TIBQuery;
    qryDeleteEntryType: TIBQuery;
    qryDeleteTrType: TIBQuery;
    N3: TMenuItem;
    pmEntryType: TPopupMenu;
    MenuItem1: TMenuItem;
    MenuItem5: TMenuItem;
    MenuItem6: TMenuItem;
    MenuItem7: TMenuItem;
    MenuItem8: TMenuItem;
    Splitter2: TSplitter;
    CurrentID: Integer;
    AccessAddTrType, AccessEditTrType, AccessDeleteTrType: Boolean;

    procedure FormCreate(Sender: TObject);
    procedure actNewTrTypeExecute(Sender: TObject);
    procedure aNewSubTrTypeExecute(Sender: TObject);
    procedure actPropertyExecute(Sender: TObject);
    procedure tvTrTypeChange(Sender: TObject; Node: TTreeNode);
    procedure tmrViewTimer(Sender: TObject);
    procedure actAccessExecute(Sender: TObject);
    procedure actNewEntryTypeExecute(Sender: TObject);
    procedure actDeleteExecute(Sender: TObject);
    procedure actNewTrTypeUpdate(Sender: TObject);
    procedure actNewEntryTypeUpdate(Sender: TObject);
    procedure actDeleteUpdate(Sender: TObject);
    procedure actPropertyUpdate(Sender: TObject);
    procedure ShowTrType;
    procedure ShowEntryType;
  end;

implementation

end.

unit dmDocument_unit;

interface

type
  TdmDocument = class(TDataModule)

  public
    qryGetDocumentType: TIBSQL;
    qryNewDocument: TIBSQL;
    qryNewNumber: TIBSQL;
    qryNewPaymentNumber: TIBSQL;
    gsDBGridSaver: TgsDBGridSaver;

    function GetNewNumber(DocumentType: Integer): String;
    function GetNewPaymentNumber(DocumentType, AccountKey: Integer): String;
    function GetNewKey: Integer;
    function GetDocumentType(DocumentKey: Integer): Integer;
    procedure SetParams(qryDocument: TIBQuery);
    function AddDocument(DocumentType: Integer): Integer;
    function CopyDocument(DocumentKey: Integer): Integer;
    function EditDocument(DocumentKey: Integer): Boolean;
    function DeleteDocument(DocumentKey: Integer): Boolean;
    function AddPaymentOrder: Integer;
    function EditPaymentOrder(DocumentKey: Integer): Boolean;
    function DeletePaymentOrder(DocumentKey: Integer): Boolean;
    function AddBankStatement: Integer;
    function EditBankStatement(DocumentKey: Integer): Boolean;
    function DeleteBankStatement(DocumentKey: Integer): Boolean;
    function AddUserDocument: Integer;
    function EditUserDocument(DocumentKey: Integer): Boolean;
    function DeleteUserDocument(DocumentKey: Integer): Boolean;
  end;

implementation

end.

unit gd_CommonClasses;

interface

type
(* Переменная со значением и типом*)
  TVariable = class(TObject)

  public
    Variable: String;
    Value: String;
    VariableType: TVariableType;
    AttrSetKey: Integer;

    procedure Assign(const AVaiable: TVariable);
  end;

(* Список переменных*)
  TVariableList = class(TList)
  private
    function GetVariable(Index: Integer): TVariable;

  public
    destructor Destroy;

    procedure Assign(const Source: TVariableList);
    procedure Clear;
    procedure DeleteVariable(const Index: Integer);
    function IndexOf(const AVariable: String): Integer;
    function IndexOfAnalyze(const AVariable: String): Integer;
    function GetValue(const AVariable: String): String;
    function GetAnalyze(const AVariable: String): String;
    function SetValue(const AVariable, AValue: String; const AnAttrSetKey: Integer;
      const AVariableType: TVariableType): Integer;
    function AddVariable(const AVariable: Integer;
      const AValue: String; const AnAttrSetKey: Integer): Integer;
    function AddVariable(const AVariable: Integer;
      const AValue: String): Integer;
    function AddVariable(const AVariable: TVariable): Integer;
    function AddVariable(const AVariable, AValue: String; const AnAttrSetKey: Integer;
      const AVariableType: TVariableType): Integer;

    property Variables[Index: Integer]: TVariable read GetVariable;
  end;

implementation

end.

